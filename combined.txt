LISTA DE ARCHIVOS PROCESADOS:
C:\ThomasParking\ThomasParking\dist\assets\index.DwPDEBZ5.css
C:\ThomasParking\ThomasParking\src\App.jsx
C:\ThomasParking\ThomasParking\src\main.jsx
C:\ThomasParking\ThomasParking\src\components\AuditLog.jsx
C:\ThomasParking\ThomasParking\src\components\AuthGuard.jsx
C:\ThomasParking\ThomasParking\src\components\CapturaCamara.jsx
C:\ThomasParking\ThomasParking\src\components\Compensacion.jsx
C:\ThomasParking\ThomasParking\src\components\DetalleConsulta.jsx
C:\ThomasParking\ThomasParking\src\components\Emoji.jsx
C:\ThomasParking\ThomasParking\src\components\ErrorBoundary.jsx
C:\ThomasParking\ThomasParking\src\components\ErrorMessage.jsx
C:\ThomasParking\ThomasParking\src\components\ExportarPDF.jsx
C:\ThomasParking\ThomasParking\src\components\Filtros.jsx
C:\ThomasParking\ThomasParking\src\components\Footer.jsx
C:\ThomasParking\ThomasParking\src\components\ListaRegistros.jsx
C:\ThomasParking\ThomasParking\src\components\Loader.jsx
C:\ThomasParking\ThomasParking\src\components\LoadingOverlay.jsx
C:\ThomasParking\ThomasParking\src\components\LoadingScreen.jsx
C:\ThomasParking\ThomasParking\src\components\Modal.jsx
C:\ThomasParking\ThomasParking\src\components\Navbar.jsx
C:\ThomasParking\ThomasParking\src\components\OnlineStatusIndicator.jsx
C:\ThomasParking\ThomasParking\src\components\ResizeImage.jsx
C:\ThomasParking\ThomasParking\src\components\ResumenRegistros.jsx
C:\ThomasParking\ThomasParking\src\components\SelectorDeFoto.jsx
C:\ThomasParking\ThomasParking\src\components\SemaforoResumen.jsx
C:\ThomasParking\ThomasParking\src\components\SignUp.jsx
C:\ThomasParking\ThomasParking\src\components\SyncIndicator.jsx
C:\ThomasParking\ThomasParking\src\components\TablaResultados.jsx
C:\ThomasParking\ThomasParking\src\components\ThemeToggle.jsx
C:\ThomasParking\ThomasParking\src\context\ThemeContext.jsx
C:\ThomasParking\ThomasParking\src\context\UserContext.jsx
C:\ThomasParking\ThomasParking\src\context\ViewContext.jsx
C:\ThomasParking\ThomasParking\src\hooks\useHover.jsx
C:\ThomasParking\ThomasParking\src\hooks\useOnlineStatus.jsx
C:\ThomasParking\ThomasParking\src\pages\AcercaDe.jsx
C:\ThomasParking\ThomasParking\src\pages\CapturaFoto.jsx
C:\ThomasParking\ThomasParking\src\pages\Compensacion.jsx
C:\ThomasParking\ThomasParking\src\pages\Consultas.jsx
C:\ThomasParking\ThomasParking\src\pages\DescargoGestion.jsx
C:\ThomasParking\ThomasParking\src\pages\GestionCopropietarios.jsx
C:\ThomasParking\ThomasParking\src\pages\GestionUsuarios.jsx
C:\ThomasParking\ThomasParking\src\pages\Login.jsx
C:\ThomasParking\ThomasParking\src\pages\RegistroParqueo.jsx
C:\ThomasParking\ThomasParking\src\pages\ResetPassword.jsx
C:\ThomasParking\ThomasParking\src\pages\ResumenRecaudo.jsx
C:\ThomasParking\ThomasParking\src\providers\QueryClientProvider.jsx
C:\ThomasParking\ThomasParking\src\styles\global.css

============================================================



----- C:\ThomasParking\ThomasParking\dist\assets\index.DwPDEBZ5.css -----

@charset "UTF-8";.react-datepicker__navigation-icon:before,.react-datepicker__year-read-view--down-arrow,.react-datepicker__month-read-view--down-arrow,.react-datepicker__month-year-read-view--down-arrow{border-color:#ccc;border-style:solid;border-width:3px 3px 0 0;content:"";display:block;height:9px;position:absolute;top:6px;width:9px}.react-datepicker-wrapper{display:inline-block;padding:0;border:0}.react-datepicker{font-family:Helvetica Neue,helvetica,arial,sans-serif;font-size:.8rem;background-color:#fff;color:#000;border:1px solid #aeaeae;border-radius:.3rem;display:inline-block;position:relative;line-height:initial}.react-datepicker--time-only .react-datepicker__time-container{border-left:0}.react-datepicker--time-only .react-datepicker__time,.react-datepicker--time-only .react-datepicker__time-box{border-bottom-left-radius:.3rem;border-bottom-right-radius:.3rem}.react-datepicker-popper{z-index:1;line-height:0}.react-datepicker-popper .react-datepicker__triangle{stroke:#aeaeae}.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle{fill:#f0f0f0;color:#f0f0f0}.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle{fill:#fff;color:#fff}.react-datepicker__header{text-align:center;background-color:#f0f0f0;border-bottom:1px solid #aeaeae;border-top-left-radius:.3rem;padding:8px 0;position:relative}.react-datepicker__header--time{padding-bottom:8px;padding-left:5px;padding-right:5px}.react-datepicker__header--time:not(.react-datepicker__header--time--only){border-top-left-radius:0}.react-datepicker__header:not(.react-datepicker__header--has-time-select){border-top-right-radius:.3rem}.react-datepicker__year-dropdown-container--select,.react-datepicker__month-dropdown-container--select,.react-datepicker__month-year-dropdown-container--select,.react-datepicker__year-dropdown-container--scroll,.react-datepicker__month-dropdown-container--scroll,.react-datepicker__month-year-dropdown-container--scroll{display:inline-block;margin:0 15px}.react-datepicker__current-month,.react-datepicker-time__header,.react-datepicker-year-header{margin-top:0;color:#000;font-weight:700;font-size:.944rem}h2.react-datepicker__current-month{padding:0;margin:0}.react-datepicker-time__header{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.react-datepicker__navigation{align-items:center;background:none;display:flex;justify-content:center;text-align:center;cursor:pointer;position:absolute;top:2px;padding:0;border:none;z-index:1;height:32px;width:32px;text-indent:-999em;overflow:hidden}.react-datepicker__navigation--previous{left:2px}.react-datepicker__navigation--next{right:2px}.react-datepicker__navigation--next--with-time:not(.react-datepicker__navigation--next--with-today-button){right:85px}.react-datepicker__navigation--years{position:relative;top:0;display:block;margin-left:auto;margin-right:auto}.react-datepicker__navigation--years-previous{top:4px}.react-datepicker__navigation--years-upcoming{top:-4px}.react-datepicker__navigation:hover *:before{border-color:#a6a6a6}.react-datepicker__navigation-icon{position:relative;top:-1px;font-size:20px;width:0}.react-datepicker__navigation-icon--next{left:-2px}.react-datepicker__navigation-icon--next:before{transform:rotate(45deg);left:-7px}.react-datepicker__navigation-icon--previous{right:-2px}.react-datepicker__navigation-icon--previous:before{transform:rotate(225deg);right:-7px}.react-datepicker__month-container{float:left}.react-datepicker__year{margin:.4rem;text-align:center}.react-datepicker__year-wrapper{display:flex;flex-wrap:wrap;max-width:180px}.react-datepicker__year .react-datepicker__year-text{display:inline-block;width:4rem;margin:2px}.react-datepicker__month{margin:.4rem;text-align:center}.react-datepicker__month .react-datepicker__month-text,.react-datepicker__month .react-datepicker__quarter-text{display:inline-block;width:4rem;margin:2px}.react-datepicker__input-time-container{clear:both;width:100%;float:left;margin:5px 0 10px 15px;text-align:left}.react-datepicker__input-time-container .react-datepicker-time__caption,.react-datepicker__input-time-container .react-datepicker-time__input-container{display:inline-block}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input{display:inline-block;margin-left:10px}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input{width:auto}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input[type=time]::-webkit-inner-spin-button,.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input[type=time]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input[type=time]{-moz-appearance:textfield}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__delimiter{margin-left:5px;display:inline-block}.react-datepicker__time-container{float:right;border-left:1px solid #aeaeae;width:85px}.react-datepicker__time-container--with-today-button{display:inline;border:1px solid #aeaeae;border-radius:.3rem;position:absolute;right:-87px;top:0}.react-datepicker__time-container .react-datepicker__time{position:relative;background:#fff;border-bottom-right-radius:.3rem}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box{width:85px;overflow-x:hidden;margin:0 auto;text-align:center;border-bottom-right-radius:.3rem}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list{list-style:none;margin:0;height:calc(195px + .85rem);overflow-y:scroll;padding-right:0;padding-left:0;width:100%;box-sizing:content-box}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item{height:30px;padding:5px 10px;white-space:nowrap}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item:hover{cursor:pointer;background-color:#f0f0f0}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected{background-color:#216ba5;color:#fff;font-weight:700}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected:hover{background-color:#216ba5}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled{color:#ccc}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled:hover{cursor:default;background-color:transparent}.react-datepicker__week-number{color:#ccc;display:inline-block;width:1.7rem;line-height:1.7rem;text-align:center;margin:.166rem}.react-datepicker__week-number.react-datepicker__week-number--clickable{cursor:pointer}.react-datepicker__week-number.react-datepicker__week-number--clickable:not(.react-datepicker__week-number--selected):hover{border-radius:.3rem;background-color:#f0f0f0}.react-datepicker__week-number--selected{border-radius:.3rem;background-color:#216ba5;color:#fff}.react-datepicker__week-number--selected:hover{background-color:#1d5d90}.react-datepicker__day-names{white-space:nowrap;margin-bottom:-8px}.react-datepicker__week{white-space:nowrap}.react-datepicker__day-name,.react-datepicker__day,.react-datepicker__time-name{color:#000;display:inline-block;width:1.7rem;line-height:1.7rem;text-align:center;margin:.166rem}.react-datepicker__day,.react-datepicker__month-text,.react-datepicker__quarter-text,.react-datepicker__year-text{cursor:pointer}.react-datepicker__day:not([aria-disabled=true]):hover,.react-datepicker__month-text:not([aria-disabled=true]):hover,.react-datepicker__quarter-text:not([aria-disabled=true]):hover,.react-datepicker__year-text:not([aria-disabled=true]):hover{border-radius:.3rem;background-color:#f0f0f0}.react-datepicker__day--today,.react-datepicker__month-text--today,.react-datepicker__quarter-text--today,.react-datepicker__year-text--today{font-weight:700}.react-datepicker__day--highlighted,.react-datepicker__month-text--highlighted,.react-datepicker__quarter-text--highlighted,.react-datepicker__year-text--highlighted{border-radius:.3rem;background-color:#3dcc4a;color:#fff}.react-datepicker__day--highlighted:not([aria-disabled=true]):hover,.react-datepicker__month-text--highlighted:not([aria-disabled=true]):hover,.react-datepicker__quarter-text--highlighted:not([aria-disabled=true]):hover,.react-datepicker__year-text--highlighted:not([aria-disabled=true]):hover{background-color:#32be3f}.react-datepicker__day--highlighted-custom-1,.react-datepicker__month-text--highlighted-custom-1,.react-datepicker__quarter-text--highlighted-custom-1,.react-datepicker__year-text--highlighted-custom-1{color:#f0f}.react-datepicker__day--highlighted-custom-2,.react-datepicker__month-text--highlighted-custom-2,.react-datepicker__quarter-text--highlighted-custom-2,.react-datepicker__year-text--highlighted-custom-2{color:green}.react-datepicker__day--holidays,.react-datepicker__month-text--holidays,.react-datepicker__quarter-text--holidays,.react-datepicker__year-text--holidays{position:relative;border-radius:.3rem;background-color:#ff6803;color:#fff}.react-datepicker__day--holidays .overlay,.react-datepicker__month-text--holidays .overlay,.react-datepicker__quarter-text--holidays .overlay,.react-datepicker__year-text--holidays .overlay{position:absolute;bottom:100%;left:50%;transform:translate(-50%);background-color:#333;color:#fff;padding:4px;border-radius:4px;white-space:nowrap;visibility:hidden;opacity:0;transition:visibility 0s,opacity .3s ease-in-out}.react-datepicker__day--holidays:not([aria-disabled=true]):hover,.react-datepicker__month-text--holidays:not([aria-disabled=true]):hover,.react-datepicker__quarter-text--holidays:not([aria-disabled=true]):hover,.react-datepicker__year-text--holidays:not([aria-disabled=true]):hover{background-color:#cf5300}.react-datepicker__day--holidays:hover .overlay,.react-datepicker__month-text--holidays:hover .overlay,.react-datepicker__quarter-text--holidays:hover .overlay,.react-datepicker__year-text--holidays:hover .overlay{visibility:visible;opacity:1}.react-datepicker__day--selected,.react-datepicker__day--in-selecting-range,.react-datepicker__day--in-range,.react-datepicker__month-text--selected,.react-datepicker__month-text--in-selecting-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--selected,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--selected,.react-datepicker__year-text--in-selecting-range,.react-datepicker__year-text--in-range{border-radius:.3rem;background-color:#216ba5;color:#fff}.react-datepicker__day--selected:not([aria-disabled=true]):hover,.react-datepicker__day--in-selecting-range:not([aria-disabled=true]):hover,.react-datepicker__day--in-range:not([aria-disabled=true]):hover,.react-datepicker__month-text--selected:not([aria-disabled=true]):hover,.react-datepicker__month-text--in-selecting-range:not([aria-disabled=true]):hover,.react-datepicker__month-text--in-range:not([aria-disabled=true]):hover,.react-datepicker__quarter-text--selected:not([aria-disabled=true]):hover,.react-datepicker__quarter-text--in-selecting-range:not([aria-disabled=true]):hover,.react-datepicker__quarter-text--in-range:not([aria-disabled=true]):hover,.react-datepicker__year-text--selected:not([aria-disabled=true]):hover,.react-datepicker__year-text--in-selecting-range:not([aria-disabled=true]):hover,.react-datepicker__year-text--in-range:not([aria-disabled=true]):hover{background-color:#1d5d90}.react-datepicker__day--keyboard-selected,.react-datepicker__month-text--keyboard-selected,.react-datepicker__quarter-text--keyboard-selected,.react-datepicker__year-text--keyboard-selected{border-radius:.3rem;background-color:#bad9f1;color:#000}.react-datepicker__day--keyboard-selected:not([aria-disabled=true]):hover,.react-datepicker__month-text--keyboard-selected:not([aria-disabled=true]):hover,.react-datepicker__quarter-text--keyboard-selected:not([aria-disabled=true]):hover,.react-datepicker__year-text--keyboard-selected:not([aria-disabled=true]):hover{background-color:#1d5d90}.react-datepicker__day--in-selecting-range:not(.react-datepicker__day--in-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--in-range),.react-datepicker__month-text--in-selecting-range:not(.react-datepicker__day--in-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--in-range),.react-datepicker__quarter-text--in-selecting-range:not(.react-datepicker__day--in-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--in-range),.react-datepicker__year-text--in-selecting-range:not(.react-datepicker__day--in-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--in-range){background-color:#216ba580}.react-datepicker__month--selecting-range .react-datepicker__day--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__year--selecting-range .react-datepicker__day--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__month--selecting-range .react-datepicker__month-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__year--selecting-range .react-datepicker__month-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__month--selecting-range .react-datepicker__quarter-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__year--selecting-range .react-datepicker__quarter-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__month--selecting-range .react-datepicker__year-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__year--selecting-range .react-datepicker__year-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range){background-color:#f0f0f0;color:#000}.react-datepicker__day--disabled,.react-datepicker__month-text--disabled,.react-datepicker__quarter-text--disabled,.react-datepicker__year-text--disabled{cursor:default;color:#ccc}.react-datepicker__day--disabled .overlay,.react-datepicker__month-text--disabled .overlay,.react-datepicker__quarter-text--disabled .overlay,.react-datepicker__year-text--disabled .overlay{position:absolute;bottom:70%;left:50%;transform:translate(-50%);background-color:#333;color:#fff;padding:4px;border-radius:4px;white-space:nowrap;visibility:hidden;opacity:0;transition:visibility 0s,opacity .3s ease-in-out}.react-datepicker__input-container{position:relative;display:inline-block;width:100%}.react-datepicker__input-container .react-datepicker__calendar-icon{position:absolute;padding:.5rem;box-sizing:content-box}.react-datepicker__view-calendar-icon input{padding:6px 10px 5px 25px}.react-datepicker__year-read-view,.react-datepicker__month-read-view,.react-datepicker__month-year-read-view{border:1px solid transparent;border-radius:.3rem;position:relative}.react-datepicker__year-read-view:hover,.react-datepicker__month-read-view:hover,.react-datepicker__month-year-read-view:hover{cursor:pointer}.react-datepicker__year-read-view:hover .react-datepicker__year-read-view--down-arrow,.react-datepicker__year-read-view:hover .react-datepicker__month-read-view--down-arrow,.react-datepicker__month-read-view:hover .react-datepicker__year-read-view--down-arrow,.react-datepicker__month-read-view:hover .react-datepicker__month-read-view--down-arrow,.react-datepicker__month-year-read-view:hover .react-datepicker__year-read-view--down-arrow,.react-datepicker__month-year-read-view:hover .react-datepicker__month-read-view--down-arrow{border-top-color:#b3b3b3}.react-datepicker__year-read-view--down-arrow,.react-datepicker__month-read-view--down-arrow,.react-datepicker__month-year-read-view--down-arrow{transform:rotate(135deg);right:-16px;top:0}.react-datepicker__year-dropdown,.react-datepicker__month-dropdown,.react-datepicker__month-year-dropdown{background-color:#f0f0f0;position:absolute;width:50%;left:25%;top:30px;z-index:1;text-align:center;border-radius:.3rem;border:1px solid #aeaeae}.react-datepicker__year-dropdown:hover,.react-datepicker__month-dropdown:hover,.react-datepicker__month-year-dropdown:hover{cursor:pointer}.react-datepicker__year-dropdown--scrollable,.react-datepicker__month-dropdown--scrollable,.react-datepicker__month-year-dropdown--scrollable{height:150px;overflow-y:scroll}.react-datepicker__year-option,.react-datepicker__month-option,.react-datepicker__month-year-option{line-height:20px;width:100%;display:block;margin-left:auto;margin-right:auto}.react-datepicker__year-option:first-of-type,.react-datepicker__month-option:first-of-type,.react-datepicker__month-year-option:first-of-type{border-top-left-radius:.3rem;border-top-right-radius:.3rem}.react-datepicker__year-option:last-of-type,.react-datepicker__month-option:last-of-type,.react-datepicker__month-year-option:last-of-type{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border-bottom-left-radius:.3rem;border-bottom-right-radius:.3rem}.react-datepicker__year-option:hover,.react-datepicker__month-option:hover,.react-datepicker__month-year-option:hover{background-color:#ccc}.react-datepicker__year-option:hover .react-datepicker__navigation--years-upcoming,.react-datepicker__month-option:hover .react-datepicker__navigation--years-upcoming,.react-datepicker__month-year-option:hover .react-datepicker__navigation--years-upcoming{border-bottom-color:#b3b3b3}.react-datepicker__year-option:hover .react-datepicker__navigation--years-previous,.react-datepicker__month-option:hover .react-datepicker__navigation--years-previous,.react-datepicker__month-year-option:hover .react-datepicker__navigation--years-previous{border-top-color:#b3b3b3}.react-datepicker__year-option--selected,.react-datepicker__month-option--selected,.react-datepicker__month-year-option--selected{position:absolute;left:15px}.react-datepicker__close-icon{cursor:pointer;background-color:transparent;border:0;outline:0;padding:0 6px 0 0;position:absolute;top:0;right:0;height:100%;display:table-cell;vertical-align:middle}.react-datepicker__close-icon:after{cursor:pointer;background-color:#216ba5;color:#fff;border-radius:50%;height:16px;width:16px;padding:2px;font-size:12px;line-height:1;text-align:center;display:table-cell;vertical-align:middle;content:"×"}.react-datepicker__close-icon--disabled{cursor:default}.react-datepicker__close-icon--disabled:after{cursor:default;background-color:#ccc}.react-datepicker__today-button{background:#f0f0f0;border-top:1px solid #aeaeae;cursor:pointer;text-align:center;font-weight:700;padding:5px 0;clear:left}.react-datepicker__portal{position:fixed;width:100vw;height:100vh;background-color:#000c;left:0;top:0;justify-content:center;align-items:center;display:flex;z-index:2147483647}.react-datepicker__portal .react-datepicker__day-name,.react-datepicker__portal .react-datepicker__day,.react-datepicker__portal .react-datepicker__time-name{width:3rem;line-height:3rem}@media (max-width: 400px),(max-height: 550px){.react-datepicker__portal .react-datepicker__day-name,.react-datepicker__portal .react-datepicker__day,.react-datepicker__portal .react-datepicker__time-name{width:2rem;line-height:2rem}}.react-datepicker__portal .react-datepicker__current-month,.react-datepicker__portal .react-datepicker-time__header{font-size:1.44rem}.react-datepicker__children-container{width:13.8rem;margin:.4rem;padding-right:.2rem;padding-left:.2rem;height:auto}.react-datepicker__aria-live{position:absolute;clip-path:circle(0);border:0;height:1px;margin:-1px;overflow:hidden;padding:0;width:1px;white-space:nowrap}.react-datepicker__calendar-icon{width:1em;height:1em;vertical-align:-.125em}:root{--background: #181f2a;--surface: #232b3e;--text: #eaf6fb;--text-muted: #7dd3fc;--primary: #00e6fb;--primary-dark: #2563eb;--primary-light: #38bdf8;--secondary: #1e40af;--accent: #7c3aed;--success: #22d3ee;--warning: #fbbf24;--danger: #ef4444;--radius-lg: 20px;--radius-md: 12px;--radius-sm: 6px;--shadow-lg: 0 8px 32px #00e6fb33;--shadow-md: 0 2px 12px #00e6fb44;--transition: .22s cubic-bezier(.4,0,.2,1);--font-main: "Inter", "Segoe UI", Arial, sans-serif;--focus: #00e6fb;--table-header: linear-gradient(90deg, #0ff 0%, #38bdf8 100%);--table-header-text: #18181b;--table-row-hover: #1e293b;--banner-bg: #0ff6;--banner-text: #18181b}[data-theme=light]{--background: #f6fbff;--surface: #fff;--text: #18181b;--text-muted: #38bdf8;--primary: #2563eb;--primary-dark: #1e40af;--primary-light: #38bdf8;--secondary: #1e40af;--accent: #7c3aed;--success: #10b981;--warning: #fbbf24;--danger: #ef4444;--shadow-lg: 0 8px 32px #2563eb33;--shadow-md: 0 2px 12px #2563eb44;--focus: #2563eb;--table-header: linear-gradient(90deg, #2563eb 0%, #38bdf8 100%);--table-header-text: #fff;--table-row-hover: #e0f2fe;--banner-bg: #e0f2fe;--banner-text: #2563eb}html,body{margin:0;padding:0;font-family:var(--font-main);background:var(--background);color:var(--text);min-height:100vh;scroll-behavior:smooth;transition:background var(--transition),color var(--transition);-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;font-size:16px}#root,.app-root{min-height:100vh;display:flex;flex-direction:column;align-items:stretch;background:var(--background)}h1,h2,h3,h4{font-weight:900;letter-spacing:-1px;margin-top:0;text-align:center;line-height:1.15;color:var(--primary);text-shadow:0 2px 16px #00e6fb44}a{color:var(--primary);text-decoration:none;font-weight:600;transition:color var(--transition)}a:hover,a:focus{color:var(--accent);text-shadow:0 0 8px var(--primary-light);outline:none}header,.navbar{width:100vw;min-width:0;max-width:100vw;background:linear-gradient(90deg,#2563eb,#7c3aed);color:#fff;box-shadow:0 2px 12px #6366f144;position:fixed;top:0;left:0;z-index:50;height:48px;padding:0 4px;font-size:1rem}header .menu-mobile-fullscreen,.navbar .menu-mobile-fullscreen{position:fixed;top:0;left:0;width:100vw;height:100vh;display:flex;justify-content:center;align-items:center;background:#18181b;z-index:100}header .max-w-7xl,.navbar .max-w-7xl{max-width:100vw!important;padding:0!important}header .flex,.navbar .flex{flex-wrap:nowrap;gap:.5rem;min-width:0}header .font-bold,.navbar .font-bold{font-size:1rem!important;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}header .hidden.md\:flex,.navbar .hidden.md\:flex{display:none!important}header .ml-4,.navbar .ml-4{margin-left:.5rem!important}header .ml-auto,.navbar .ml-auto{margin-left:auto!important}header .text-xs,.navbar .text-xs{font-size:.9em!important}header button,.navbar button{min-width:0!important;min-height:0!important;width:32px!important;height:32px!important;padding:4px!important;font-size:1.2em;background:transparent;box-shadow:none}header svg,.navbar svg{width:20px!important;height:20px!important}.offline-banner{width:100vw;background:#f59e42;color:#fff;font-weight:700;text-align:center;padding:10px 0;position:fixed;top:48px;left:0;z-index:100;letter-spacing:.5px}:root{--background: #f8fafc;--surface: #fff;--text: #18181b;--text-muted: #6b7280;--primary: #6366f1;--primary-light: #e0e7ff;--secondary: #38bdf8;--accent: #ff6f91;--success: #10b981;--warning: #f59e42;--danger: #ef4444;--radius-lg: 20px;--radius-md: 12px;--radius-sm: 6px;--shadow-lg: 0 8px 32px #6366f133;--shadow-md: 0 2px 12px #6366f144;--transition: .22s cubic-bezier(.4,0,.2,1);--font-main: "Inter", "Segoe UI", Arial, sans-serif;--focus: #ff6f91}[data-theme=dark]{--background: #18181b;--surface: #23272f;--text: #f3f4f6;--text-muted: #a1a1aa;--primary: #818cf8;--primary-light: #23272f;--secondary: #38bdf8;--accent: #f472b6;--shadow-lg: 0 8px 32px #818cf833;--shadow-md: 0 2px 12px #818cf844}html,body{margin:0;padding:0;font-family:var(--font-main);background:var(--background);color:var(--text);min-height:100vh;scroll-behavior:smooth;text-align:center;transition:background var(--transition),color var(--transition);-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}#root,.app-root{min-height:100vh;display:flex;flex-direction:column;align-items:center;background:var(--background)}a{color:var(--primary);text-decoration:none;transition:color var(--transition)}a:hover,a:focus{color:var(--accent);text-decoration:underline;outline-offset:2px;outline:2px solid var(--accent)}h1,h2,h3,h4{font-weight:800;letter-spacing:-1px;margin-top:0;text-align:center;line-height:1.2}button,input,select,textarea{font-family:inherit;font-size:1rem;border-radius:var(--radius-md);border:1.5px solid #e5e7eb;padding:10px 14px;outline-offset:2px;transition:border-color var(--transition),background var(--transition),box-shadow var(--transition);margin:.25rem 0;box-sizing:border-box}button{cursor:pointer;background:var(--primary);color:#fff;border:none;font-weight:600;box-shadow:var(--shadow-md);min-width:120px;min-height:44px;display:inline-flex;align-items:center;justify-content:center;gap:8px;-webkit-user-select:none;user-select:none}button:hover,button:focus{background:linear-gradient(90deg,var(--secondary) 60%,var(--accent) 100%);outline:none;box-shadow:0 0 0 3px var(--focus)}button:focus-visible{outline:3px solid var(--focus);outline-offset:3px}input:focus,select:focus,textarea:focus{border-color:var(--primary);background:#f0f9ff;box-shadow:0 0 0 3px var(--focus)}input[type=checkbox],input[type=radio]{width:1.1em;height:1.1em;accent-color:var(--primary);margin-right:7px;cursor:pointer}::-webkit-scrollbar{width:10px;background:#e0e7ef}::-webkit-scrollbar-thumb{background:var(--primary);border-radius:8px}.thumbnail{width:38px;height:38px;object-fit:cover;border-radius:var(--radius-sm);box-shadow:0 2px 6px #6366f133}.pt-16{padding-top:4rem!important}:focus-visible{outline:2.5px solid var(--focus);outline-offset:2px}.offline-banner{background:var(--banner-bg);color:var(--banner-text);padding:8px 0;text-align:center;font-weight:700;font-size:1rem;border-bottom:2px solid var(--primary);position:sticky;top:48px;z-index:40;letter-spacing:1px;text-shadow:0 1px 8px #00e6fb88}.error-message{background:#23272f;color:var(--danger);border:1.5px solid var(--primary);margin-top:1rem;padding:12px 18px;border-radius:var(--radius-md);font-size:1.06em;font-weight:600;text-align:center;max-width:700px;word-wrap:break-word;box-shadow:0 2px 12px #00e6fb33}[data-theme=light] .error-message{background:#fffbe6;color:#ef4444;border-color:#2563eb}table{width:100%;border-collapse:separate;border-spacing:0;background:var(--surface);border-radius:var(--radius-md);box-shadow:var(--shadow-md);margin-bottom:2rem;overflow:hidden;font-size:.92em}th,td{padding:10px 6px;text-align:left;border-bottom:1px solid #1e293b}th{background:var(--table-header);color:var(--table-header-text);font-weight:800;text-shadow:0 1px 6px #00e6fb88;text-transform:uppercase;letter-spacing:.5px;border-bottom:2px solid var(--primary);font-size:.93em}tr:last-child td{border-bottom:none}tbody tr:hover{background:var(--table-row-hover);color:var(--primary);transition:background var(--transition),color var(--transition)}input,select,textarea{font-family:inherit;font-size:1em;border-radius:var(--radius-md);border:1.5px solid #e5e7eb;padding:8px 10px;outline-offset:2px;margin:.18rem 0;box-sizing:border-box;background:#232b3e;color:var(--text);min-width:0;max-width:100%}input:focus,select:focus,textarea:focus{border-color:var(--primary);background:#1e293b;box-shadow:0 0 0 2px var(--focus);color:var(--primary)}button{cursor:pointer;background:var(--primary);color:#fff;border:none;font-weight:600;box-shadow:var(--shadow-md);min-width:100px;min-height:36px;display:inline-flex;align-items:center;justify-content:center;gap:8px;font-size:1em;border-radius:var(--radius-md);transition:background var(--transition),box-shadow var(--transition),color var(--transition)}button:hover,button:focus{background:linear-gradient(90deg,var(--secondary) 60%,var(--accent) 100%);outline:none;box-shadow:0 0 0 2px var(--focus)}button:active{transform:scale(.97);filter:brightness(1.1)}input[type=checkbox],input[type=radio]{width:1em;height:1em;accent-color:var(--primary);margin-right:5px;cursor:pointer}.loader-spinner{width:32px;height:32px;border:4px solid #e0e0e0;border-top:4px solid var(--primary);border-radius:50%;animation:spin 1s linear infinite;margin-bottom:.7rem;display:flex;align-items:center;justify-content:center;font-size:1.5rem}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.modal-backdrop{position:fixed;top:0;left:0;width:100vw;height:100vh;background:#18181bb3;z-index:9999;display:flex;align-items:center;justify-content:center}.modal-content{background:var(--surface);border-radius:var(--radius-lg);box-shadow:var(--shadow-lg);padding:2rem;max-width:480px;width:90vw;max-height:90vh;overflow-y:auto;text-align:left;position:relative;font-size:.97em}@media (max-width: 400px),(max-device-width: 400px){html,body{font-size:14px!important;min-width:320px;max-width:100vw;overflow-x:hidden!important}header,.navbar{height:38px!important;font-size:.95rem!important;padding:0 1px!important}.offline-banner{font-size:.92em;padding:6px 0;top:38px}table,th,td{font-size:.89em!important;padding:6px 3px!important}.modal-content{padding:.7rem!important;max-width:99vw!important;width:99vw!important}input,select,textarea,button{font-size:.97em!important;padding:7px 8px!important}.registros-table-wrapper,.resultados-table-container{max-width:100vw!important;overflow-x:auto!important}.sin-resultados,.error-message{font-size:.98em!important;padding:.7em 0!important}.menu-mobile-content,.navbar-mobile-content{width:98vw;max-width:98vw;padding:14px 0}}.text-center{text-align:center!important}.text-right{text-align:right!important}.font-bold{font-weight:700!important}.font-semibold{font-weight:600!important}.flex{display:flex!important}.flex-col{flex-direction:column!important}.items-center{align-items:center!important}.gap-1{gap:.25rem!important}.gap-2{gap:.5rem!important}.gap-4{gap:1rem!important}.rounded-lg{border-radius:var(--radius-lg)!important}.rounded-md{border-radius:var(--radius-md)!important}.rounded{border-radius:var(--radius-sm)!important}.shadow{box-shadow:var(--shadow-md)!important}.shadow-lg{box-shadow:var(--shadow-lg)!important}.pt-16{padding-top:3.1rem!important}.mt-10{margin-top:2.5rem!important}:focus-visible{outline:2px solid var(--focus);outline-offset:2px}.sin-resultados{color:var(--text-muted);font-size:1.05em;text-align:center;padding:.9em 0;letter-spacing:1px}.thumbnail{width:34px;height:34px;object-fit:cover;border-radius:var(--radius-sm);box-shadow:0 2px 6px #00e6fb88;border:2px solid #00e6fb}


----- C:\ThomasParking\ThomasParking\src\App.jsx -----

// src/App.jsx
import React, { useState, useEffect } from 'react';
import { BrowserRouter, Routes, Route, Navigate, useLocation } from 'react-router-dom';
import supabase from './supabaseClient';
import { ThemeProvider } from './context/ThemeContext';
import { UserProvider, useUser } from './context/UserContext';

// Componentes principales
import Navbar from './components/Navbar';
import Footer from './components/Footer';
import ErrorBoundary from './components/ErrorBoundary';
import AuthGuard from './components/AuthGuard';
import Loader from './components/Loader';
import useOnlineStatus from './hooks/useOnlineStatus';

// Páginas y componentes
import RegistroParqueo from './pages/RegistroParqueo';
import Consultas from './pages/Consultas';
import ResumenRecaudo from './pages/ResumenRecaudo';
import Compensacion from './pages/Compensacion';
import DescargoGestion from './pages/DescargoGestion';
import GestionUsuarios from './pages/GestionUsuarios';
import GestionCopropietarios from './pages/GestionCopropietarios';
import AcercaDe from './pages/AcercaDe';
import Login from './pages/Login';
import AuditLog from './components/AuditLog';
import ResetPassword from './pages/ResetPassword';


function AppRoutes({ menuOpen, setMenuOpen }) {
  const location = useLocation();
  const { user } = useUser();
  const isOnline = useOnlineStatus();
  const hideNavbarRoutes = ['/login', '/', '/registro'];

  // Sincronizar token con localStorage
  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      if (session) {
        localStorage.setItem('sb-access-token', session.access_token);
      } else {
        localStorage.removeItem('sb-access-token');
      }
    });
    return () => subscription?.unsubscribe();
  }, []);

  return (
    <>
      {/* Mostrar Navbar solo en rutas permitidas */}
      {!hideNavbarRoutes.includes(location.pathname) && (
        <Navbar menuOpen={menuOpen} setMenuOpen={setMenuOpen} />
      )}

      {/* Banner de modo offline */}
      {!isOnline && (
        <div className="offline-banner" role="status" aria-live="polite">
          <span role="img" aria-label="offline">⚡</span>
          Modo offline: solo lectura. Edición y borrado deshabilitados.
        </div>
      )}

      {/* Contenido principal */}
      {!menuOpen && (
        <div className="pt-16 min-h-screen flex flex-col">
          <Routes>
            <Route path="/login" element={
              user ? <Navigate to="/consultas" replace /> : <Login />
            } />

            {/* Rutas protegidas */}
            <Route
  path="/registros"
  element={
    <AuthGuard requiredRole={['admin', 'registrador']}>
      <RegistroParqueo />
    </AuthGuard>
  }
/>

            <Route path="/consultas" element={
              <AuthGuard>
                <Consultas />
              </AuthGuard>
            } />
            <Route path="/recaudo" element={
              <AuthGuard requiredRole="admin">
                <ResumenRecaudo />
              </AuthGuard>
            } />
            <Route path="/compensacion" element={
              <AuthGuard requiredRole="admin">
                <Compensacion />
              </AuthGuard>
            } />
            <Route path="/descargos" element={
              <AuthGuard requiredRole="admin">
                <DescargoGestion />
              </AuthGuard>
            } />
            <Route path="/acercade" element={
              <AuthGuard>
                <AcercaDe />
              </AuthGuard>
            } />
            <Route path="/usuarios" element={
              <AuthGuard requiredRole="admin">
                <GestionUsuarios />
              </AuthGuard>
            } />
            <Route path="/copropietarios" element={
              <AuthGuard requiredRole="admin">
                <GestionCopropietarios />
              </AuthGuard>
            } />
            <Route path="/auditoria" element={
              <AuthGuard requiredRole="admin">
                <AuditLog />
              </AuthGuard>
            } />

            {/* Redirecciones */}
            <Route path="/" element={<Navigate to="/consultas" replace />} />
            <Route path="*" element={<Navigate to="/" replace />} />

            <Route path="/reset-password" element={<ResetPassword />} />

          </Routes>
          <Footer />
        </div>
      )}
    </>
  );
}

function App() {
  const [menuOpen, setMenuOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [updateAvailable, setUpdateAvailable] = useState(false);

  // Registrar Service Worker y manejar actualizaciones
  useEffect(() => {
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/service-worker.js')
          .then(registration => {
            registration.addEventListener('updatefound', () => {
              const newWorker = registration.installing;
              newWorker.addEventListener('statechange', () => {
                if (newWorker.state === 'installed') {
                  if (navigator.serviceWorker.controller) {
                    setUpdateAvailable(true);
                    newWorker.postMessage('SKIP_WAITING');
                  }
                }
              });
            });
          })
          .catch(error => console.log('Error registrando Service Worker:', error));
      });
    }
  }, []);

  // Forzar recarga para actualizar la app
  const handleUpdateApp = () => {
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.ready.then(registration => {
        registration.unregister().then(() => {
          window.location.reload(true);
        });
      });
    }
  };

  // Control de sesión inicial
  useEffect(() => {
    const checkSession = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      if (session) {
        localStorage.setItem('sb-access-token', session.access_token);
      }
      setLoading(false);
    };
    checkSession();
  }, []);

  if (loading) {
    return <Loader fullScreen text="Inicializando aplicación..." />;
  }

  return (
    <ThemeProvider>
      <UserProvider>
        <BrowserRouter>
          <ErrorBoundary>
            {/* Notificación de actualización */}
            {updateAvailable && (
              <div className="fixed bottom-4 right-4 bg-blue-500 text-white p-4 rounded-lg shadow-lg flex items-center gap-4 z-50">
                <span>¡Nueva versión disponible!</span>
                <button 
                  onClick={handleUpdateApp}
                  className="bg-white text-blue-500 px-4 py-2 rounded hover:bg-blue-50 transition-colors"
                >
                  Actualizar ahora
                </button>
              </div>
            )}
            <AppRoutes 
              menuOpen={menuOpen} 
              setMenuOpen={setMenuOpen} 
            />
          </ErrorBoundary>
        </BrowserRouter>
      </UserProvider>
    </ThemeProvider>
  );
}

export default App;


----- C:\ThomasParking\ThomasParking\src\main.jsx -----

// src/main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './styles/global.css'

// Si tu ThemeProvider está en App.jsx, no es necesario envolver aquí.
// Si prefieres envolver aquí, descomenta la siguiente línea:
// import { ThemeProvider } from './context/ThemeContext'

// Registro de Service Worker para PWA (opcional)
if ('serviceWorker' in navigator && import.meta.env.PROD) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/service-worker.js')
      .then(registration => {
        console.log('ServiceWorker registrado con éxito:', registration.scope)
      })
      .catch(error => {
        console.error('Error al registrar ServiceWorker:', error)
      })
  })
}

// Renderizado principal de la app
ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    {/* Si usas ThemeProvider global, puedes envolver aquí:
    <ThemeProvider>
      <App />
    </ThemeProvider>
    */}
    <App />
  </React.StrictMode>
)


----- C:\ThomasParking\ThomasParking\src\components\AuditLog.jsx -----

// src/components/AuditLog.jsx
import React, { useEffect, useState } from 'react';
import supabase from '../supabaseClient';
import Loader from './Loader';
import dayjs from 'dayjs';

export default function AuditLog() {
  const [logs, setLogs] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchLogs = async () => {
      const { data, error } = await supabase
  .from('audit_logs')
  .select(`
    id,
    accion,
    tabla_afectada,
    detalles,
    fecha_hora,
    usuario:usuarios_app(email)
  `)
  .order('fecha_hora', { ascending: false });



      if (!error) setLogs(data);
      setLoading(false);
    };

    fetchLogs();
  }, []);

  if (loading) return <Loader text="Cargando registros de auditoría..." />;

  return (
    <div className="max-w-6xl mx-auto p-4">
      <h2 className="text-2xl font-bold mb-6">Registros de Auditoría</h2>
      
      <div className="overflow-x-auto rounded-lg border border-gray-200">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Fecha/Hora</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Acción</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Tabla</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Usuario</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Detalles</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {logs.map(log => (
              <tr key={log.id}>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {dayjs(log.fecha_hora).format('DD/MM/YYYY HH:mm')}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                    {log.accion}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {log.tabla_afectada}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {log.usuario?.email || 'Sistema'}</td>
                <td className="px-6 py-4 text-sm text-gray-900 max-w-xs">
                  <pre className="whitespace-pre-wrap break-words font-mono text-xs">
                    {JSON.stringify(log.detalles, null, 2)}
                  </pre>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {logs.length === 0 && (
        <div className="text-center py-8 text-gray-500">
          No se encontraron registros de auditoría
        </div>
      )}
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\components\AuthGuard.jsx -----

// src/components/AuthGuard.jsx
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Navigate, useLocation, Outlet } from 'react-router-dom';
import supabase from '../supabaseClient';
import Loader from './Loader';
import ErrorMessage from './ErrorMessage';
import { useUser } from '../context/UserContext';
import useOnlineStatus from '../hooks/useOnlineStatus';
import { AccessDenied } from './Navbar';

const TOKEN_REFRESH_INTERVAL = 5 * 60 * 1000; // 5 minutos
const INACTIVITY_TIMEOUT = 30 * 60 * 1000;    // 30 minutos
const ACTIVITY_EVENTS = [
  'mousemove', 'mousedown', 'keydown', 'scroll', 'touchstart', 'click'
];

export default function AuthGuard({ requiredRole = null, children }) {
  const location = useLocation();
  const { user: contextUser, setUser } = useUser();
  const [authState, setAuthState] = useState({
    user: null,
    loading: true,
    error: null,
    role: null
  });
  const isOnline = useOnlineStatus();

  // Referencias para timers
  const inactivityTimer = useRef(null);
  const refreshInterval = useRef(null);
  const activityDetected = useRef(false);
  const isMounted = useRef(true);

  // --- Función para chequear autorización y rol ---
  const checkAuthorization = useCallback(async (user) => {
    try {
      const { data, error } = await supabase
        .from('usuarios_app')
        .select('email, rol, activo, nombre')
        .eq('email', user.email)
        .single();

      if (error) throw new Error('Error de autorización: ' + error.message);
      if (!data) throw new Error('Usuario no registrado');
      if (!data.activo) throw new Error('Cuenta desactivada');

      return { ...user, role: data.rol, nombre: data.nombre };
    } catch (error) {
      await supabase.auth.signOut();
      throw error;
    }
  }, []);

  // --- Manejo de cambios de sesión/auth ---
  const handleAuthStateChange = useCallback(async (session) => {
    try {
      if (!session?.user) {
        setAuthState({ user: null, loading: false, error: null, role: null });
        setUser(null);
        return;
      }
      const authorizedUser = await checkAuthorization(session.user);
      setAuthState({
        user: authorizedUser,
        loading: false,
        error: null,
        role: authorizedUser.role
      });
      setUser(authorizedUser);
      localStorage.setItem('sb-access-token', session.access_token);
    } catch (error) {
      setAuthState({ user: null, loading: false, error: error.message, role: null });
      setUser(null);
    }
  }, [checkAuthorization, setUser]);

  // --- Inicialización y listeners ---
  useEffect(() => {
    isMounted.current = true;

    // Inicializa sesión al montar
    const initializeAuth = async () => {
      try {
        // Usa getSession para obtener usuario y sesión válidos
        const { data: { session }, error } = await supabase.auth.getSession();
        if (!isMounted.current) return;
        if (error) throw error;
        if (!session?.user) throw new Error('No autenticado');
        const authorizedUser = await checkAuthorization(session.user);
        if (isMounted.current) {
          setAuthState({
            user: authorizedUser,
            loading: false,
            error: null,
            role: authorizedUser.role
          });
          setUser(authorizedUser);
        }
      } catch (error) {
        if (isMounted.current) {
          setAuthState({ user: null, loading: false, error: error.message, role: null });
          setUser(null);
        }
      }
    };

    // --- Detección de actividad e inactividad ---
    const resetInactivityTimer = () => {
      clearTimeout(inactivityTimer.current);
      inactivityTimer.current = setTimeout(() => {
        supabase.auth.signOut();
      }, INACTIVITY_TIMEOUT);
      activityDetected.current = true;
    };

    // --- Refresco de token solo si hubo actividad ---
    const setupTokenRefresh = () => {
      refreshInterval.current = setInterval(async () => {
        if (activityDetected.current) {
          const { data: { session } } = await supabase.auth.getSession();
          if (session) await supabase.auth.setSession(session);
          activityDetected.current = false;
        }
      }, TOKEN_REFRESH_INTERVAL);
    };

    // --- Suscripción a cambios de autenticación ---
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (_event, session) => {
        await handleAuthStateChange(session);
      }
    );

    // --- Listeners de actividad del usuario ---
    ACTIVITY_EVENTS.forEach(event =>
      window.addEventListener(event, resetInactivityTimer)
    );
    resetInactivityTimer();
    setupTokenRefresh();
    initializeAuth();

    // Cleanup
    return () => {
      isMounted.current = false;
      clearTimeout(inactivityTimer.current);
      clearInterval(refreshInterval.current);
      ACTIVITY_EVENTS.forEach(event =>
        window.removeEventListener(event, resetInactivityTimer)
      );
      subscription?.unsubscribe();
    };
  }, [checkAuthorization, handleAuthStateChange, setUser]);

  // --- Retry manual ---
  const handleRetry = async () => {
    setAuthState(prev => ({ ...prev, loading: true, error: null }));
    try {
      const { data: { session }, error } = await supabase.auth.getSession();
      if (error) throw error;
      if (!session?.user) throw new Error('No autenticado');
      const authorizedUser = await checkAuthorization(session.user);
      setAuthState({
        user: authorizedUser,
        loading: false,
        error: null,
        role: authorizedUser.role
      });
      setUser(authorizedUser);
    } catch (error) {
      setAuthState({ user: null, loading: false, error: error.message, role: null });
      setUser(null);
    }
  };

  // --- Redirección automática si ya está autenticado y está en /login ---
  if (authState.user && location.pathname === '/login') {
    return <Navigate to="/registros" replace />;
  }

  // --- Renderizado según estado ---
  if (authState.loading) return <Loader fullScreen text="Verificando credenciales..." />;
  if (authState.error) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center p-4">
        <ErrorMessage
          title="Error de acceso"
          message={authState.error}
          retryable={isOnline}
          onRetry={handleRetry}
        >
          <button
            onClick={() => supabase.auth.signOut()}
            className="mt-4 px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors"
          >
            Cerrar Sesión
          </button>
        </ErrorMessage>
      </div>
    );
  }
  if (!authState.user) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // --- Validación de roles (soporta array o string) ---
  if (requiredRole) {
    const userRole = (authState.role || '').toLowerCase();
    const tieneAcceso = Array.isArray(requiredRole)
      ? requiredRole.map(r => r.toLowerCase()).includes(userRole)
      : userRole === requiredRole.toLowerCase();

    if (!tieneAcceso) {
      return <AccessDenied requiredRole={requiredRole} userRole={authState.role} />;
      // O si prefieres redirigir:
      // return <Navigate to="/access-denied" replace />;
    }
  }

  return children || <Outlet />;
}


----- C:\ThomasParking\ThomasParking\src\components\CapturaCamara.jsx -----


// src/components/CapturaCamara.jsx
import React, { useState, useEffect, useRef } from 'react'
import Emoji from './Emoji'
import Modal from './Modal'

/**
 * CapturaCamara
 * Modal para capturar una foto desde la cámara, con previsualización y opción de aceptar o volver a tomar.
 * Props:
 * - onCaptura: function(File) => void (llamada al aceptar la foto)
 * - onCancelar: function() => void (llamada al cancelar/cerrar el modal)
 * - maxWidth: número o string (ancho máximo de la previsualización, opcional)
 * - disabled: boolean (opcional)
 */
export default function CapturaCamara({ onCaptura, onCancelar, maxWidth = 220, disabled = false }) {
  const videoRef = useRef(null)
  const canvasRef = useRef(null)
  const [error, setError] = useState(null)
  const [foto, setFoto] = useState(null)
  const [modoCamara, setModoCamara] = useState('environment')
  const [stream, setStream] = useState(null)
  const [capturando, setCapturando] = useState(false)

  // Evita scroll en body mientras la cámara está activa
  useEffect(() => {
    const originalOverflow = document.body.style.overflow
    document.body.style.overflow = 'hidden'
    return () => {
      document.body.style.overflow = originalOverflow
    }
  }, [])

  // Iniciar cámara
  useEffect(() => {
    let activo = true
    const iniciarCamara = async () => {
      try {
        const constraints = {
          video: {
            facingMode: modoCamara,
            width: { ideal: maxWidth },
            height: { ideal: Math.round((maxWidth / 4) * 3) }
          },
          audio: false
        }
        const mediaStream = await navigator.mediaDevices.getUserMedia(constraints)
        if (activo) {
          setStream(mediaStream)
          if (videoRef.current) {
            videoRef.current.srcObject = mediaStream
          }
        }
      } catch (err) {
        setError(`Error de cámara: ${err.message}`)
      }
    }
    iniciarCamara()
    return () => {
      activo = false
      if (stream) {
        stream.getTracks().forEach(track => track.stop())
      }
    }
    // eslint-disable-next-line
  }, [modoCamara, maxWidth])

  // Capturar foto y previsualizar
  const capturarFoto = () => {
    if (disabled) return
    setCapturando(true)
    const video = videoRef.current
    const canvas = canvasRef.current
    const ctx = canvas.getContext('2d')
    canvas.width = video.videoWidth
    canvas.height = video.videoHeight
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height)
    canvas.toBlob(blob => {
      if (blob) {
        const file = new File([blob], `foto-${Date.now()}.jpg`, { type: 'image/jpeg' })
        setFoto({ url: URL.createObjectURL(file), file })
      }
      setCapturando(false)
    }, 'image/jpeg', 0.92)
  }

  // Aceptar la foto y devolver el archivo
  const aceptarFoto = () => {
    if (foto && foto.file) {
      onCaptura(foto.file)
      onCancelar() 
      if (stream) stream.getTracks().forEach(track => track.stop())
      setFoto(null)
    }
  }

  // Cambiar cámara frontal/trasera
  const cambiarCamara = () => {
    setModoCamara(prev => prev === 'user' ? 'environment' : 'user')
  }

  // Cancelar y cerrar modal
  const handleCancelar = () => {
    if (stream) stream.getTracks().forEach(track => track.stop())
    setFoto(null)
    if (onCancelar) onCancelar()
  }

  if (error) return (
    <Modal isOpen={true} onClose={handleCancelar}>
      <div className="error-camara" style={{ textAlign: 'center', padding: 24 }}>
        <Emoji symbol="📷" /> {error}
        <div style={{ fontSize: 14, marginTop: 8 }}>
          Asegúrate de permitir el acceso a la cámara
        </div>
        <button onClick={handleCancelar} style={{ marginTop: 16 }}>
          Cerrar
        </button>
      </div>
    </Modal>
  )

  return (
    <Modal isOpen={true} onClose={handleCancelar}>
      <div className="contenedor-camara" style={{ textAlign: 'center' }}>
        {!foto ? (
          <>
            <video
              ref={videoRef}
              autoPlay
              playsInline
              style={{
                width: '100%',
                maxWidth: maxWidth,
                aspectRatio: '4/3',
                borderRadius: 12,
                background: '#222',
                transform: modoCamara === 'user' ? 'scaleX(-1)' : 'none',
                boxShadow: '0 2px 16px #0006'
              }}
            />
            <div style={{ display: 'flex', gap: 10, marginTop: 16, justifyContent: 'center' }}>
              <button
                type="button"
                onClick={capturarFoto}
                className="btn-capturar"
                style={{ minWidth: 90, fontSize: 18 }}
                disabled={capturando || disabled}
              >
                <Emoji symbol="📸" /> {capturando ? 'Capturando...' : 'Capturar'}
              </button>
              <button
                type="button"
                onClick={cambiarCamara}
                className="btn-cambiar-camara"
                style={{ minWidth: 90, fontSize: 18 }}
                disabled={capturando || disabled}
              >
                <Emoji symbol="🔄" /> Cambiar
              </button>
              <button
                type="button"
                onClick={handleCancelar}
                style={{ minWidth: 90, fontSize: 18, background: '#eee', color: '#444' }}
              >
                <Emoji symbol="❌" /> Cancelar
              </button>
            </div>
          </>
        ) : (
          <>
            <img
              src={foto.url}
              alt="Previsualización"
              style={{
                width: '100%',
                maxWidth: maxWidth,
                aspectRatio: '4/3',
                borderRadius: 12,
                border: '2px solid #e0e0e0',
                boxShadow: '0 2px 16px #0006'
              }}
            />
            <div style={{ marginTop: 16, display: 'flex', gap: 12, justifyContent: 'center' }}>
              <button
                type="button"
                onClick={aceptarFoto}
                className="btn-aceptar"
                style={{ minWidth: 120, fontSize: 18, background: '#22c55e', color: '#fff' }}
              >
                <Emoji symbol="✅" /> Aceptar
              </button>
              <button
                type="button"
                onClick={() => {
                  URL.revokeObjectURL(foto.url)
                  setFoto(null)
                }}
                className="btn-reintentar"
                style={{ minWidth: 120, fontSize: 18, background: '#fbbf24', color: '#222' }}
              >
                <Emoji symbol="🔄" /> Volver a tomar
              </button>
              <button
                type="button"
                onClick={handleCancelar}
                style={{ minWidth: 90, fontSize: 18, background: '#eee', color: '#444' }}
              >
                <Emoji symbol="❌" /> Cancelar
              </button>
            </div>
          </>
        )}
        <canvas ref={canvasRef} style={{ display: 'none' }} />
      </div>
    </Modal>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\Compensacion.jsx -----

import React, { useState, useEffect } from 'react';
import { useUser } from '../context/UserContext';
import supabase from '../supabaseClient';
import Loader from '../components/Loader';
import Emoji from '../components/Emoji';
import dayjs from 'dayjs';
import ExportarPDF from '../components/ExportarPDF';
import ErrorMessage from '../components/ErrorMessage';
import ResumenRegistros from '../components/ResumenRegistros';

export default function ResumenRecaudo() {
  const { user } = useUser();
  const [registros, setRegistros] = useState([]);
  const [loading, setLoading] = useState(true);
  const [montoCompensar, setMontoCompensar] = useState('');
  const [procesando, setProcesando] = useState(false);
  const [errorCompensacion, setErrorCompensacion] = useState('');
  const [exito, setExito] = useState('');
  const [registrosModificados, setRegistrosModificados] = useState([]);
  const [copropietarios, setCopropietarios] = useState([]);
  const [filtroPropiedad, setFiltroPropiedad] = useState('');
  const [filtroUnidad, setFiltroUnidad] = useState('');

  // Columnas para PDF
  const columnasPDF = [
    { header: 'Fecha', key: 'fecha_hora_ingreso', formatter: v => dayjs(v).format('DD/MM/YY HH:mm') },
    { header: 'Placa', key: 'placa_vehiculo' },
    { header: 'Tipo', key: 'tipo_vehiculo' },
    { header: 'Monto Original', key: 'monto', formatter: v => `$${Number(v).toFixed(2)}` }
  ];

  // Cargar copropietarios
  useEffect(() => {
    const cargarCopropietarios = async () => {
      const { data, error } = await supabase
        .from('copropietarios')
        .select('propiedad, unidad_asignada');
      if (!error && data) setCopropietarios(data);
    };
    cargarCopropietarios();
  }, []);

  // Cargar registros
  useEffect(() => {
    const cargarRegistros = async () => {
      const { data } = await supabase
        .from('registros_parqueadero')
        .select('*, copropietarios:dependencia_id(propiedad, unidad_asignada)')
        .order('fecha_hora_ingreso', { ascending: true });
      setRegistros(data || []);
      setLoading(false);
    };
    cargarRegistros();
  }, []);

  // Opciones únicas para selects
  const propiedades = [...new Set(copropietarios.map(c => c.propiedad))].sort();
  const unidadesFiltradas = filtroPropiedad
    ? [...new Set(copropietarios.filter(c => c.propiedad === filtroPropiedad).map(c => c.unidad_asignada))]
    : [];

  // Filtrar registros por copropietario seleccionado
  const registrosFiltrados = registros.filter(reg =>
    reg.copropietarios?.propiedad === filtroPropiedad &&
    reg.copropietarios?.unidad_asignada === filtroUnidad
  );

  // Algoritmo para encontrar combinación exacta de registros
  function encontrarCombinacionExacta(registros, objetivo, index = 0, seleccionados = []) {
    if (objetivo === 0) return seleccionados;
    if (objetivo < 0 || index >= registros.length) return null;
    // Incluir el registro actual
    const conActual = encontrarCombinacionExacta(
      registros,
      +(objetivo - parseFloat(registros[index].monto)).toFixed(2),
      index + 1,
      [...seleccionados, registros[index]]
    );
    if (conActual) return conActual;
    // Omitir el registro actual
    return encontrarCombinacionExacta(registros, objetivo, index + 1, seleccionados);
  }

  // Manejar la compensación exacta
  const handleMarcarGratis = async () => {
    setErrorCompensacion('');
    setExito('');
    if (!filtroPropiedad || !filtroUnidad) {
      setErrorCompensacion('Debe seleccionar propiedad y unidad asignada');
      return;
    }
    const montoObjetivo = parseFloat(montoCompensar);
    if (isNaN(montoObjetivo) || montoObjetivo <= 0) {
      setErrorCompensacion('Ingrese un monto válido mayor a 0');
      return;
    }
    setProcesando(true);
    try {
      // Solo registros pendientes y no gratis del copropietario seleccionado
      const pendientes = registrosFiltrados
        .filter(r => !r.recaudado && !r.gratis)
        .sort((a, b) => new Date(a.fecha_hora_ingreso) - new Date(b.fecha_hora_ingreso));
      // Buscar combinación exacta
      const seleccion = encontrarCombinacionExacta(pendientes, +montoObjetivo.toFixed(2));
      if (!seleccion || seleccion.length === 0) {
        setErrorCompensacion('No existe una combinación exacta de registros para el monto ingresado.');
        return;
      }
      const sumaSeleccion = seleccion.reduce((acc, r) => acc + parseFloat(r.monto), 0);
      if (Math.abs(sumaSeleccion - montoObjetivo) > 0.009) {
        setErrorCompensacion('No existe una combinación exacta de registros para el monto ingresado.');
        return;
      }
      // Actualizar los registros seleccionados
      const updates = seleccion.map(reg =>
        supabase
          .from('registros_parqueadero')
          .update({
            gratis: true,
            monto: 0,
            recaudado: false,
            fecha_recaudo: null,
            usuario_gratis: user?.id || null,
            fecha_gratis: new Date().toISOString()
          })
          .eq('id', reg.id)
      );
      const resultados = await Promise.all(updates);
      const errores = resultados.filter(r => r.error);
      if (errores.length === 0) {
        setExito(`Marcados como gratis ${seleccion.length} registros (total: $${sumaSeleccion.toFixed(2)})`);
        setRegistros(prev =>
          prev.map(r =>
            seleccion.some(m => m.id === r.id) ? { ...r, gratis: true, monto: 0, recaudado: false, fecha_recaudo: null } : r
          )
        );
        setRegistrosModificados(seleccion);
      } else {
        setErrorCompensacion(`Error al actualizar algunos registros (${errores.length})`);
      }
      setMontoCompensar('');
    } catch (error) {
      setErrorCompensacion(error.message);
    } finally {
      setProcesando(false);
    }
  };

  if (loading) return <Loader text="Cargando resumen..." />;

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="flex justify-between items-center mb-8">
        <h2 className="text-2xl font-bold">
          <Emoji symbol="💰" /> Gestión de Recaudo
        </h2>
        <ExportarPDF
          datos={registrosModificados}
          columnas={columnasPDF}
          titulo="Registros Marcados como Gratis"
        />
      </div>

      {/* Filtros de copropietario */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div>
          <label className="block text-sm font-medium mb-1">Propiedad:</label>
          <select
            value={filtroPropiedad}
            onChange={e => {
              setFiltroPropiedad(e.target.value);
              setFiltroUnidad('');
            }}
            className="w-full p-2 border rounded-md"
          >
            <option value="">Seleccione propiedad...</option>
            {propiedades.map(prop => (
              <option key={prop} value={prop}>{prop}</option>
            ))}
          </select>
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Unidad asignada:</label>
          <select
            value={filtroUnidad}
            onChange={e => setFiltroUnidad(e.target.value)}
            className="w-full p-2 border rounded-md"
            disabled={!filtroPropiedad}
          >
            <option value="">Seleccione unidad...</option>
            {unidadesFiltradas.map(unidad => (
              <option key={unidad} value={unidad}>{unidad}</option>
            ))}
          </select>
        </div>
      </div>

      {/* Sección para marcar registros como gratis */}
      <div className="bg-white p-6 rounded-lg shadow-md mb-8">
        <h3 className="text-xl font-semibold mb-4">
          <Emoji symbol="🎁" /> Marcar registros como gratis
        </h3>
        <div className="input-group flex items-center gap-4">
          <label className="block text-sm font-medium">
            Monto total a compensar:
            <input
              type="number"
              min="0"
              step="0.01"
              value={montoCompensar}
              onChange={e => setMontoCompensar(e.target.value)}
              placeholder="Ej: 15.50"
              className="ml-2 p-2 border rounded w-32"
              disabled={procesando}
            />
          </label>
          <button
            onClick={handleMarcarGratis}
            disabled={!montoCompensar || procesando}
            className="px-6 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
          >
            {procesando ? <Loader text="Procesando..." /> : 'Aplicar compensación'}
          </button>
        </div>
        {errorCompensacion && <ErrorMessage message={errorCompensacion} />}
        {exito && (
          <div className="bg-green-100 text-green-700 p-3 rounded-md mt-4">
            ✅ {exito}
          </div>
        )}
        <div className="mt-2 text-sm text-gray-600">
          El monto a compensar debe coincidir exactamente con la suma de los montos de los registros seleccionados. Si no existe una combinación exacta, la operación no se realizará.
        </div>
      </div>

      {/* Resumen estadístico */}
      <ResumenRegistros registros={registrosFiltrados} />

      {/* Tabla de registros modificados */}
      <div className="mt-8">
        <h3 className="text-xl font-semibold mb-4">
          <Emoji symbol="📝" /> Últimos registros marcados como gratis
        </h3>
        <div className="space-y-4">
          {registrosModificados.map(registro => (
            <div key={registro.id} className="p-4 border rounded-lg bg-gray-50">
              <div className="flex justify-between items-center">
                <div>
                  <p className="font-medium">
                    {dayjs(registro.fecha_hora_ingreso).format('DD/MM/YYYY HH:mm')}
                  </p>
                  <p className="text-sm text-gray-600">{registro.placa_vehiculo}</p>
                </div>
                <div className="text-right">
                  <p className="text-sm line-through">${registro.monto}</p>
                  <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm">
                    <Emoji symbol="✅" /> Gratis
                  </span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\components\DetalleConsulta.jsx -----

import React from 'react';
import PropTypes from 'prop-types';

const DetalleConsulta = ({ detalle }) => (
  <div className="detalle-container">
    {detalle ? (
      <>
        <h3>Detalles del Parqueo</h3>
        <p><strong>ID:</strong> {detalle.id}</p>
        <p><strong>Nombre:</strong> {detalle.nombre}</p>
        <p><strong>Estado:</strong> {detalle.estado}</p>
        {/* Puedes agregar más campos si lo necesitas */}
      </>
    ) : (
      <p>Seleccione un parqueo para ver detalles</p>
    )}
  </div>
);

DetalleConsulta.propTypes = {
  detalle: PropTypes.object,
};

export default DetalleConsulta;


----- C:\ThomasParking\ThomasParking\src\components\Emoji.jsx -----

// src/components/Emoji.jsx
import React from 'react';
export default function Emoji({ symbol, label }) {
  return (
    <span role="img" aria-label={label} aria-hidden={label ? "false" : "true"}>
      {symbol}
    </span>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\ErrorBoundary.jsx -----

// src/components/ErrorBoundary.jsx
import React from 'react';
import PropTypes from 'prop-types';

export default class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { 
      hasError: false,
      error: null,
      errorInfo: null
    };
  }

  static getDerivedStateFromError(error) {
    return { 
      hasError: true,
      error: error 
    };
  }

  componentDidCatch(error, errorInfo) {
    console.error("Error capturado:", error, errorInfo);
    this.setState({ errorInfo });
    
    // Ejemplo de envío a servicio de monitoreo
    if (process.env.NODE_ENV === 'production') {
      // logErrorToService(error, errorInfo);
    }
  }

  handleRetry = () => {
    this.setState({
      hasError: false,
      error: null,
      errorInfo: null
    });
    
    // Opcional: Recargar la aplicación completa
    // window.location.reload();
  };

  render() {
    if (this.state.hasError) {
      return (
        <div className="max-w-lg mx-auto my-16 p-8 bg-red-50 dark:bg-red-900 rounded-lg shadow border border-red-200 dark:border-red-800 text-center">
          <h2 className="text-2xl font-bold text-red-700 dark:text-red-100 mb-2">
            ¡Algo salió mal!
          </h2>
          
          {this.state.error && (
            <p className="text-red-600 dark:text-red-300 mb-4">
              {this.state.error.message}
            </p>
          )}

          <button
            onClick={this.handleRetry}
            className="mt-4 px-5 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
            aria-label="Reintentar operación"
          >
            Reintentar
          </button>

          {process.env.NODE_ENV !== 'production' && this.state.errorInfo && (
            <details className="mt-4 text-xs text-left text-red-500 whitespace-pre-wrap">
              <summary>Detalles técnicos</summary>
              <p className="mt-2">{this.state.errorInfo.componentStack}</p>
            </details>
          )}
        </div>
      );
    }

    return this.props.children;
  }
}

ErrorBoundary.propTypes = {
  children: PropTypes.node.isRequired
};


----- C:\ThomasParking\ThomasParking\src\components\ErrorMessage.jsx -----

// src/components/ErrorMessage.jsx
import React from 'react'

/**
 * ErrorMessage
 * @param {string} title - Título del error (opcional)
 * @param {string|React.ReactNode} message - Mensaje de error a mostrar
 * @param {boolean} retryable - Si es true, muestra botón de reintentar
 * @param {function} onRetry - Función a ejecutar al reintentar
 * @param {React.ReactNode} [children] - Elementos adicionales opcionales
 */
export default function ErrorMessage({
  title = 'Ha ocurrido un error',
  message = 'Intenta nuevamente o contacta al administrador.',
  retryable = false,
  onRetry,
  children,
}) {
  return (
    <div
      className="max-w-lg mx-auto my-8 p-6 bg-red-50 dark:bg-red-900 rounded-lg border border-red-200 dark:border-red-800 shadow"
      role="alert"
      aria-live="assertive"
      aria-atomic="true"
    >
      <div className="flex items-center mb-2">
        <svg
          className="h-6 w-6 text-red-600 dark:text-red-400 mr-2 flex-shrink-0"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          aria-hidden="true"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M12 8v4m0 4h.01M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9 9 4.03 9 9z"
          />
        </svg>
        <h3 className="text-lg font-semibold text-red-800 dark:text-red-100">{title}</h3>
      </div>
      <div className="text-red-700 dark:text-red-200 mb-4 break-words">
        {typeof message === 'string' ? <p>{message}</p> : message}
      </div>
      {children}
      {retryable && typeof onRetry === 'function' && (
        <button
          onClick={onRetry}
          className="mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
        >
          Reintentar
        </button>
      )}
    </div>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\ExportarPDF.jsx -----

// src/components/ExportarPDF.jsx
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import PropTypes from 'prop-types';
import dayjs from 'dayjs';

const ExportarPDF = ({ datos, columnas, titulo, orientacion = 'landscape' }) => {
  const generarPDF = () => {
    if (!datos || !Array.isArray(datos) || datos.length === 0) {
      console.error('No hay datos para exportar');
      return;
    }

    if (!columnas || !Array.isArray(columnas)) {
      console.error('Configuración de columnas inválida');
      return;
    }

    const doc = new jsPDF({
      orientation: orientacion,
      unit: 'pt',
      format: 'a4',
    });

    // Encabezados
    const headers = columnas.map(col => col.header);
    
    // Filas
    const rows = datos.map(item => 
      columnas.map(col => {
        const valor = item[col.key];
        return col.formatter ? col.formatter(valor, item) : valor;
      })
    );

    // Estilos
    doc.setFontSize(16);
    doc.text(titulo, 40, 40);
    doc.setFontSize(10);
    doc.text(`Generado: ${dayjs().format('DD/MM/YYYY HH:mm')}`, 40, 60);

    autoTable(doc, {
      head: [headers],
      body: rows,
      startY: 80,
      styles: { fontSize: 9 },
      headStyles: { 
        fillColor: [41, 128, 185],
        textColor: 255,
        fontStyle: 'bold'
      },
      alternateRowStyles: { fillColor: [245, 245, 245] },
      margin: { left: 40, right: 40 },
      didDrawPage: (data) => {
        const pageCount = doc.internal.getNumberOfPages();
        doc.setFontSize(8);
        doc.text(
          `Página ${data.pageNumber} de ${pageCount}`,
          data.settings.margin.left,
          doc.internal.pageSize.getHeight() - 10
        );
      }
    });

    doc.save(`${titulo.toLowerCase().replace(/\s/g, '-')}-${dayjs().format('YYYYMMDD-HHmm')}.pdf`);
  };

  return (
    <button
      onClick={generarPDF}
      className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors flex items-center gap-2"
    >
      <span role="img" aria-label="PDF">📄</span>
      Exportar a PDF
    </button>
  );
};

ExportarPDF.propTypes = {
  datos: PropTypes.array.isRequired,
  columnas: PropTypes.arrayOf(
    PropTypes.shape({
      key: PropTypes.string.isRequired,
      header: PropTypes.string.isRequired,
      formatter: PropTypes.func
    })
  ).isRequired,
  titulo: PropTypes.string.isRequired,
  orientacion: PropTypes.oneOf(['landscape', 'portrait'])
};

export default ExportarPDF;


----- C:\ThomasParking\ThomasParking\src\components\Filtros.jsx -----

import React from 'react';
import PropTypes from 'prop-types';

const Filtros = ({ filtros, onChange }) => (
  <div className="filtros-section">
    <input
      type="text"
      value={filtros.texto}
      onChange={e => onChange({ ...filtros, texto: e.target.value })}
      placeholder="Buscar parqueo..."
    />
    {/* Aquí puedes añadir más filtros si lo necesitas */}
  </div>
);

Filtros.propTypes = {
  filtros: PropTypes.object.isRequired,
  onChange: PropTypes.func.isRequired,
};

export default Filtros;


----- C:\ThomasParking\ThomasParking\src\components\Footer.jsx -----

// src/components/Footer.jsx
import React from 'react'
import Emoji from './Emoji'
import useOnlineStatus from '../hooks/useOnlineStatus'

export default function Footer() {
  const year = new Date().getFullYear()
  const isOnline = useOnlineStatus();

  return (
    <footer className="w-full py-6 mt-10 bg-gray-100 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700">
      <div className="container mx-auto flex flex-col md:flex-row items-center justify-between px-4">
        <div className="text-sm text-gray-500 dark:text-gray-400 text-center md:text-left">
          © {year} Conjunto Habitacional Thomas II. Todos los derechos reservados.
        </div>
        <div className="flex items-center space-x-4 mt-2 md:mt-0">
          <a
            href="mailto:conjuntohabitacionalthomasii@gmail.com"
            className="text-gray-500 hover:text-blue-600 dark:hover:text-blue-400 transition-colors text-sm flex items-center gap-1"
            aria-label="Contacto por correo"
          >
            <Emoji symbol="✉️" label="Correo" />
            Contacto
          </a>
          <a
            href="https://github.com/jgortega593/ThomasParking.git"
            target="_blank"
            rel="noopener noreferrer"
            className="text-gray-500 hover:text-blue-600 dark:hover:text-blue-400 transition-colors text-sm flex items-center gap-1"
            aria-label="Repositorio en GitHub"
          >
            <Emoji symbol="🐱" label="GitHub" />
            GitHub
          </a>
          {/* Indicador de estado de conexión con Emoji */}
          <span
            className={`ml-4 flex items-center text-xs font-semibold ${
              isOnline ? 'text-green-500' : 'text-yellow-600'
            }`}
            aria-label={isOnline ? 'Conectado' : 'Desconectado'}
            title={isOnline ? 'Conectado' : 'Desconectado'}
          >
            {/* Emoji según estado */}
            <Emoji
              symbol={isOnline ? '🟢' : '🟡'}
              label={isOnline ? 'Conectado' : 'Desconectado'}
            />
            <span
              className={`w-2 h-2 rounded-full mx-1 ${
                isOnline ? 'bg-green-500' : 'bg-yellow-500'
              } animate-pulse`}
            ></span>
            {isOnline ? 'Online' : 'Offline'}
          </span>
        </div>
      </div>
    </footer>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\ListaRegistros.jsx -----

// src/components/ListaRegistros.jsx
import React, { useMemo } from 'react';
import Emoji from './Emoji';
import Loader from './Loader';
import dayjs from 'dayjs';
import useOnlineStatus from '../hooks/useOnlineStatus';

/**
 * ListaRegistros
 * Props:
 * - registros: array de registros a mostrar
 * - filtros: objeto de filtros aplicados
 * - loading: boolean
 * - error: string
 * - onRegistrosFiltradosChange: función (opcional)
 * - onEditar: función(registro) => void (opcional)
 * - onEliminar: función(registro) => void (opcional)
 */
export default function ListaRegistros({
  registros = [],
  filtros = {},
  loading,
  error,
  onRegistrosFiltradosChange,
  onEditar,
  onEliminar
}) {
  const isOnline = useOnlineStatus();

  // Filtrado memoizado
  const registrosFiltrados = useMemo(() => {
    return registros.filter(reg => {
      const fechaRegistro = dayjs(reg.fecha_hora_ingreso);
      const cumpleFechaInicio = !filtros.fechaInicio || fechaRegistro.isAfter(dayjs(filtros.fechaInicio).startOf('day'));
      const cumpleFechaFin = !filtros.fechaFin || fechaRegistro.isBefore(dayjs(filtros.fechaFin).endOf('day'));
      const cumplePlaca = !filtros.placa || reg.placa_vehiculo.toLowerCase().includes(filtros.placa.toLowerCase());
      const cumpleTipo = !filtros.tipoVehiculo || reg.tipo_vehiculo === filtros.tipoVehiculo;
      const cumplePropiedad = !filtros.propiedad || reg.copropietarios?.propiedad === filtros.propiedad;
      const cumpleUnidad = !filtros.unidadAsignada || reg.copropietarios?.unidad_asignada === filtros.unidadAsignada;
      return cumpleFechaInicio && cumpleFechaFin && cumplePlaca && cumpleTipo && cumplePropiedad && cumpleUnidad;
    });
  }, [registros, filtros]);

  // Notificar cambios al padre solo si cambia el array
  React.useEffect(() => {
    if (onRegistrosFiltradosChange) onRegistrosFiltradosChange(registrosFiltrados);
    // eslint-disable-next-line
  }, [registrosFiltrados]);

  // Miniaturas de fotos
  const FotosCell = ({ foto_url }) => {
    let fotos = [];
    if (Array.isArray(foto_url)) {
      fotos = foto_url.filter(url => url && url.trim() !== '');
    } else if (typeof foto_url === 'string' && foto_url.trim() !== '') {
      fotos = [foto_url];
    }
    if (fotos.length === 0) {
      return <span style={{ color: '#ef4444', fontSize: 22 }}><Emoji symbol="❌" label="Sin fotos" /></span>;
    }
    return (
      <div style={{ display: 'inline-flex', alignItems: 'center', position: 'relative', minWidth: 44 }}>
        <span style={{
          position: 'absolute',
          top: -8,
          right: -8,
          background: '#2563eb',
          color: 'white',
          borderRadius: '9999px',
          fontSize: 12,
          width: 20,
          height: 20,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 10,
          boxShadow: '0 1px 4px #0003'
        }}>
          {fotos.length}
        </span>
        {fotos.slice(0, 3).map((url, idx) => (
          <a
            key={idx}
            href={url}
            target="_blank"
            rel="noopener noreferrer"
            style={{
              display: 'inline-block',
              marginRight: 2,
              marginLeft: idx === 0 ? 0 : -8,
              zIndex: 3 - idx,
              borderRadius: 6,
              border: '1.5px solid #e5e7eb',
              boxShadow: '0 2px 4px rgba(0,0,0,0.13)',
              overflow: 'hidden'
            }}
            title={`Evidencia ${idx + 1}`}
          >
            <img
              loading="lazy"
              src={url}
              alt={`Evidencia ${idx + 1}`}
              width={38}
              height={38}
              style={{
                width: 38,
                height: 38,
                objectFit: 'cover',
                borderRadius: 6,
                display: 'block'
              }}
            />
          </a>
        ))}
        {fotos.length > 3 && (
          <span style={{ marginLeft: 4, fontSize: 13, fontWeight: 600, color: '#2563eb' }}>
            +{fotos.length - 3}
          </span>
        )}
      </div>
    );
  };

  if (loading) return <Loader text="Cargando registros..." />;
  if (error) return <div className="error-message" role="alert">{error}</div>;

  return (
    <div className="lista-registros-container">
      <div style={{ overflowX: 'auto' }}>
        <table className="registros-table" style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead>
            <tr>
              <th><Emoji symbol="⏱️" /> Fecha/Hora</th>
              <th><Emoji symbol="📷" /> Fotos</th>
              <th><Emoji symbol="🚘" /> Placa</th>
              <th><Emoji symbol="🚦" /> Tipo</th>
              <th><Emoji symbol="📝" /> Observaciones</th>
              <th><Emoji symbol="🆓" /> Gratis</th>
              <th><Emoji symbol="🔗" /> Recaudado</th>
              <th><Emoji symbol="🏠" /> Copropietario</th>
              <th><Emoji symbol="🔊" /> Audio</th>
              <th><Emoji symbol="👤" /> Registrado por</th>
              <th><Emoji symbol="⚙️" /> Acciones</th>
            </tr>
          </thead>
          <tbody>
            {registrosFiltrados.length > 0 ? (
              registrosFiltrados.map(reg => (
                <tr key={reg.id}>
                  <td>{reg.fecha_hora_ingreso ? dayjs(reg.fecha_hora_ingreso).format('DD/MM/YYYY HH:mm') : ''}</td>
                  <td><FotosCell foto_url={reg.foto_url} /></td>
                  <td>{reg.placa_vehiculo}</td>
                  <td>
                    {reg.tipo_vehiculo === 'carro' && <><Emoji symbol="🚙" label="Carro" /> </>}
                    {reg.tipo_vehiculo === 'moto' && <><Emoji symbol="🛵" label="Moto" /> </>}
                  </td>
                  <td>{reg.observaciones || '-'}</td>
                  <td style={{ textAlign: 'center' }}>
                    {reg.gratis ? <Emoji symbol="🆓" label="Gratis" /> : <Emoji symbol="❌" label="No gratis" />}
                  </td>
                  <td style={{ textAlign: 'center' }}>
                    {reg.recaudado ? <Emoji symbol="✅" label="Sí" /> : <Emoji symbol="⏳" label="No" />}
                  </td>
                  <td>
                    {reg.copropietarios ? (
                      <>
                        {reg.copropietarios.propiedad === 'Casa' && <Emoji symbol="🏡" label="Casa" />}
                        {reg.copropietarios.propiedad === 'Departamento' && <Emoji symbol="🌆" label="Departamento" />}
                        {' '}
                        - {reg.copropietarios.unidad_asignada}
                      </>
                    ) : (
                      '-'
                    )}
                  </td>
                  <td style={{ textAlign: 'center' }}>
                    {reg.observacion_audio_url && reg.observacion_audio_url !== 'pendiente-sync' ? (
                      <audio controls style={{ width: 90 }}>
                        <source src={reg.observacion_audio_url} type="audio/webm" />
                        Tu navegador no soporta audio.
                      </audio>
                    ) : (
                      <span style={{ color: '#aaa', fontSize: 14 }}>-</span>
                    )}
                  </td>
                  <td>{reg.usuario?.nombre || reg.usuarios_app?.nombre || '-'}</td>
                  <td>
                    <button
                      title="Editar"
                      disabled={!isOnline}
                      style={{ marginRight: 6, cursor: isOnline ? 'pointer' : 'not-allowed' }}
                      onClick={() => onEditar && onEditar(reg)}
                    >
                      <Emoji symbol="✏️" label="Editar" />
                    </button>
                    <button
                      title="Eliminar"
                      disabled={!isOnline}
                      style={{ cursor: isOnline ? 'pointer' : 'not-allowed' }}
                      onClick={() => onEliminar && onEliminar(reg)}
                    >
                      <Emoji symbol="🗑️" label="Eliminar" />
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={11} className="sin-resultados">
                  No se encontraron registros con los filtros seleccionados
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\components\Loader.jsx -----

// src/components/Loader.jsx
import React from 'react'

export default function Loader({ fullScreen = false, text = "⏳ Cargando..." }) {
  const loaderStyle = {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    minHeight: fullScreen ? '100vh' : '120px',
    width: '100%',
    background: fullScreen ? '#f5f6fa' : 'transparent',
    position: fullScreen ? 'fixed' : 'static',
    top: 0,
    left: 0,
    zIndex: 9999,
  }

  const spinnerStyle = {
    width: '48px',
    height: '48px',
    border: '6px solid #e0e0e0',
    borderTop: '6px solid #3498db',
    borderRadius: '50%',
    animation: 'spin 1s linear infinite',
    marginBottom: '1rem',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: '2rem'
  }

  return (
    <div style={loaderStyle}>
      <div style={spinnerStyle}>
        <span role="img" aria-label="reloj de arena" style={{ position: 'absolute', fontSize: '2.2rem', marginTop: 2 }}>
          ⏳
        </span>
      </div>
      <span style={{ color: '#2c3e50', fontWeight: 'bold', fontSize: '1.1rem' }}>{text}</span>
      <style>
        {`
          @keyframes spin {
            0% { transform: rotate(0deg);}
            100% { transform: rotate(360deg);}
          }
        `}
      </style>
    </div>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\LoadingOverlay.jsx -----

// src/components/LoadingOverlay.jsx
import React from 'react'

/**
 * LoadingOverlay
 * @param {string} message - Mensaje opcional para mostrar debajo del spinner
 * @param {boolean} fullScreen - Si es true, ocupa toda la pantalla
 */
export default function LoadingOverlay({ message = 'Cargando...', fullScreen = true }) {
  return (
    <div
      className={`flex flex-col items-center justify-center ${
        fullScreen
          ? 'fixed inset-0 z-50 bg-white/80 dark:bg-gray-900/80'
          : 'w-full h-full'
      }`}
      style={fullScreen ? { minHeight: '100vh' } : {}}
      aria-busy="true"
      aria-live="polite"
      role="status"
    >
      <div className="mb-4">
        {/* Spinner SVG accesible */}
        <svg
          className="animate-spin h-12 w-12 text-blue-600 dark:text-blue-400"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <circle
            className="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            strokeWidth="4"
          />
          <path
            className="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
          />
        </svg>
      </div>
      <span className="text-gray-700 dark:text-gray-200 text-lg font-medium">{message}</span>
    </div>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\LoadingScreen.jsx -----

// src/components/LoadingScreen.jsx

import React from 'react';

export default function LoadingScreen({ message = 'Cargando...', fullScreen = false }) {
  return (
    <div
      className={`flex flex-col items-center justify-center ${
        fullScreen
          ? 'fixed inset-0 z-50 bg-white dark:bg-gray-900 bg-opacity-80'
          : 'w-full h-full'
      }`}
      aria-busy="true"
      aria-live="polite"
      role="status"
    >
      <div className="mb-4">
        {/* Spinner SVG accesible */}
        <svg
          className="animate-spin h-10 w-10 text-blue-600 dark:text-blue-400"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <circle
            className="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            strokeWidth="4"
          />
          <path
            className="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
          />
        </svg>
      </div>
      <span className="text-gray-600 dark:text-gray-200 text-lg font-medium">{message}</span>
    </div>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\Modal.jsx -----

// src/components/Modal.jsx
import React, { useEffect } from "react";

/**
 * Modal reutilizable para toda la app.
 * Props:
 * - isOpen: boolean, controla si el modal está abierto
 * - onClose: función, llamada al cerrar (clic fondo o botón cerrar)
 * - children: contenido del modal
 */
const Modal = ({ isOpen, onClose, children }) => {
  if (!isOpen) return null;

  // Evita el scroll del fondo cuando el modal está abierto
  useEffect(() => {
    const originalOverflow = document.body.style.overflow;
    document.body.style.overflow = "hidden";
    return () => { document.body.style.overflow = originalOverflow; };
  }, []);

  return (
    <div
      className="modal-backdrop"
      style={{
        position: "fixed",
        top: 0, left: 0,
        width: "100vw",
        height: "100vh",
        background: "rgba(24,24,27,0.7)",
        zIndex: 9999,
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
      }}
      onClick={onClose}
      aria-modal="true"
      role="dialog"
    >
      <div
        className="modal-content"
        style={{
          background: "var(--surface, #fff)",
          borderRadius: 20,
          boxShadow: "0 8px 32px #6366f133",
          padding: "2rem",
          maxWidth: 480,
          width: "90vw",
          maxHeight: "90vh",
          overflowY: "auto",
          textAlign: "left",
          position: "relative"
        }}
        onClick={e => e.stopPropagation()}
      >
        {/* Botón de cerrar en la esquina superior derecha */}
        <button
          onClick={onClose}
          className="absolute top-2 right-2 text-gray-400 hover:text-red-500 text-2xl font-bold focus:outline-none"
          aria-label="Cerrar modal"
          type="button"
          style={{
            position: "absolute",
            top: 12,
            right: 12,
            background: "transparent",
            border: "none",
            fontSize: 28,
            color: "#888",
            cursor: "pointer"
          }}
        >
          ×
        </button>
        {children}
      </div>
    </div>
  );
};

export default Modal;


----- C:\ThomasParking\ThomasParking\src\components\Navbar.jsx -----

// src/components/Navbar.jsx
import React, { useEffect, useRef } from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import supabase from '../supabaseClient';
import Emoji from './Emoji';
import ThemeToggle from './ThemeToggle';
import { useUser } from '../context/UserContext';
import useOnlineStatus from '../hooks/useOnlineStatus';

// Ítems de navegación
function getAllNavItems() {
  return [
    { to: '/registros', label: 'Registro Parqueo', emoji: '📝', requiredRole: ['admin', 'registrador'] },
    { to: '/consultas', label: 'Reportes', emoji: '📊', requiredRole: null },
    { to: '/recaudo', label: 'Recaudación', emoji: '💰', requiredRole: 'admin' },
    { to: '/compensacion', label: 'Compensación', emoji: '🎁', requiredRole: 'admin' },
    { to: '/copropietarios', label: 'Copropietarios', emoji: '🏘️', requiredRole: 'admin' },
    { to: '/usuarios', label: 'Usuarios', emoji: '👥', requiredRole: 'admin' },
    { to: '/descargos', label: 'Descargos', emoji: '📤', requiredRole: 'admin' },
    { to: '/auditoria', label: 'Auditoría', emoji: '🕵️', requiredRole: 'admin' },
    { to: '/acercade', label: 'Acerca de', emoji: 'ℹ️', requiredRole: null },
    { to: '/reset-password', label: 'Restablecer Contraseña', emoji: '🔒', requiredRole: null },
  ];
}

// AccessDenied (se mantiene igual)
function AccessDenied({ requiredRole, userRole }) {
  const politicas = {
    admin: [
      '👑 Administradores pueden acceder a todas las funcionalidades',
      '💰 Gestión de recaudación y compensaciones',
      '🏘️ Administración de copropietarios y usuarios',
      '📤 Gestión de descargos y auditoría del sistema',
      '📊 Acceso completo a reportes y consultas'
    ],
    registrador: [
      '📝 Registradores pueden crear nuevos registros de parqueo',
      '📊 Consulta de reportes y datos existentes',
      'ℹ️ Acceso a información general del sistema'
    ]
  };

  return (
    <div className="max-w-2xl mx-auto p-8 text-center">
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 mb-6">
        <Emoji symbol="🚫" />
        <h2 className="text-2xl font-bold text-yellow-800 mt-2 mb-4">
          Acceso No Autorizado
        </h2>
        <p className="text-yellow-700 mb-4">
          Esta funcionalidad requiere permisos de <strong>{requiredRole}</strong>.<br />
          Tu rol actual es: <strong>{userRole}</strong>
        </p>
      </div>
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-blue-800 mb-4">
          <Emoji symbol="📋" /> Políticas de Acceso del Sistema
        </h3>
        <div className="grid md:grid-cols-2 gap-6">
          <div className="text-left">
            <h4 className="font-semibold text-blue-700 mb-3">
              <Emoji symbol="👑" /> Administradores
            </h4>
            <ul className="space-y-2 text-sm text-blue-600">
              {politicas.admin.map((politica, idx) => (
                <li key={idx} className="flex items-start gap-2">
                  <span className="text-blue-500 mt-1">•</span>
                  <span>{politica}</span>
                </li>
              ))}
            </ul>
          </div>
          <div className="text-left">
            <h4 className="font-semibold text-blue-700 mb-3">
              <Emoji symbol="📝" /> Registradores
            </h4>
            <ul className="space-y-2 text-sm text-blue-600">
              {politicas.registrador.map((politica, idx) => (
                <li key={idx} className="flex items-start gap-2">
                  <span className="text-blue-500 mt-1">•</span>
                  <span>{politica}</span>
                </li>
              ))}
            </ul>
          </div>
        </div>
        <div className="mt-6 p-4 bg-gray-50 rounded border-l-4 border-blue-400">
          <p className="text-sm text-gray-700">
            <Emoji symbol="💡" /> <strong>¿Necesitas acceso adicional?</strong><br />
            Contacta al administrador del sistema para solicitar permisos adicionales.
          </p>
        </div>
      </div>
    </div>
  );
}

// Menú móvil centrado bajo el navbar y desplegado hacia abajo
function NavMenuMobile({ navItems, user, handleNavClick, handleLogout, setMenuOpen }) {
  const menuRef = useRef();
  useEffect(() => {
    const handleEsc = (e) => { if (e.key === 'Escape') setMenuOpen(false); };
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) setMenuOpen(false);
    };
    window.addEventListener('keydown', handleEsc);
    window.addEventListener('mousedown', handleClickOutside);
    return () => {
      window.removeEventListener('keydown', handleEsc);
      window.removeEventListener('mousedown', handleClickOutside);
    };
  }, [setMenuOpen]);

  const rol = user?.role || user?.user_metadata?.role || 'registrador';
  const esAdmin = rol.toLowerCase() === 'admin';

  return (
    <div
      className="fixed left-0 top-0 w-full h-full z-50 flex flex-col items-center"
      style={{
        background: 'rgba(30,41,59,0.88)',
        paddingTop: 56, // altura del navbar
      }}
      aria-modal="true"
      role="dialog"
    >
      <nav
        ref={menuRef}
        className="bg-gradient-to-br from-blue-700 to-purple-700 rounded-b-xl shadow-lg flex flex-col items-center"
        role="navigation"
        aria-label="Menú principal móvil"
        style={{
          margin: 0,
          maxHeight: 'calc(100vh - 56px - 24px)',
          overflowY: 'auto',
          width: '96vw',
          maxWidth: 360,
          minWidth: 0,
          boxSizing: 'border-box',
          padding: '12px 0 18px 0',
          position: 'relative',
          top: 0,
        }}
      >
        {navItems.map(item => {
const tieneAcceso = !item.requiredRole
  || (Array.isArray(item.requiredRole)
      ? item.requiredRole.includes(rol)
      : rol === item.requiredRole);

          return (
            <NavLink
              key={item.to}
              to={item.to}
              onClick={handleNavClick}
              className={({ isActive }) =>
                `flex items-center gap-3 w-11/12 mx-auto px-4 py-3 rounded-lg font-medium text-base transition-colors focus:outline-none ${
                  isActive ? 'bg-white text-blue-700' : 'text-white hover:bg-white/20'
                } ${!tieneAcceso ? 'opacity-70' : ''}`
              }
              aria-current={({ isActive }) => (isActive ? 'page' : undefined)}
              style={{ boxSizing: 'border-box', marginBottom: 4 }}
            >
              <Emoji symbol={item.emoji} label={item.label} />
              {item.label}
              {!tieneAcceso && <Emoji symbol="🔒" label="Bloqueado" />}
            </NavLink>
          );
        })}
        {user && (
          <div className="flex flex-col items-center mt-6 text-center select-text w-11/12 mx-auto">
            <span className="text-white font-bold text-base">
              {user.nombre}
            </span>
            <span className="text-white text-xs font-normal mt-1 flex flex-col items-center gap-1">
              <span>{user.email}</span>
              <span>
                <Emoji symbol="🔑" label="Rol" /> {rol.toUpperCase()}
                {esAdmin && <Emoji symbol="👑" label="Administrador" />}
              </span>
            </span>
          </div>
        )}
        <div className="mt-6 w-11/12 mx-auto">
          <ThemeToggle />
        </div>
         <button
                onClick={handleLogout}
                className="flex items-center mt-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium text-sm transition-colors"
                aria-label="Cerrar sesión"
                type="button"
              >
                <Emoji symbol="🚶‍♂️➡️🚪" label="Cerrar sesión" /> <span className="ml-2"></span>
              </button>

      </nav>
    </div>
  );
}

// Navbar principal
export default function Navbar({ menuOpen, setMenuOpen }) {
  const navigate = useNavigate();
  const { user } = useUser();

  const handleLogout = async () => {
    await supabase.auth.signOut();
    setMenuOpen(false);
    navigate('/login');
  };

  const rol = (user?.role || user?.user_metadata?.role || '').toLowerCase();
  const navItems = getAllNavItems();
  const esAdmin = rol === 'admin';
  const handleNavClick = () => setMenuOpen(false);
  const isOnline = useOnlineStatus();

  return (
    <header className="w-full bg-gradient-to-r from-blue-700 to-purple-700 shadow-md fixed top-0 left-0 z-50">
      <div className="max-w-7xl mx-auto flex items-center px-4 h-14">
        {/* Logo y nombre de la app */}
        <div className="flex-shrink-0 flex items-center">
          <NavLink
            to="/"
            className="flex items-center space-x-2 text-white font-bold text-lg"
            onClick={handleNavClick}
            aria-label="Inicio"
          >
            <Emoji symbol="🅿️" label="Thomas II Parking" /> <span>Thomas II ParkingApp</span>
          </NavLink>
        </div>
        {/* Indicador de estado de conexión */}
        <span
          className={`ml-4 flex items-center text-xs font-semibold ${
            isOnline ? 'text-green-500' : 'text-yellow-600'
          }`}
          aria-label={isOnline ? "Conectado" : "Desconectado"}
          title={isOnline ? "Conectado" : "Desconectado"}
        >
          <Emoji
            symbol={isOnline ? '🟢' : '🟡'}
            label={isOnline ? 'Conectado' : 'Desconectado'}
          />
          <span
            className={`w-2 h-2 rounded-full mx-1 ${
              isOnline ? 'bg-green-500' : 'bg-yellow-500'
            } animate-pulse`}
          ></span>
          {isOnline ? 'Online' : 'Offline'}
        </span>
        {/* Botón hamburguesa móvil */}
        <button
          className="flex items-center justify-center text-white focus:outline-none ml-auto p-1 md:hidden"
          aria-label={menuOpen ? "Cerrar menú" : "Abrir menú"}
          aria-expanded={menuOpen}
          onClick={() => setMenuOpen(!menuOpen)}
          type="button"
          style={{ minWidth: 0, minHeight: 0, width: '32px', height: '32px', padding: '4px' }}
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" strokeWidth={2} viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round"
              d={menuOpen ? "M6 18L18 6M6 6l12 12" : "M4 6h16M4 12h16M4 18h16"} />
          </svg>
        </button>
        {/* Navegación desktop */}
        <div className="hidden md:flex items-center ml-auto gap-6">
          {navItems.slice(0, 4).map(item => {
            const tieneAcceso = !item.requiredRole
  || (Array.isArray(item.requiredRole)
      ? item.requiredRole.includes(rol)
      : rol === item.requiredRole);

            return (
              <NavLink
                key={item.to}
                to={item.to}
                className={({ isActive }) =>
                  `flex items-center gap-2 px-3 py-2 rounded-lg font-medium text-base transition-colors focus:outline-none ${
                    isActive ? 'bg-white text-blue-700' : 'text-white hover:bg-white/20'
                  } ${!tieneAcceso ? 'opacity-70' : ''}`
                }
                aria-current={({ isActive }) => (isActive ? 'page' : undefined)}
              >
                <Emoji symbol={item.emoji} label={item.label} /> {item.label}
                {!tieneAcceso && <Emoji symbol="🔒" label="Bloqueado" />}
              </NavLink>
            );
          })}
          <ThemeToggle />
          {user && (
            <div className="flex flex-col items-end ml-4 select-text">
              <span className="font-semibold text-white mb-1">
                {user.nombre}
                {esAdmin && <Emoji symbol="👑" label="Administrador" />}
              </span>
              <span className="text-xs text-blue-100">{user.email}</span>
              <span className="text-xs text-blue-100 flex items-center gap-1">
                <Emoji symbol="🔑" label="Rol" /> {rol.toUpperCase()}
              </span>
              <button
                onClick={handleLogout}
                className="flex items-center mt-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium text-sm transition-colors"
                aria-label="Cerrar sesión"
                type="button"
              >
                <Emoji symbol="🚶‍♂️➡️🚪" label="Cerrar sesión" /> <span className="ml-2"></span>
              </button>
            </div>
          )}
        </div>
      </div>
      {/* Menú móvil centrado y desplegado bajo el navbar */}
      {menuOpen && (
        <NavMenuMobile
          navItems={navItems}
          user={user}
          handleNavClick={handleNavClick}
          handleLogout={handleLogout}
          setMenuOpen={setMenuOpen}
        />
      )}
    </header>
  );
}

// Exporta AccessDenied para AuthGuard
export { AccessDenied };


----- C:\ThomasParking\ThomasParking\src\components\OnlineStatusIndicator.jsx -----

// src/components/OnlineStatusIndicator.jsx
import React from 'react';
import useOnlineStatus from '../hooks/useOnlineStatus';

export default function OnlineStatusIndicator() {
  const isOnline = useOnlineStatus();

  return (
    <div
      className={`fixed bottom-4 right-4 z-50 flex items-center px-4 py-2 rounded-full shadow-lg font-semibold
        ${isOnline ? 'bg-green-100 text-green-800 border border-green-300' : 'bg-yellow-100 text-yellow-900 border border-yellow-300'}
      `}
      style={{ minWidth: 120, justifyContent: 'center', pointerEvents: 'none' }}
      aria-live="polite"
      role="status"
    >
      <span
        className={`inline-block w-3 h-3 rounded-full mr-2
          ${isOnline ? 'bg-green-500 animate-pulse' : 'bg-yellow-500 animate-pulse'}
        `}
        aria-hidden="true"
      />
      {isOnline ? 'Online' : 'Offline'}
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\components\ResizeImage.jsx -----

import React, { useState, useRef } from 'react';
import PropTypes from 'prop-types';
import CapturaCamara from './CapturaCamara';

const ResizeImage = ({ maxWidth = 800, onImageChange }) => {
  const [imageSrc, setImageSrc] = useState(null);
  const [showCamera, setShowCamera] = useState(false);
  const [error, setError] = useState(null);
  const fileInputRef = useRef(null);

  // Maneja la selección de archivos desde el dispositivo
  const handleFileChange = (event) => {
    const file = event.target.files && event.target.files[0];
    if (file && file.type.startsWith('image/')) {
      resizeImage(file);
    } else {
      setError('Por favor selecciona un archivo de imagen válido.');
    }
  };

  // Redimensiona la imagen antes de enviarla al callback
  const resizeImage = (file) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      const img = new window.Image();
      img.onload = () => {
        let newWidth = img.width;
        let newHeight = img.height;
        if (img.width > maxWidth) {
          newWidth = maxWidth;
          newHeight = Math.round((img.height * maxWidth) / img.width);
        }
        const canvas = document.createElement('canvas');
        canvas.width = newWidth;
        canvas.height = newHeight;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0, newWidth, newHeight);
        canvas.toBlob((blob) => {
          if (blob) {
            const resizedFile = new File([blob], file.name, { type: 'image/jpeg' });
            const resizedUrl = URL.createObjectURL(resizedFile);
            setImageSrc(resizedUrl);
            onImageChange(resizedFile);
            setError(null);
          } else {
            setError('Error al procesar la imagen.');
          }
        }, 'image/jpeg', 0.85);
      };
      img.onerror = () => setError('Error al cargar la imagen.');
      img.src = e.target.result;
    };
    reader.onerror = () => setError('Error al leer el archivo.');
    reader.readAsDataURL(file);
  };

  // Abre el selector de archivos del sistema
  const openFileSelector = () => {
    setError(null);
    fileInputRef.current && fileInputRef.current.click();
  };

  // Maneja la imagen capturada por la cámara
  const handleCapture = (file) => {
    resizeImage(file);
    setShowCamera(false);
  };

  // Cierra el modal de la cámara
  const handleCancelCamera = () => setShowCamera(false);

  // Permite borrar la imagen seleccionada
  const handleRemoveImage = () => {
    if (imageSrc) {
      URL.revokeObjectURL(imageSrc);
      setImageSrc(null);
      onImageChange(null);
    }
  };

  return (
    <div style={{ textAlign: 'center', maxWidth: 400, margin: 'auto' }}>
      {error && (
        <p style={{ color: 'red', marginBottom: 8 }}>{error}</p>
      )}

      {imageSrc ? (
        <div style={{ marginBottom: 16 }}>
          <img
            src={imageSrc}
            alt="Imagen seleccionada"
            style={{
              maxWidth: '100%',
              borderRadius: 8,
              boxShadow: '0 2px 8px rgba(0,0,0,0.2)'
            }}
          />
          <div>
            <button
              type="button"
              onClick={handleRemoveImage}
              style={{
                marginTop: 8,
                padding: '8px 16px',
                fontSize: 14,
                background: '#ef4444',
                color: 'white',
                border: 'none',
                borderRadius: 6,
                cursor: 'pointer'
              }}
              aria-label="Eliminar imagen seleccionada"
            >
              Eliminar imagen
            </button>
          </div>
        </div>
      ) : (
        <p style={{ color: '#666', marginBottom: 16 }}>No hay imagen seleccionada.</p>
      )}

      <input
        type="file"
        accept="image/*"
        ref={fileInputRef}
        style={{ display: 'none' }}
        onChange={handleFileChange}
        aria-label="Seleccionar imagen desde dispositivo"
      />

      <div style={{ display: 'flex', justifyContent: 'center', gap: 12 }}>
        <button
          type="button"
          onClick={openFileSelector}
          style={{
            padding: '12px 24px',
            fontSize: 16,
            background: '#2563eb',
            color: 'white',
            border: 'none',
            borderRadius: 6,
            cursor: 'pointer'
          }}
          aria-label="Seleccionar imagen desde dispositivo"
        >
          Seleccionar Imagen
        </button>

        <button
          type="button"
          onClick={() => { setShowCamera(true); setError(null); }}
          style={{
            padding: '12px 24px',
            fontSize: 16,
            background: '#10b981',
            color: 'white',
            border: 'none',
            borderRadius: 6,
            cursor: 'pointer'
          }}
          aria-label="Abrir cámara para capturar imagen"
        >
          Capturar Imagen
        </button>
      </div>

      {showCamera && (
        <CapturaCamara
          onCaptura={handleCapture}
          onCancelar={handleCancelCamera}
          maxWidth={maxWidth}
        />
      )}
    </div>
  );
};

ResizeImage.propTypes = {
  maxWidth: PropTypes.number,
  onImageChange: PropTypes.func.isRequired
};

export default ResizeImage;


----- C:\ThomasParking\ThomasParking\src\components\ResumenRegistros.jsx -----

// src/components/ResumenRegistros.jsx
import React from 'react'
import Emoji from './Emoji'

export default function ResumenRegistros({ registros = [] }) {
  const resumen = registros.reduce((acc, reg) => {
    if (reg.gratis) acc.gratis++
    else if (reg.recaudado) acc.recaudado += Number(reg.monto)
    else acc.pendiente += Number(reg.monto)
    acc.total += Number(reg.monto)
    acc.cantidad++
    return acc
  }, { recaudado: 0, pendiente: 0, gratis: 0, total: 0, cantidad: 0 })

  return (
    <div style={{
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(160px, 1fr))',
      gap: '1rem',
      padding: '1rem',
      background: 'rgba(255, 255, 255, 0.1)',
      borderRadius: '12px',
      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
    }}>
      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem' }}>
          <Emoji symbol="💰" /> ${resumen.recaudado.toFixed(2)}
        </div>
        <small style={{ color: '#666' }}>Recaudado</small>
      </div>

      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem' }}>
          <Emoji symbol="⏳" /> ${resumen.pendiente.toFixed(2)}
        </div>
        <small style={{ color: '#666' }}>Pendiente</small>
      </div>

      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem' }}>
          <Emoji symbol="🆓" /> {resumen.gratis}
        </div>
        <small style={{ color: '#666' }}>Gratis</small>
      </div>

      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem' }}>
          <Emoji symbol="📋" /> {resumen.cantidad}
        </div>
        <small style={{ color: '#666' }}>Registros</small>
      </div>

      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem' }}>
          <Emoji symbol="🧾" /> ${resumen.total.toFixed(2)}
        </div>
        <small style={{ color: '#666' }}>Total</small>
      </div>
    </div>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\SelectorDeFoto.jsx -----

// src/components/SelectorDeFoto.jsx
import React, { useState, useEffect } from 'react';
import CapturaCamara from './CapturaCamara';

/**
 * SelectorDeFoto
 * Componente para seleccionar o capturar fotos, mostrando previsualización en miniatura.
 * Props:
 * - onFilesSelected: function(files[]) => void
 * - maxFiles: número máximo de fotos permitidas (default: 5)
 * - disabled: boolean (opcional)
 */
export default function SelectorDeFoto({ onFilesSelected, maxFiles = 5, disabled }) {
  const [previews, setPreviews] = useState([]);
  const [files, setFiles] = useState([]);
  const [modo, setModo] = useState('galeria');

  // Actualiza el listado de archivos y notifica al padre
  const actualizarArchivos = (nuevosArchivos) => {
    const archivosCombinados = [...files, ...nuevosArchivos].slice(0, maxFiles);
    setFiles(archivosCombinados);
    if (onFilesSelected) onFilesSelected(archivosCombinados);
  };

  // Maneja selección desde galería
  const handleFileChange = (e) => {
    if (disabled) return;
    const selectedFiles = Array.from(e.target.files);
    actualizarArchivos(selectedFiles);
  };

  // Maneja captura desde cámara
  const handleCapturaCamara = (file) => {
    if (disabled) return;
    actualizarArchivos([file]);
  };

  // Elimina una foto seleccionada
  const eliminarFoto = (index) => {
    const nuevosArchivos = files.filter((_, i) => i !== index);
    setFiles(nuevosArchivos);
    if (onFilesSelected) onFilesSelected(nuevosArchivos);
  };

  // Genera y limpia previews de archivos
  useEffect(() => {
    const nuevasPreviews = files.map(file => ({
      url: URL.createObjectURL(file),
      name: file.name,
      type: file.type,
    }));
    setPreviews(nuevasPreviews);
    return () => {
      nuevasPreviews.forEach(p => URL.revokeObjectURL(p.url));
    };
  }, [files]);

  return (
    <div className="selector-foto">
      <div className="modos-seleccion" style={{ marginBottom: '1rem' }}>
        <button
          type="button"
          onClick={() => setModo('galeria')}
          className={modo === 'galeria' ? 'active' : ''}
          style={{ marginRight: '1rem' }}
          disabled={disabled}
        >
          🖼️ Subir Archivos
        </button>
        <button
          type="button"
          onClick={() => setModo('camara')}
          className={modo === 'camara' ? 'active' : ''}
          disabled={disabled}
        >
          📸 Usar Cámara
        </button>
      </div>

      {modo === 'galeria' ? (
        <>
          <input
            type="file"
            accept="image/*"
            multiple
            onChange={handleFileChange}
            aria-label="Seleccionar fotos"
            style={{ display: 'block', margin: '1rem 0' }}
            disabled={disabled || files.length >= maxFiles}
          />
          <div style={{ display: 'flex', gap: 10, flexWrap: 'wrap' }}>
            {previews.map((preview, idx) => (
              <div key={idx} style={{ textAlign: 'center', position: 'relative' }}>
                <button
                  onClick={() => eliminarFoto(idx)}
                  style={{
                    position: 'absolute',
                    top: -8,
                    right: -8,
                    background: '#dc2626',
                    color: 'white',
                    border: 'none',
                    borderRadius: '50%',
                    width: 20,
                    height: 20,
                    cursor: 'pointer',
                  }}
                  aria-label="Eliminar foto"
                >
                  ×
                </button>
                <img
                  src={preview.url}
                  alt={preview.name}
                  style={{
                    width: 90,
                    height: 90,
                    objectFit: 'cover',
                    borderRadius: 6,
                    border: '1px solid #ccc',
                  }}
                />
                <div style={{ fontSize: 11, marginTop: 4 }}>
                  {preview.name.length > 15 
                    ? preview.name.slice(0, 12) + '...' 
                    : preview.name}
                </div>
              </div>
            ))}
          </div>
          <small style={{ display: 'block', marginTop: '0.5rem', color: '#666' }}>
            {files.length}/{maxFiles} fotos seleccionadas
          </small>
        </>
      ) : (
        <div style={{ border: '1px solid #ddd', borderRadius: '8px', padding: '1rem' }}>
          <CapturaCamara 
            onCaptura={handleCapturaCamara}
            onCancelar={() => setModo('galeria')}
            maxWidth={220}
          />
        </div>
      )}
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\components\SemaforoResumen.jsx -----

// src/components/SemaforoResumen.jsx
import React from 'react';
import Emoji from './Emoji';

/**
 * SemaforoResumen
 * Muestra un resumen estadístico tipo "semaforo" sobre los registros recibidos.
 * Props:
 * - registros: array de objetos de registros (filtrados por el padre)
 * - customLabels: objeto opcional para personalizar los textos de cada métrica
 * - colorFondo: string opcional para personalizar el fondo
 */
export default function SemaforoResumen({
  registros = [],
  customLabels = {},
  colorFondo = 'rgba(255,255,255,0.1)'
}) {
  // Lógica de negocio igual a Compensación
  const resumen = registros.reduce((acc, reg) => {
    if (reg.gratis) acc.gratis++;
    else if (reg.recaudado) acc.recaudado += Number(reg.monto || 0);
    else acc.pendiente += Number(reg.monto || 0);
    acc.total += Number(reg.monto || 0);
    acc.cantidad++;
    return acc;
  }, { recaudado: 0, pendiente: 0, gratis: 0, total: 0, cantidad: 0 });

  // Permite personalizar los textos
  const labels = {
    recaudado: customLabels.recaudado || 'Recaudado',
    pendiente: customLabels.pendiente || 'Pendiente',
    gratis: customLabels.gratis || 'Gratis',
    cantidad: customLabels.cantidad || 'Registros',
    total: customLabels.total || 'Total'
  };

  return (
    <div style={{
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(160px, 1fr))',
      gap: '1rem',
      padding: '1rem',
      background: colorFondo,
      borderRadius: '12px',
      boxShadow: '0 4px 6px rgba(0,0,0,0.1)'
    }}>
      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem', color: '#10B981' }}>
          <Emoji symbol="💰" label="Recaudado" /> ${resumen.recaudado.toFixed(2)}
        </div>
        <small style={{ color: '#666' }}>{labels.recaudado}</small>
      </div>
      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem', color: '#F59E0B' }}>
          <Emoji symbol="⏳" label="Pendiente" /> ${resumen.pendiente.toFixed(2)}
        </div>
        <small style={{ color: '#666' }}>{labels.pendiente}</small>
      </div>
      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem', color: '#3B82F6' }}>
          <Emoji symbol="🆓" label="Gratis" /> {resumen.gratis}
        </div>
        <small style={{ color: '#666' }}>{labels.gratis}</small>
      </div>
      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem', color: '#6366F1' }}>
          <Emoji symbol="📋" label="Registros" /> {resumen.cantidad}
        </div>
        <small style={{ color: '#666' }}>{labels.cantidad}</small>
      </div>
      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem', color: '#8B5CF6' }}>
          <Emoji symbol="🧾" label="Total" /> ${resumen.total.toFixed(2)}
        </div>
        <small style={{ color: '#666' }}>{labels.total}</small>
      </div>
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\components\SignUp.jsx -----

// src/components/SignUp.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import supabase from '../supabaseClient';
import Loader from './Loader';
import Emoji from './Emoji';

export default function SignUp() {
  const [usuariosApp, setUsuariosApp] = useState([]);
  const [selectedUserId, setSelectedUserId] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [formData, setFormData] = useState({
    nombre: '',
    email: '',
    rol: 'registrador'
  });

  // Cargar usuarios de la tabla usuarios_app
  useEffect(() => {
    const fetchUsuariosApp = async () => {
      const { data, error } = await supabase
        .from('usuarios_app')
        .select('id, nombre, email, rol')
        .order('nombre', { ascending: true });

      if (error) {
        console.error('Error cargando usuarios:', error);
        setError('Error al cargar usuarios registrados');
        return;
      }
      setUsuariosApp(data || []);
    };
    fetchUsuariosApp();
  }, []);

  // Actualizar formulario cuando seleccionan un usuario
  const handleUserSelect = (e) => {
    const userId = e.target.value;
    setSelectedUserId(userId);
    
    const selectedUser = usuariosApp.find(u => u.id === userId);
    if (selectedUser) {
      setFormData({
        nombre: selectedUser.nombre,
        email: selectedUser.email,
        rol: selectedUser.rol || 'registrador'
      });
    }
  };

  const handleSignUp = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      // Validaciones
      if (!selectedUserId) throw new Error('Debes seleccionar un usuario');
      if (password.length < 6) throw new Error('La contraseña debe tener al menos 6 caracteres');

      // Crear usuario en Auth
      const { data, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password,
        options: {
          data: {
            nombre: formData.nombre,
            rol: formData.rol
          },
          emailRedirectTo: `${window.location.origin}/login`
        }
      });

      if (authError) throw authError;

      // Actualizar usuario en tabla usuarios_app
      const { error: updateError } = await supabase
        .from('usuarios_app')
        .update({ activo: true })
        .eq('id', selectedUserId);

      if (updateError) throw updateError;

      alert('Usuario activado! Credenciales enviadas por correo.');
      setTimeout(() => window.location.href = '/usuarios', 2000);

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-md mx-auto p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-6 text-center dark:text-white">
        <Emoji symbol="👥" /> Activar Usuario Existente
      </h2>

      {error && (
        <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md">
          ⚠️ {error}
        </div>
      )}

      <form onSubmit={handleSignUp} className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-1 dark:text-gray-200">
            Seleccionar Usuario
          </label>
          <select
            value={selectedUserId}
            onChange={handleUserSelect}
            className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            required
          >
            <option value="">Seleccione un usuario...</option>
            {usuariosApp
              .filter(u => !u.activo) // Mostrar solo usuarios inactivos
              .map(usuario => (
                <option key={usuario.id} value={usuario.id}>
                  {usuario.nombre} ({usuario.email})
                </option>
              ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium mb-1 dark:text-gray-200">
            Correo Electrónico
          </label>
          <input
            type="email"
            value={formData.email}
            readOnly
            className="w-full p-2 border rounded-md bg-gray-100 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-1 dark:text-gray-200">
            Nombre Completo
          </label>
          <input
            type="text"
            value={formData.nombre}
            readOnly
            className="w-full p-2 border rounded-md bg-gray-100 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-1 dark:text-gray-200">
            Rol del Usuario
          </label>
          <select
            value={formData.rol}
            onChange={(e) => setFormData(prev => ({ ...prev, rol: e.target.value }))}
            className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          >
            <option value="registrador">Registrador</option>
            <option value="admin">Administrador</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium mb-1 dark:text-gray-200">
            Contraseña Temporal
          </label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            placeholder="Mínimo 6 caracteres"
            required
          />
        </div>

        <button
          type="submit"
          disabled={loading}
          className="w-full bg-blue-600 text-white p-2 rounded-md hover:bg-blue-700 transition-colors flex items-center justify-center"
        >
          {loading ? (
            <Loader text="Activando..." small />
          ) : (
            <>
              <Emoji symbol="✅" /> Activar Usuario
            </>
          )}
        </button>
      </form>

      <p className="mt-4 text-center text-sm dark:text-gray-300">
        <Link
          to="/usuarios"
          className="text-blue-600 hover:underline dark:text-blue-400"
        >
          ← Volver a gestión de usuarios
        </Link>
      </p>
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\components\SyncIndicator.jsx -----

import React from 'react';

export default function SyncIndicator({ syncStatus }) {
  // syncStatus puede ser: 'idle', 'syncing', 'success', 'error'
  let message = null;
  let style = {
    padding: '6px 12px',
    borderRadius: 8,
    fontWeight: '600',
    fontSize: '0.9rem',
    display: 'inline-flex',
    alignItems: 'center',
    gap: 6,
  };

  switch (syncStatus) {
    case 'syncing':
      message = <>🔄 Sincronizando datos...</>;
      style = { ...style, backgroundColor: '#e0f2fe', color: '#0284c7' };
      break;
    case 'success':
      message = <>✅ Sincronización exitosa</>;
      style = { ...style, backgroundColor: '#dcfce7', color: '#15803d' };
      break;
    case 'error':
      message = <>❌ Error en la sincronización</>;
      style = { ...style, backgroundColor: '#fee2e2', color: '#b91c1c' };
      break;
    default:
      return null; // no mostrar nada si idle
  }

  return <div style={style} aria-live="polite">{message}</div>;
}


----- C:\ThomasParking\ThomasParking\src\components\TablaResultados.jsx -----

import React from 'react';
import PropTypes from 'prop-types';

const TablaResultados = ({ resultados, onSeleccion }) => (
  <table className="tabla-resultados">
    <thead>
      <tr>
        <th>ID</th>
        <th>Nombre</th>
        <th>Estado</th>
      </tr>
    </thead>
    <tbody>
      {resultados.length === 0 ? (
        <tr>
          <td colSpan={3} style={{ textAlign: 'center' }}>No hay resultados</td>
        </tr>
      ) : (
        resultados.map(item => (
          <tr
            key={item.id}
            onClick={() => onSeleccion(item)}
            className="fila-seleccionable"
            style={{ cursor: 'pointer' }}
          >
            <td>{item.id}</td>
            <td>{item.nombre}</td>
            <td>{item.estado}</td>
          </tr>
        ))
      )}
    </tbody>
  </table>
);

TablaResultados.propTypes = {
  resultados: PropTypes.array.isRequired,
  onSeleccion: PropTypes.func.isRequired,
};

export default TablaResultados;


----- C:\ThomasParking\ThomasParking\src\components\ThemeToggle.jsx -----

// src/components/ThemeToggle.jsx
import React from 'react';
import { useTheme } from '../context/ThemeContext';

export default function ThemeToggle() {
  const { appearance, setAppearance } = useTheme();

  return (
    <select
      value={appearance}
      onChange={e => setAppearance(e.target.value)}
      style={{ borderRadius: 8, padding: 6, marginLeft: 10, fontWeight: 600 }}
      aria-label="Selector de tema"
    >
      <option value="light">🌞 Claro</option>
      <option value="dark">🌙 Oscuro</option>
      <option value="system">🖥️ Sistema</option>
    </select>
  );
}


----- C:\ThomasParking\ThomasParking\src\context\ThemeContext.jsx -----

// src/context/ThemeContext.jsx
import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';

const ThemeContext = createContext();

const THEMES = ['light', 'dark', 'system'];

// Detecta el tema preferido del sistema operativo
function getPreferredTheme() {
  if (typeof window === 'undefined') return 'light';
  return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
}

// Aplica el tema al <html>
function applyTheme(appearance) {
  const html = document.documentElement;
  let theme = appearance;
  if (appearance === 'system') {
    theme = getPreferredTheme();
  }
  html.setAttribute('data-theme', theme);
  html.classList.toggle('dark', theme === 'dark');
}

export function ThemeProvider({ children }) {
  const [appearance, setAppearance] = useState(() => {
    if (typeof window === 'undefined') return 'system';
    return localStorage.getItem('appearance') || 'system';
  });

  // Cambia el tema y lo guarda en localStorage
  const updateAppearance = useCallback(
    (mode) => {
      if (!THEMES.includes(mode)) mode = 'system';
      setAppearance(mode);
      localStorage.setItem('appearance', mode);
      applyTheme(mode);
    },
    []
  );

  // Aplica el tema al montar y cuando cambia la preferencia
  useEffect(() => {
    applyTheme(appearance);
    const mq = window.matchMedia('(prefers-color-scheme: dark)');
    const handleChange = () => {
      if (appearance === 'system') applyTheme('system');
    };
    mq.addEventListener('change', handleChange);
    return () => mq.removeEventListener('change', handleChange);
  }, [appearance]);

  return (
    <ThemeContext.Provider value={{ appearance, setAppearance: updateAppearance }}>
      {children}
    </ThemeContext.Provider>
  );
}

// Hook para consumir el contexto
export function useTheme() {
  const context = useContext(ThemeContext);
  if (!context) throw new Error('useTheme debe usarse dentro de ThemeProvider');
  return context;
}


----- C:\ThomasParking\ThomasParking\src\context\UserContext.jsx -----

// src/context/UserContext.jsx
import { createContext, useContext, useState } from 'react';

const UserContext = createContext();

export function UserProvider({ children }) {
  const [user, setUser] = useState(null);

  return (
    <UserContext.Provider value={{ user, setUser }}>
      {children}
    </UserContext.Provider>
  );
}

export function useUser() {
  const context = useContext(UserContext);
  if (!context) {
    throw new Error('useUser debe usarse dentro de un UserProvider');
  }
  return context;
}


----- C:\ThomasParking\ThomasParking\src\context\ViewContext.jsx -----

// src/context/ViewContext.jsx
import React, { createContext, useContext, useState } from 'react'

const ViewContext = createContext()

export function ViewProvider({ children }) {
  const [currentView, setCurrentView] = useState('registro') // Estado inicial
  
  return (
    <ViewContext.Provider value={{ currentView, setCurrentView }}>
      {children}
    </ViewContext.Provider>
  )
}

export const useView = () => {
  const context = useContext(ViewContext)
  if (!context) {
    throw new Error('useView debe usarse dentro de un ViewProvider')
  }
  return context
}


----- C:\ThomasParking\ThomasParking\src\hooks\useHover.jsx -----

import { useRef, useState, useEffect } from 'react';
import React from 'react'

export default function useHover() {
  const ref = useRef(null);
  const [isHovered, setIsHovered] = useState(false);

  useEffect(() => {
    const node = ref.current;
    if (!node) return;

    const handleMouseEnter = () => setIsHovered(true);
    const handleMouseLeave = () => setIsHovered(false);

    node.addEventListener('mouseenter', handleMouseEnter);
    node.addEventListener('mouseleave', handleMouseLeave);

    return () => {
      node.removeEventListener('mouseenter', handleMouseEnter);
      node.removeEventListener('mouseleave', handleMouseLeave);
    };
  }, [ref]);

  return [ref, isHovered];
}


----- C:\ThomasParking\ThomasParking\src\hooks\useOnlineStatus.jsx -----

// src/hooks/useOnlineStatus.jsx
import { useState, useEffect } from 'react'

export default function useOnlineStatus() {
  const [isOnline, setIsOnline] = useState(navigator.onLine)
  useEffect(() => {
    const update = () => setIsOnline(navigator.onLine)
    window.addEventListener('online', update)
    window.addEventListener('offline', update)
    return () => {
      window.removeEventListener('online', update)
      window.removeEventListener('offline', update)
    }
  }, [])
  return isOnline
}


----- C:\ThomasParking\ThomasParking\src\pages\AcercaDe.jsx -----

// src/pages/AcercaDe.jsx
import Emoji from '../components/Emoji'
import React from 'react'

export default function AcercaDe() {
  return (
    <section
      className="acerca-de-container"
      style={{
        background: 'var(--surface)',
        color: 'var(--text)',
        borderRadius: 16,
        boxShadow: '0 4px 6px rgba(0,0,0,0.05)',
        padding: '2rem',
        maxWidth: 700,
        margin: '2rem auto',
        textAlign: 'left'
      }}
    >
      <h2 style={{ fontWeight: 700, fontSize: '1.5rem', marginBottom: 12 }}>
        <Emoji symbol="ℹ️" label="Acerca de" /> Acerca de la aplicación
      </h2>
      <p style={{ fontSize: '1.08rem', marginBottom: 14 }}>
        <Emoji symbol="🚗" label="Parqueadero" /> <b>ThomasParking</b> es una aplicación web para la <b>gestión eficiente, transparente y segura de parqueaderos de visita</b> en el <b>Conjunto Habitacional Thomas II</b>.
      </p>
      <ul style={{ marginBottom: 18, paddingLeft: 22 }}>
        <li>
          <Emoji symbol="📝" label="Registro" /> <b>Registrar ingresos y salidas:</b> Guarda cada ingreso y salida de vehículos, asociando el registro a un copropietario y usuario responsable.
        </li>
        <li>
          <Emoji symbol="🔎" label="Consulta" /> <b>Consultas y filtros avanzados:</b> Busca y filtra registros por fecha, placa, propiedad, unidad, tipo de vehículo y estado de pago.
        </li>
        <li>
          <Emoji symbol="📷" label="Foto" /> <b>Evidencia fotográfica y auditiva:</b> Adjunta fotos y audios como evidencia en cada registro.
        </li>
        <li>
          <Emoji symbol="👥" label="Usuarios" /> <b>Gestión de copropietarios y usuarios:</b> Administra residentes y personal, con control de roles y permisos.
        </li>
        <li>
          <Emoji symbol="💰" label="Recaudo" /> <b>Recaudación y reportes:</b> Visualiza resúmenes de montos recaudados, pendientes y registros gratuitos.
        </li>
        <li>
          <Emoji symbol="📱" label="Offline" /> <b>Soporte offline:</b> Consulta y registra datos aunque pierdas conexión; la app sincroniza automáticamente al volver en línea.
        </li>
        <li>
          <Emoji symbol="🔒" label="Seguridad" /> <b>Seguridad y privacidad:</b> Tus datos están protegidos, con acceso restringido según el rol y políticas de seguridad avanzadas.
        </li>
      </ul>
      <p style={{ fontSize: '1.08rem', marginBottom: 14 }}>
        <Emoji symbol="🖥️" label="Tecnología" /> <b>Interfaz moderna y responsiva</b>, accesible desde cualquier dispositivo.
      </p>
      <p style={{ fontSize: '1.08rem', marginBottom: 14 }}>
        <Emoji symbol="👨‍💻" label="Desarrollador" /> <b>Desarrollado por:</b> Gabriel Ortega – Presidente CEO Thomas II
      </p>
      <p style={{ fontSize: '1.08rem', marginBottom: 14 }}>
        <Emoji symbol="✉️" label="Email" /> <b>Contacto:</b> <a href="mailto:gabrielortega@outlook.com">gabrielortega@outlook.com</a><br />
        <Emoji symbol="📱" label="Celular" /> <b>Celular:</b> <a href="tel:0999268450">0999268450</a>
      </p>
      <p style={{ fontSize: '1.08rem', color: '#666', marginTop: 18 }}>
        <Emoji symbol="🤝" label="Comunidad" /> Esta aplicación es el resultado del compromiso del conjunto Thomas II con la innovación, la transparencia y la seguridad de todos sus residentes y visitantes.
      </p>
    </section>
  )
}


----- C:\ThomasParking\ThomasParking\src\pages\CapturaFoto.jsx -----

import React, { useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import CapturaCamara from '../components/CapturaCamara';

export default function CapturaFoto() {
  const [foto, setFoto] = useState(null);
  const navigate = useNavigate();
  const location = useLocation();

  // Recibe la función para manejar el archivo desde la página anterior, si se usa navigate con state
  const onEnviar = () => {
    if (location.state && location.state.onFileSelected && foto) {
      location.state.onFileSelected(foto);
    }
    navigate(-1); // Regresa a la página anterior
  };

  return (
    <div style={{
      minHeight: '100vh',
      background: '#000',
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center'
    }}>
      <div style={{ width: '100%', maxWidth: 320 }}>
        <CapturaCamara onCaptura={setFoto} />
      </div>
      {foto && (
        <button
          style={{
            marginTop: 20,
            padding: '12px 28px',
            fontSize: '1.1rem',
            background: '#38bdf8',
            color: '#fff',
            border: 'none',
            borderRadius: 8
          }}
          onClick={onEnviar}
        >
          Enviar foto
        </button>
      )}
      <button
        style={{
          marginTop: 16,
          background: 'transparent',
          color: '#fff',
          border: 'none',
          fontSize: 18
        }}
        onClick={() => navigate(-1)}
      >
        Cancelar
      </button>
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\pages\Compensacion.jsx -----

import React, { useState, useEffect } from 'react';
import { useUser } from '../context/UserContext';
import supabase from '../supabaseClient';
import Loader from '../components/Loader';
import Emoji from '../components/Emoji';
import dayjs from 'dayjs';
import ExportarPDF from '../components/ExportarPDF';
import ErrorMessage from '../components/ErrorMessage';
import ResumenRegistros from '../components/ResumenRegistros';
import SelectorDeFoto from '../components/SelectorDeFoto';

export default function Compensacion() {
  const { user } = useUser();
  const [registros, setRegistros] = useState([]);
  const [loading, setLoading] = useState(true);
  const [montoCompensar, setMontoCompensar] = useState('');
  const [procesando, setProcesando] = useState(false);
  const [errorCompensacion, setErrorCompensacion] = useState('');
  const [exito, setExito] = useState('');
  const [registrosModificados, setRegistrosModificados] = useState([]);
  const [copropietarios, setCopropietarios] = useState([]);
  const [filtroPropiedad, setFiltroPropiedad] = useState('');
  const [filtroUnidad, setFiltroUnidad] = useState('');
  const [fotosEvidencia, setFotosEvidencia] = useState([]);

  // Columnas para PDF
  const columnasPDF = [
    { header: 'Fecha', key: 'fecha_hora_ingreso', formatter: v => dayjs(v).format('DD/MM/YY HH:mm') },
    { header: 'Placa', key: 'placa_vehiculo' },
    { header: 'Tipo', key: 'tipo_vehiculo' },
    { header: 'Monto', key: 'monto', formatter: v => `$${Number(v).toFixed(2)}` },
    { header: 'Evidencia', key: 'evidencia_recaudo', formatter: urls => Array.isArray(urls) && urls.length ? 'Sí' : 'No' }
  ];

  // Cargar copropietarios y registros
  useEffect(() => {
    const cargarDatos = async () => {
      setLoading(true);
      try {
        const [resRegistros, resCopropietarios] = await Promise.all([
          supabase.from('registros_parqueadero').select('*, copropietarios:dependencia_id(propiedad, unidad_asignada)').order('fecha_hora_ingreso'),
          supabase.from('copropietarios').select('propiedad, unidad_asignada')
        ]);
        if (resRegistros.error) throw resRegistros.error;
        if (resCopropietarios.error) throw resCopropietarios.error;
        setRegistros(resRegistros.data || []);
        setCopropietarios(resCopropietarios.data || []);
      } catch (error) {
        setErrorCompensacion(error.message);
      } finally {
        setLoading(false);
      }
    };
    cargarDatos();
  }, []);

  // Opciones únicas para selects
  const propiedades = [...new Set(copropietarios.map(c => c.propiedad))].sort();
  const unidadesFiltradas = filtroPropiedad
    ? [...new Set(copropietarios.filter(c => c.propiedad === filtroPropiedad).map(c => c.unidad_asignada))]
    : [];

  // Filtrar registros por copropietario seleccionado
  const registrosFiltrados = registros.filter(reg =>
    reg.copropietarios?.propiedad === filtroPropiedad &&
    reg.copropietarios?.unidad_asignada === filtroUnidad
  );

  // Algoritmo para encontrar combinación exacta
  function encontrarCombinacionExacta(registros, objetivo, index = 0, seleccionados = []) {
    if (objetivo === 0) return seleccionados;
    if (objetivo < 0 || index >= registros.length) return null;
    // Incluir actual
    const montoActual = parseFloat(registros[index].monto);
    const conActual = encontrarCombinacionExacta(
      registros, +(objetivo - montoActual).toFixed(2), index + 1, [...seleccionados, registros[index]]
    );
    if (conActual) return conActual;
    // Omitir actual
    return encontrarCombinacionExacta(registros, objetivo, index + 1, seleccionados);
  }

  // Subir fotos a Supabase Storage y devolver URLs públicas
  const subirEvidencia = async () => {
    const urls = [];
    for (const foto of fotosEvidencia) {
      const nombreArchivo = `evidencia-recaudo-${Date.now()}-${Math.random().toString(36).substr(2, 5)}.jpg`;
      const { error } = await supabase.storage
        .from('evidencias-recaudo')
        .upload(nombreArchivo, foto);
      if (!error) {
        const { data: { publicUrl } } = supabase.storage
          .from('evidencias-recaudo')
          .getPublicUrl(nombreArchivo);
        urls.push(publicUrl);
      }
    }
    return urls;
  };

  // Manejar la compensación exacta
  const handleMarcarGratis = async () => {
    setErrorCompensacion('');
    setExito('');
    if (!filtroPropiedad || !filtroUnidad) {
      setErrorCompensacion('Debe seleccionar propiedad y unidad asignada');
      return;
    }
    const montoObjetivo = parseFloat(montoCompensar);
    if (isNaN(montoObjetivo) || montoObjetivo <= 0) {
      setErrorCompensacion('Ingrese un monto válido mayor a 0');
      return;
    }
    if (fotosEvidencia.length === 0) {
      setErrorCompensacion('Debe adjuntar al menos una evidencia fotográfica');
      return;
    }
    setProcesando(true);
    try {
      const pendientes = registrosFiltrados
        .filter(r => !r.recaudado && !r.gratis)
        .sort((a, b) => new Date(a.fecha_hora_ingreso) - new Date(b.fecha_hora_ingreso));
      const seleccion = encontrarCombinacionExacta(pendientes, +montoObjetivo.toFixed(2));
      if (!seleccion || seleccion.length === 0) {
        setErrorCompensacion('No existe una combinación exacta de registros para el monto ingresado.');
        return;
      }
      const sumaSeleccion = seleccion.reduce((acc, r) => acc + parseFloat(r.monto), 0);
      if (Math.abs(sumaSeleccion - montoObjetivo) > 0.009) {
        setErrorCompensacion('No existe una combinación exacta de registros para el monto ingresado.');
        return;
      }
      // Subir evidencia
      const urlsEvidencia = await subirEvidencia();
      // Actualizar registros seleccionados
      const updates = seleccion.map(reg =>
        supabase
          .from('registros_parqueadero')
          .update({
            gratis: true,
            monto: 0,
            recaudado: false,
            fecha_recaudo: null,
            usuario_gratis: user?.id || null,
            fecha_gratis: new Date().toISOString(),
            evidencia_recaudo: urlsEvidencia
          })
          .eq('id', reg.id)
      );
      const resultados = await Promise.all(updates);
      const errores = resultados.filter(r => r.error);
      if (errores.length === 0) {
        setExito(`Marcados como gratis ${seleccion.length} registros (total: $${sumaSeleccion.toFixed(2)})`);
        setRegistros(prev =>
          prev.map(r =>
            seleccion.some(m => m.id === r.id)
              ? { ...r, gratis: true, monto: 0, recaudado: false, fecha_recaudo: null, evidencia_recaudo: urlsEvidencia }
              : r
          )
        );
        setRegistrosModificados(seleccion.map(r => ({ ...r, evidencia_recaudo: urlsEvidencia })));
      } else {
        setErrorCompensacion(`Error al actualizar algunos registros (${errores.length})`);
      }
      setMontoCompensar('');
      setFotosEvidencia([]);
    } catch (error) {
      setErrorCompensacion(error.message);
    } finally {
      setProcesando(false);
    }
  };

  if (loading) return <Loader text="Cargando resumen..." />;

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="flex justify-between items-center mb-8">
        <h2 className="text-2xl font-bold">
          <Emoji symbol="💰" /> Gestión de Recaudo
        </h2>
        <ExportarPDF
          datos={registrosModificados}
          columnas={columnasPDF}
          titulo="Registros Compensados"
        />
      </div>

      {/* Filtros */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div>
          <label className="block text-sm font-medium mb-1">Propiedad:</label>
          <select
            value={filtroPropiedad}
            onChange={e => {
              setFiltroPropiedad(e.target.value);
              setFiltroUnidad('');
            }}
            className="w-full p-2 border rounded-md"
          >
            <option value="">Seleccione propiedad...</option>
            {propiedades.map(prop => (
              <option key={prop} value={prop}>{prop}</option>
            ))}
          </select>
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Unidad asignada:</label>
          <select
            value={filtroUnidad}
            onChange={e => setFiltroUnidad(e.target.value)}
            className="w-full p-2 border rounded-md"
            disabled={!filtroPropiedad}
          >
            <option value="">Seleccione unidad...</option>
            {unidadesFiltradas.map(unidad => (
              <option key={unidad} value={unidad}>{unidad}</option>
            ))}
          </select>
        </div>
      </div>

      {/* Sección de compensación y evidencia */}
      <div className="bg-white p-6 rounded-lg shadow-md mb-8">
        <h3 className="text-xl font-semibold mb-4">
          <Emoji symbol="🎁" /> Compensación de Registros
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <div>
            <label className="block text-sm font-medium mb-1">Monto a compensar ($)</label>
            <input
              type="number"
              min="0"
              step="0.01"
              value={montoCompensar}
              onChange={e => setMontoCompensar(e.target.value)}
              className="w-full p-2 border rounded-md"
              placeholder="Ej: 25.50"
              disabled={procesando}
            />
          </div>
          <div className="flex items-end">
            <button
              onClick={handleMarcarGratis}
              disabled={!montoCompensar || procesando}
              className="w-full bg-green-600 text-white p-2 rounded-md hover:bg-green-700 disabled:bg-gray-400 transition-colors"
            >
              {procesando ? <Loader text="Procesando..." /> : 'Aplicar Compensación'}
            </button>
          </div>
        </div>

        {/* Selector de fotos de evidencia */}
        <div className="mt-4">
          <label className="block text-sm font-medium mb-2">
            <Emoji symbol="📸" /> Evidencia Fotográfica (Máx. 5 fotos)
          </label>
          <SelectorDeFoto
            onFilesSelected={setFotosEvidencia}
            maxFiles={5}
            disabled={procesando}
          />
        </div>

        {errorCompensacion && <ErrorMessage message={errorCompensacion} />}
        {exito && (
          <div className="bg-green-100 text-green-700 p-3 rounded-md mt-4">
            ✅ {exito}
          </div>
        )}
        <div className="mt-2 text-sm text-gray-600">
          El monto a compensar debe coincidir exactamente con la suma de los montos de los registros seleccionados. Si no existe una combinación exacta, la operación no se realizará.
        </div>
      </div>

      {/* Resumen estadístico */}
      <ResumenRegistros registros={registrosFiltrados} />

      {/* Registros modificados */}
      <div className="mt-8">
        <h3 className="text-xl font-semibold mb-4">
          <Emoji symbol="📝" /> Últimas compensaciones
        </h3>
        <div className="space-y-4">
          {registrosModificados.map(registro => (
            <div key={registro.id} className="p-4 border rounded-lg bg-gray-50">
              <div className="flex justify-between items-center">
                <div>
                  <p className="font-medium">
                    {dayjs(registro.fecha_hora_ingreso).format('DD/MM/YYYY HH:mm')}
                  </p>
                  <p className="text-sm text-gray-600">{registro.placa_vehiculo}</p>
                </div>
                <div className="text-right">
                  <p className="text-sm line-through">${registro.monto}</p>
                  <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm">
                    <Emoji symbol="✅" /> Compensado
                  </span>
                </div>
              </div>
              {registro.evidencia_recaudo?.length > 0 && (
                <div className="mt-2 flex gap-2">
                  {registro.evidencia_recaudo.map((url, i) => (
                    <a key={i} href={url} target="_blank" rel="noopener noreferrer">
                      <img src={url} alt="Evidencia" className="w-12 h-12 object-cover rounded" />
                    </a>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\pages\Consultas.jsx -----

// src/pages/Consultas.jsx
import React, { useState, useEffect } from 'react';
import supabase from '../supabaseClient';
import Loader from '../components/Loader';
import ErrorMessage from '../components/ErrorMessage';
import ListaRegistros from '../components/ListaRegistros';
import ResumenRegistros from '../components/ResumenRegistros';
import ExportarPDF from '../components/ExportarPDF';
import Modal from '../components/Modal';
import Emoji from '../components/Emoji';
import dayjs from 'dayjs';

export default function Consultas() {
  const [registros, setRegistros] = useState([]);
  const [filtros, setFiltros] = useState({
    fechaInicio: '',
    fechaFin: '',
    placa: '',
    tipoVehiculo: '',
    propiedad: '',
    unidadAsignada: '',
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [registrosFiltrados, setRegistrosFiltrados] = useState([]);
  const [registroEditar, setRegistroEditar] = useState(null);
  const [editando, setEditando] = useState(false);
  const [formEdicion, setFormEdicion] = useState({});
  const [copropietarios, setCopropietarios] = useState([]);

  // Columnas para exportar a PDF
  const columnasPDF = [
    { header: 'Fecha/Hora', key: 'fecha_hora_ingreso', formatter: v => v ? new Date(v).toLocaleString() : '' },
    { header: 'Placa', key: 'placa_vehiculo' },
    { header: 'Tipo', key: 'tipo_vehiculo' },
    { header: 'Observaciones', key: 'observaciones' },
    { header: 'Gratis', key: 'gratis', formatter: v => v ? 'Sí' : 'No' },
    { header: 'Recaudado', key: 'recaudado', formatter: v => v ? 'Sí' : 'No' }
  ];

  // Cargar registros y copropietarios al montar
  useEffect(() => {
    setLoading(true);
    Promise.all([
      supabase
        .from('registros_parqueadero')
        .select('*, copropietarios:dependencia_id(propiedad, unidad_asignada), usuarios_app(nombre)')
        .order('fecha_hora_ingreso', { ascending: false }),
      supabase
        .from('copropietarios')
        .select('id, propiedad, unidad_asignada')
    ]).then(([registrosRes, copropietariosRes]) => {
      if (registrosRes.error) setError('Error al cargar registros');
      else setRegistros(registrosRes.data || []);
      if (copropietariosRes.data) setCopropietarios(copropietariosRes.data);
      setLoading(false);
    });
  }, []);

  // Filtros controlados
  const handleFiltroChange = (e) => {
    const { name, value } = e.target;
    setFiltros(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Opciones únicas para filtros
  const tiposUnicos = Array.from(new Set(registros.map(r => r.tipo_vehiculo))).filter(Boolean);
  const propiedadesUnicas = Array.from(new Set(registros.map(r => r.copropietarios?.propiedad))).filter(Boolean);
  const unidadesUnicas = Array.from(new Set(registros.map(r => r.copropietarios?.unidad_asignada))).filter(Boolean);

  // --- Eliminar registro ---
  const handleEliminar = async (registro) => {
    if (!window.confirm(`¿Seguro que deseas eliminar el registro de la placa ${registro.placa_vehiculo}?`)) return;
    setLoading(true);
    const { error } = await supabase
      .from('registros_parqueadero')
      .delete()
      .eq('id', registro.id);
    setLoading(false);
    if (error) {
      alert('Error al eliminar: ' + error.message);
    } else {
      setRegistros(prev => prev.filter(r => r.id !== registro.id));
    }
  };

  // --- Editar registro ---
  const handleEditar = (registro) => {
    setRegistroEditar(registro);
    setFormEdicion({
      placa_vehiculo: registro.placa_vehiculo || '',
      tipo_vehiculo: registro.tipo_vehiculo || 'carro',
      observaciones: registro.observaciones || '',
      dependencia_id: registro.dependencia_id || '',
      gratis: registro.gratis || false,
      recaudado: registro.recaudado || false,
    });
  };

  // --- Guardar edición ---
  const handleGuardarEdicion = async (e) => {
    e.preventDefault();
    setEditando(true);
    try {
      const { error } = await supabase
        .from('registros_parqueadero')
        .update({
          placa_vehiculo: formEdicion.placa_vehiculo.toUpperCase(),
          tipo_vehiculo: formEdicion.tipo_vehiculo,
          observaciones: formEdicion.observaciones,
          dependencia_id: formEdicion.dependencia_id || null,
          gratis: formEdicion.gratis,
          recaudado: formEdicion.recaudado,
        })
        .eq('id', registroEditar.id);
      if (error) throw error;
      setRegistros(prev =>
        prev.map(r =>
          r.id === registroEditar.id
            ? { ...r, ...formEdicion, placa_vehiculo: formEdicion.placa_vehiculo.toUpperCase() }
            : r
        )
      );
      setRegistroEditar(null);
    } catch (error) {
      alert('Error al actualizar: ' + error.message);
    } finally {
      setEditando(false);
    }
  };

  // --- Cancelar edición ---
  const handleCancelarEdicion = () => {
    setRegistroEditar(null);
    setFormEdicion({});
  };

  return (
    <div className="max-w-6xl mx-auto p-4">
      <h2 className="text-2xl font-bold mb-6 flex items-center gap-2">
        <Emoji symbol="📊" /> Consultas y Reportes
      </h2>

      {/* Filtros avanzados */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6 bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
        <div>
          <label className="block text-sm font-medium mb-1">Fecha inicio</label>
          <input
            type="date"
            name="fechaInicio"
            value={filtros.fechaInicio}
            onChange={handleFiltroChange}
            className="w-full p-2 border rounded-md"
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Fecha fin</label>
          <input
            type="date"
            name="fechaFin"
            value={filtros.fechaFin}
            onChange={handleFiltroChange}
            className="w-full p-2 border rounded-md"
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Placa</label>
          <input
            type="text"
            name="placa"
            value={filtros.placa}
            onChange={handleFiltroChange}
            placeholder="Buscar por placa"
            className="w-full p-2 border rounded-md"
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Tipo de vehículo</label>
          <select
            name="tipoVehiculo"
            value={filtros.tipoVehiculo}
            onChange={handleFiltroChange}
            className="w-full p-2 border rounded-md"
          >
            <option value="">Todos</option>
            {tiposUnicos.map(tipo => (
              <option key={tipo} value={tipo}>{tipo}</option>
            ))}
          </select>
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Propiedad</label>
          <select
            name="propiedad"
            value={filtros.propiedad}
            onChange={handleFiltroChange}
            className="w-full p-2 border rounded-md"
          >
            <option value="">Todas</option>
            {propiedadesUnicas.map(prop => (
              <option key={prop} value={prop}>{prop}</option>
            ))}
          </select>
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Unidad asignada</label>
          <select
            name="unidadAsignada"
            value={filtros.unidadAsignada}
            onChange={handleFiltroChange}
            className="w-full p-2 border rounded-md"
          >
            <option value="">Todas</option>
            {unidadesUnicas.map(unidad => (
              <option key={unidad} value={unidad}>{unidad}</option>
            ))}
          </select>
        </div>
      </div>

      {/* Resumen estadístico */}
      <ResumenRegistros registros={registrosFiltrados} />

      {/* Exportar a PDF */}
      <div className="my-4 flex justify-end">
        <ExportarPDF
          datos={registrosFiltrados}
          columnas={columnasPDF}
          titulo="Reporte de Registros de Parqueadero"
        />
      </div>

      {/* Tabla de resultados */}
      <div className="bg-white dark:bg-gray-900 rounded-lg shadow p-2">
        <ListaRegistros
          registros={registros}
          filtros={filtros}
          loading={loading}
          error={error}
          onRegistrosFiltradosChange={setRegistrosFiltrados}
          onEditar={handleEditar}
          onEliminar={handleEliminar}
        />
      </div>

      {/* Modal de edición */}
      {registroEditar && (
        <Modal isOpen={true} onClose={handleCancelarEdicion}>
          <div className="max-w-md mx-auto">
            <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
              <Emoji symbol="✏️" /> Editar Registro
            </h3>
            <form onSubmit={handleGuardarEdicion} className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">
                  Placa del vehículo
                </label>
                <input
                  type="text"
                  value={formEdicion.placa_vehiculo}
                  onChange={e => setFormEdicion(prev => ({
                    ...prev,
                    placa_vehiculo: e.target.value.toUpperCase()
                  }))}
                  className="w-full p-2 border rounded-md"
                  placeholder="ABC123"
                  required
                  disabled={editando}
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">
                  Tipo de vehículo
                </label>
                <select
                  value={formEdicion.tipo_vehiculo}
                  onChange={e => setFormEdicion(prev => ({
                    ...prev,
                    tipo_vehiculo: e.target.value
                  }))}
                  className="w-full p-2 border rounded-md"
                  disabled={editando}
                >
                  <option value="carro">🚙 Carro</option>
                  <option value="moto">🛵 Moto</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">
                  Copropietario (opcional)
                </label>
                <select
                  value={formEdicion.dependencia_id}
                  onChange={e => setFormEdicion(prev => ({
                    ...prev,
                    dependencia_id: e.target.value
                  }))}
                  className="w-full p-2 border rounded-md"
                  disabled={editando}
                >
                  <option value="">Sin asignar</option>
                  {copropietarios.map(cp => (
                    <option key={cp.id} value={cp.id}>
                      {cp.propiedad} - {cp.unidad_asignada}
                    </option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">
                  Observaciones
                </label>
                <textarea
                  value={formEdicion.observaciones}
                  onChange={e => setFormEdicion(prev => ({
                    ...prev,
                    observaciones: e.target.value
                  }))}
                  className="w-full p-2 border rounded-md h-20"
                  placeholder="Observaciones adicionales..."
                  disabled={editando}
                />
              </div>
              <div className="flex gap-4">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={formEdicion.gratis}
                    onChange={e => setFormEdicion(prev => ({
                      ...prev,
                      gratis: e.target.checked
                    }))}
                    disabled={editando}
                  />
                  <span className="ml-2">🆓 Gratis</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={formEdicion.recaudado}
                    onChange={e => setFormEdicion(prev => ({
                      ...prev,
                      recaudado: e.target.checked
                    }))}
                    disabled={editando || formEdicion.gratis}
                  />
                  <span className="ml-2">💰 Recaudado</span>
                </label>
              </div>
              <div className="flex gap-3 pt-4">
                <button
                  type="submit"
                  disabled={editando}
                  className="flex-1 bg-green-600 text-white py-2 rounded-md hover:bg-green-700 transition-colors flex items-center justify-center gap-2"
                >
                  {editando ? (
                    <Loader text="Guardando..." />
                  ) : (
                    <>
                      <Emoji symbol="💾" /> Guardar Cambios
                    </>
                  )}
                </button>
                <button
                  type="button"
                  onClick={handleCancelarEdicion}
                  disabled={editando}
                  className="flex-1 bg-gray-500 text-white py-2 rounded-md hover:bg-gray-600 transition-colors"
                >
                  <Emoji symbol="❌" /> Cancelar
                </button>
              </div>
            </form>
          </div>
        </Modal>
      )}
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\pages\DescargoGestion.jsx -----

import React, { useState, useEffect } from "react";
import { useForm, Controller } from "react-hook-form";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import supabase from "../supabaseClient";
import dayjs from "dayjs";

// Error Boundary para capturar errores en el componente
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true };
  }
  componentDidCatch(error, errorInfo) {
    console.error("Error en DescargoGestion:", error, errorInfo);
  }
  render() {
    if (this.state.hasError) {
      return (
        <div style={{ color: "#b91c1c", padding: 20 }}>
          ⚠️ Ha ocurrido un error al cargar el componente. Por favor recargue la página.
        </div>
      );
    }
    return this.props.children;
  }
}

// Polyfill para crypto.randomUUID si no existe
if (typeof window !== "undefined" && (!window.crypto || !window.crypto.randomUUID)) {
  if (!window.crypto) window.crypto = {};
  window.crypto.randomUUID = function () {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
      const r = (Math.random() * 16) | 0,
        v = c === "x" ? r : (r & 0x3) | 0x8;
      return v.toString(16);
    });
  };
}

const Emoji = ({ symbol, label }) => (
  <span role="img" aria-label={label || ""} style={{ marginRight: 6 }}>
    {symbol}
  </span>
);

const AdjuntosPreview = ({ archivos, onRemove }) => (
  <div style={{ display: "flex", gap: 8, flexWrap: "wrap" }}>
    {archivos &&
      archivos.map((archivo, idx) => {
        // Adaptar: si archivo es string, se convierte a objeto {url}
        const url = typeof archivo === "string" ? archivo : archivo.url;
        const name = archivo.name || `Archivo ${idx + 1}`;
        const type = archivo.type || "";
        const isImage =
          type.startsWith("image/") ||
          /\.(jpe?g|png|gif|bmp|webp)$/i.test(url);

        return (
          <div key={idx} style={{ position: "relative", width: 70, textAlign: "center" }}>
            {onRemove && (
              <button
                onClick={() => onRemove(idx)}
                style={{
                  position: "absolute",
                  top: -8,
                  right: -8,
                  background: "#dc2626",
                  color: "white",
                  border: "none",
                  borderRadius: "50%",
                  width: 20,
                  height: 20,
                  cursor: "pointer",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  fontSize: 12,
                }}
                title="Eliminar archivo"
              >
                ×
              </button>
            )}
            {isImage ? (
              <img
                src={url}
                alt={name}
                style={{
                  width: 70,
                  height: 70,
                  objectFit: "cover",
                  borderRadius: 6,
                  border: "1px solid #ccc",
                }}
              />
            ) : (
              <div
                style={{
                  width: 70,
                  height: 70,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  backgroundColor: "#f0f0f0",
                  borderRadius: 6,
                  border: "1px solid #ccc",
                  fontSize: 28,
                  color: "#666",
                }}
              >
                📄
              </div>
            )}
            <a
              href={url}
              download={name}
              target="_blank"
              rel="noopener noreferrer"
              style={{
                display: "block",
                fontSize: 11,
                marginTop: 4,
                color: "#0366d6",
                textDecoration: "none",
                wordBreak: "break-word",
              }}
            >
              {name.length > 15 ? name.slice(0, 12) + "..." : name}
            </a>
          </div>
        );
      })}
  </div>
);

function DescargoGestionComponent() {
  const {
    register,
    handleSubmit,
    control,
    reset,
    watch,
    setValue,
    formState: { errors, isSubmitting },
  } = useForm({
    defaultValues: {
      descripcion: "",
      fecha: new Date(),
      esfuerzo: [],
      monto: "",
      horas: "",
      materiales: "",
      observaciones: "",
      archivos: [],
    },
  });

  const [mensaje, setMensaje] = useState("");
  const [subiendo, setSubiendo] = useState(false);
  const [archivosPreview, setArchivosPreview] = useState([]);
  const [registros, setRegistros] = useState([]);
  const [loadingRegistros, setLoadingRegistros] = useState(false);
  const [errorRegistros, setErrorRegistros] = useState(null);
  const [editId, setEditId] = useState(null);
  const [editRow, setEditRow] = useState({});

  const esfuerzosDisponibles = [
    { valor: "económico", etiqueta: "💲 Económico" },
    { valor: "participativo", etiqueta: "🤝 Participativo" },
    { valor: "utilitarios", etiqueta: "🛠️ Utilitarios" },
  ];

  const archivos = watch("archivos");

  useEffect(() => {
    if (!archivos || archivos.length === 0) {
      setArchivosPreview([]);
      return;
    }
    const previews = Array.from(archivos).map((file) => ({
      url: URL.createObjectURL(file),
      name: file.name,
      type: file.type,
    }));
    setArchivosPreview(previews);
    return () => {
      previews.forEach((p) => URL.revokeObjectURL(p.url));
    };
    // eslint-disable-next-line
  }, [archivos]);

  const fetchRegistros = async () => {
    setLoadingRegistros(true);
    setErrorRegistros(null);
    try {
      const { data, error } = await supabase
        .from("descargos_gestion")
        .select("*")
        .order("fecha", { ascending: false });
      if (error) throw error;
      setRegistros(data || []);
    } catch (error) {
      setErrorRegistros(error.message);
    } finally {
      setLoadingRegistros(false);
    }
  };

  useEffect(() => {
    fetchRegistros();
  }, []);

  const handleArchivos = (e) => {
    const files = Array.from(e.target.files);
    setValue("archivos", files, { shouldValidate: true });
  };

  // --- CREAR NUEVO REGISTRO ---
  const onSubmit = async (data) => {
    setMensaje("");
    setSubiendo(true);

    try {
      let archivosUrls = [];
      if (data.archivos && data.archivos.length > 0) {
        for (const file of data.archivos) {
          const ext = file.name.split(".").pop();
          const nombre = `descargo_${Date.now()}_${window.crypto.randomUUID()}.${ext}`;
          const { error: uploadError } = await supabase.storage
            .from("descargos-evidencias")
            .upload(nombre, file, { upsert: false });
          if (uploadError) throw uploadError;

          const { data: urlData } = supabase.storage
            .from("descargos-evidencias")
            .getPublicUrl(nombre);
          archivosUrls.push(urlData.publicUrl); // SOLO URL
        }
      }

      const nuevoRegistro = {
        descripcion: data.descripcion,
        fecha: data.fecha.toISOString(),
        esfuerzo: data.esfuerzo,
        monto: data.monto ? Number(data.monto) : null,
        horas: data.horas ? Number(data.horas) : null,
        materiales: data.materiales || null,
        observaciones: data.observaciones || null,
        archivos: archivosUrls, // SOLO ARRAY DE URLS
      };

      const { error: insertError } = await supabase
        .from("descargos_gestion")
        .insert([nuevoRegistro]);
      if (insertError) throw insertError;

      setMensaje("✅ Descargo registrado exitosamente.");
      reset();
      setArchivosPreview([]);
      fetchRegistros();
    } catch (error) {
      setMensaje(`⚠️ Error: ${error.message}`);
    } finally {
      setSubiendo(false);
    }
  };

  // --- AGREGAR ARCHIVOS AL EDITAR ---
  const handleEditFiles = async (e) => {
    const files = Array.from(e.target.files);
    const nuevosArchivos = [];
    for (const file of files) {
      const ext = file.name.split(".").pop();
      const nombre = `descargo_${Date.now()}_${window.crypto.randomUUID()}.${ext}`;
      const { error } = await supabase.storage
        .from("descargos-evidencias")
        .upload(nombre, file, { upsert: false });
      if (error) throw error;
      const { data: urlData } = supabase.storage
        .from("descargos-evidencias")
        .getPublicUrl(nombre);
      nuevosArchivos.push(urlData.publicUrl); // SOLO URL
    }
    setEditRow((prev) => ({
      ...prev,
      archivos: [...(prev.archivos || []), ...nuevosArchivos], // SOLO URLS
    }));
  };

  // --- ELIMINAR ARCHIVO EN EDICIÓN ---
  const handleRemoveFile = (index) => {
    setEditRow((prev) => ({
      ...prev,
      archivos: prev.archivos.filter((_, i) => i !== index),
    }));
  };

  // --- GUARDAR EDICIÓN ---
  const guardarEdicion = async () => {
    try {
      await supabase
        .from("descargos_gestion")
        .update({
          ...editRow,
          fecha: editRow.fecha.toISOString(),
          archivos: editRow.archivos, // SOLO URLS
        })
        .eq("id", editId);
      fetchRegistros();
      setEditId(null);
    } catch (error) {
      setMensaje(`❌ Error al actualizar: ${error.message}`);
    }
  };

  // --- ADAPTADOR PARA PREVIEW ---
  const archivosPreviewAdapt = (arr) =>
    arr?.map((a) => (typeof a === "string" ? { url: a } : a)) || [];

  // --- MANEJO DE ESFUERZO EN EDICIÓN ---
  const handleEditEsfuerzo = (e) => {
    const { options } = e.target;
    const selected = [];
    for (let i = 0; i < options.length; i++) {
      if (options[i].selected) selected.push(options[i].value);
    }
    setEditRow((prev) => ({
      ...prev,
      esfuerzo: selected,
    }));
  };

  return (
    <div
      className="descargo-gestion-container"
      style={{
        background: "var(--surface)",
        color: "var(--text)",
        minHeight: "100vh",
        padding: "2rem"
      }}
    >
      <h2
        style={{
          display: "flex",
          alignItems: "center",
          gap: 10,
          fontWeight: 700,
          fontSize: "1.6rem",
          marginBottom: 16,
        }}
      >
        <Emoji symbol="📝" /> Descargo de Gestión
      </h2>

      <form
        onSubmit={handleSubmit(onSubmit)}
        autoComplete="off"
        style={{ display: "flex", flexDirection: "column", gap: 20 }}
        noValidate
      >
        <div>
          <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
            <Emoji symbol="📄" /> Descripción del descargo *
          </label>
          <textarea
            {...register("descripcion", { required: "Campo obligatorio" })}
            style={{
              width: "100%",
              padding: "8px 12px",
              borderRadius: 8,
              border: errors.descripcion ? "2px solid #dc2626" : "1px solid #94a3b8",
              minHeight: 100,
            }}
            placeholder="Detalle las actividades realizadas..."
          />
          {errors.descripcion && (
            <span style={{ color: "#dc2626", fontSize: 14 }}>
              {errors.descripcion.message}
            </span>
          )}
        </div>

        <div>
          <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
            <Emoji symbol="📅" /> Fecha del descargo *
          </label>
          <Controller
            control={control}
            name="fecha"
            rules={{ required: true }}
            render={({ field }) => (
              <DatePicker
                selected={field.value}
                onChange={(date) => field.onChange(date)}
                dateFormat="dd/MM/yyyy"
                className="custom-datepicker"
                showTimeSelect
              />
            )}
          />
        </div>

        <div>
          <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
            <Emoji symbol="💪" /> Tipo de esfuerzo *
          </label>
          <div style={{ display: "flex", gap: 16, flexWrap: "wrap" }}>
            {esfuerzosDisponibles.map((esfuerzo) => (
              <label key={esfuerzo.valor} style={{ display: "flex", alignItems: "center" }}>
                <input
                  type="checkbox"
                  value={esfuerzo.valor}
                  {...register("esfuerzo", {
                    validate: (value) =>
                      value.length > 0 || "Seleccione al menos un tipo de esfuerzo",
                  })}
                  style={{ marginRight: 6 }}
                />
                {esfuerzo.etiqueta}
              </label>
            ))}
          </div>
          {errors.esfuerzo && (
            <span style={{ color: "#dc2626", fontSize: 14 }}>
              {errors.esfuerzo.message}
            </span>
          )}
        </div>

        <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 20 }}>
          <div>
            <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
              <Emoji symbol="💲" /> Monto económico (opcional)
            </label>
            <input
              type="number"
              {...register("monto")}
              style={{
                width: "100%",
                padding: "8px 12px",
                borderRadius: 8,
                border: "1px solid #94a3b8",
              }}
              placeholder="Ingrese el monto en USD"
            />
          </div>

          <div>
            <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
              <Emoji symbol="⏳" /> Horas invertidas (opcional)
            </label>
            <input
              type="number"
              {...register("horas")}
              style={{
                width: "100%",
                padding: "8px 12px",
                borderRadius: 8,
                border: "1px solid #94a3b8",
              }}
              placeholder="Horas totales"
            />
          </div>
        </div>

        <div>
          <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
            <Emoji symbol="🛠️" /> Materiales utilizados (opcional)
          </label>
          <input
            type="text"
            {...register("materiales")}
            style={{
              width: "100%",
              padding: "8px 12px",
              borderRadius: 8,
              border: "1px solid #94a3b8",
            }}
            placeholder="Liste los materiales separados por comas"
          />
        </div>

        <div>
          <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
            <Emoji symbol="📋" /> Observaciones adicionales (opcional)
          </label>
          <textarea
            {...register("observaciones")}
            style={{
              width: "100%",
              padding: "8px 12px",
              borderRadius: 8,
              border: "1px solid #94a3b8",
              minHeight: 80,
            }}
            placeholder="Agregue cualquier comentario adicional..."
          />
        </div>

        <div>
          <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
            <Emoji symbol="📎" /> Adjuntar evidencias (opcional)
          </label>
          <input
            type="file"
            multiple
            onChange={handleArchivos}
            accept="image/*,audio/*"
            style={{ marginBottom: 12 }}
          />
          <AdjuntosPreview archivos={archivosPreview} />
        </div>

        <button
          type="submit"
          className="btn-modern"
          disabled={isSubmitting || subiendo}
          style={{
            backgroundColor: "#4338ca",
            color: "white",
            padding: "10px 16px",
            borderRadius: 8,
            border: "none",
            fontSize: 16,
            cursor: isSubmitting || subiendo ? "not-allowed" : "pointer",
            opacity: isSubmitting || subiendo ? 0.6 : 1,
            transition: "background-color 0.3s",
          }}
        >
          {subiendo ? "Enviando..." : "Registrar Descargo"}
        </button>
        {mensaje && (
          <div
            style={{
              marginTop: 8,
              color: mensaje.startsWith("✅") ? "#16a34a" : "#b91c1c",
              fontWeight: 500,
            }}
          >
            {mensaje}
          </div>
        )}
      </form>

      <div style={{ marginTop: 48, overflowX: "auto" }}>
        <h3 style={{ fontSize: "1.3rem", marginBottom: 16 }}>
          <Emoji symbol="📋" /> Registros existentes
        </h3>

        {loadingRegistros ? (
          <div>Cargando registros...</div>
        ) : errorRegistros ? (
          <div style={{ color: "#dc2626" }}>Error: {errorRegistros}</div>
        ) : (
          <table style={{ width: "100%", borderCollapse: "collapse", fontSize: 14 }}>
            <thead>
              <tr style={{ backgroundColor: "#e0e7ff" }}>
                <th style={{ padding: 12 }}>Fecha</th>
                <th style={{ padding: 12 }}>Descripción</th>
                <th style={{ padding: 12 }}>Esfuerzo</th>
                <th style={{ padding: 12 }}>Archivos</th>
                <th style={{ padding: 12 }}>Acciones</th>
              </tr>
            </thead>
            <tbody>
              {registros.map((reg) =>
                editId === reg.id ? (
                  <tr key={reg.id} style={{ borderBottom: "1px solid #e2e8f0", background: "#f8fafc" }}>
                    <td style={{ padding: 12 }}>
                      <DatePicker
                        selected={editRow.fecha}
                        onChange={(date) => setEditRow((prev) => ({ ...prev, fecha: date }))}
                        dateFormat="dd/MM/yyyy"
                        showTimeSelect
                      />
                    </td>
                    <td style={{ padding: 12 }}>
                      <input
                        name="descripcion"
                        value={editRow.descripcion}
                        onChange={e => setEditRow(prev => ({ ...prev, descripcion: e.target.value }))}
                        style={{ width: "100%" }}
                      />
                    </td>
                    <td style={{ padding: 12 }}>
                      <select
                        name="esfuerzo"
                        value={editRow.esfuerzo}
                        onChange={handleEditEsfuerzo}
                        multiple
                        style={{ width: "100%" }}
                      >
                        {esfuerzosDisponibles.map((esf) => (
                          <option key={esf.valor} value={esf.valor}>
                            {esf.etiqueta}
                          </option>
                        ))}
                      </select>
                    </td>
                    <td style={{ padding: 12 }}>
                      <input
                        type="file"
                        multiple
                        onChange={handleEditFiles}
                        style={{ marginBottom: 8 }}
                      />
                      <AdjuntosPreview archivos={archivosPreviewAdapt(editRow.archivos)} onRemove={handleRemoveFile} />
                    </td>
                    <td style={{ padding: 12 }}>
                      <button
                        onClick={guardarEdicion}
                        style={{ marginRight: 8, background: "none", border: "none", cursor: "pointer" }}
                        title="Guardar"
                      >
                        💾
                      </button>
                      <button
                        onClick={() => setEditId(null)}
                        style={{ background: "none", border: "none", cursor: "pointer" }}
                        title="Cancelar"
                      >
                        ❌
                      </button>
                    </td>
                  </tr>
                ) : (
                  <tr key={reg.id} style={{ borderBottom: "1px solid #e2e8f0" }}>
                    <td style={{ padding: 12 }}>{dayjs(reg.fecha).format("DD/MM/YYYY HH:mm")}</td>
                    <td style={{ padding: 12 }}>{reg.descripcion}</td>
                    <td style={{ padding: 12 }}>
                      {reg.esfuerzo?.map(
                        (e) => esfuerzosDisponibles.find((esf) => esf.valor === e)?.etiqueta
                      ).join(", ")}
                    </td>
                    <td style={{ padding: 12 }}>
                      <AdjuntosPreview archivos={archivosPreviewAdapt(reg.archivos)} />
                    </td>
                    <td style={{ padding: 12 }}>
                      <button
                        onClick={() => setEditId(reg.id) || setEditRow({ ...reg, fecha: new Date(reg.fecha) })}
                        style={{ marginRight: 8, background: "none", border: "none", cursor: "pointer" }}
                        title="Editar"
                      >
                        ✏️
                      </button>
                      <button
                        onClick={() => handleEliminar(reg.id)}
                        style={{ background: "none", border: "none", cursor: "pointer" }}
                        title="Eliminar"
                      >
                        🗑️
                      </button>
                    </td>
                  </tr>
                )
              )}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
}

// Exportar el componente envuelto en ErrorBoundary
export default function DescargoGestion() {
  return (
    <ErrorBoundary>
      <DescargoGestionComponent />
    </ErrorBoundary>
  );
}


----- C:\ThomasParking\ThomasParking\src\pages\GestionCopropietarios.jsx -----

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import supabase from '../supabaseClient';
import Loader from '../components/Loader';
import Emoji from '../components/Emoji';
import ErrorMessage from '../components/ErrorMessage';
import Modal from '../components/Modal';

export default function GestionCopropietarios() {
  const [copropietarios, setCopropietarios] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [modal, setModal] = useState({ 
    open: false, 
    copropietario: null 
  });
  const [form, setForm] = useState({ 
    nombre: '', 
    propiedad: '', 
    unidad_asignada: '' 
  });
  const navigate = useNavigate();

  const fetchCopropietarios = async () => {
    setLoading(true);
    setError(null);
    try {
      const { data, error } = await supabase
        .from('copropietarios')
        .select('*')
        .order('propiedad', { ascending: true });

      if (error) throw error;
      setCopropietarios(data);
    } catch (err) {
      setError(err.message);
    }
    setLoading(false);
  };

  useEffect(() => { 
    fetchCopropietarios();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    
    if (!form.nombre || !form.propiedad || !form.unidad_asignada) {
      setError('Todos los campos son obligatorios');
      return;
    }

    try {
      if (modal.copropietario) {
        // Actualizar
        const { error } = await supabase
          .from('copropietarios')
          .update(form)
          .eq('id', modal.copropietario.id);

        if (error) throw error;
      } else {
        // Crear nuevo
        const { error } = await supabase
          .from('copropietarios')
          .insert([form])
          .select();

        if (error) throw error;
      }

      setModal({ open: false, copropietario: null });
      setForm({ nombre: '', propiedad: '', unidad_asignada: '' });
      await fetchCopropietarios();
    } catch (err) {
      setError(err.message);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm('¿Eliminar copropietario?')) return;
    setError(null);
    
    try {
      const { error } = await supabase
        .from('copropietarios')
        .delete()
        .eq('id', id);

      if (error) throw error;
      await fetchCopropietarios();
    } catch (err) {
      setError(err.message);
    }
  };

  const handleEdit = (copropietario) => {
    setForm({
      nombre: copropietario.nombre,
      propiedad: copropietario.propiedad,
      unidad_asignada: copropietario.unidad_asignada
    });
    setModal({ open: true, copropietario });
  };

  return (
    <div className="container mx-auto p-4">
      <h2 className="text-2xl font-bold mb-4">
        <Emoji symbol="👥" /> Gestión de Copropietarios
      </h2>

      <button 
        onClick={() => setModal({ open: true, copropietario: null })}
        className="bg-blue-600 text-white px-4 py-2 rounded mb-4 hover:bg-blue-700 transition-colors"
      >
        <Emoji symbol="➕" /> Nuevo Copropietario
      </button>

      {loading ? <Loader /> : error ? <ErrorMessage message={error} /> : (
        <div className="overflow-x-auto shadow ring-1 ring-black ring-opacity-5 rounded-lg">
          <table className="min-w-full divide-y divide-gray-300">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-sm font-semibold text-gray-900">
                  <Emoji symbol="🧑" /> Nombre
                </th>
                <th className="px-4 py-3 text-left text-sm font-semibold text-gray-900">
                  <Emoji symbol="🏢" /> Propiedad
                </th>
                <th className="px-4 py-3 text-left text-sm font-semibold text-gray-900">
                  <Emoji symbol="🔢" /> Unidad
                </th>
                <th className="px-4 py-3 text-left text-sm font-semibold text-gray-900">
                  <Emoji symbol="⚙️" /> Acciones
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200 bg-white">
              {copropietarios.map(c => (
                <tr key={c.id} className="hover:bg-gray-50">
                  <td className="whitespace-nowrap px-4 py-4 text-sm text-gray-900">
                    {c.nombre}
                  </td>
                  <td className="whitespace-nowrap px-4 py-4 text-sm text-gray-900">
                    {c.propiedad}
                  </td>
                  <td className="whitespace-nowrap px-4 py-4 text-sm text-gray-900">
                    {c.unidad_asignada}
                  </td>
                  <td className="whitespace-nowrap px-4 py-4 text-sm space-x-2">
                    <button
                      onClick={() => handleEdit(c)}
                      className="text-blue-600 hover:text-blue-900"
                    >
                      <Emoji symbol="✏️" /> Editar
                    </button>
                    <button
                      onClick={() => handleDelete(c.id)}
                      className="text-red-600 hover:text-red-900"
                    >
                      <Emoji symbol="🗑️" /> Eliminar
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      <Modal isOpen={modal.open} onClose={() => setModal({ open: false })}>
        <div className="p-6">
          <h3 className="text-xl font-bold mb-4">
            <Emoji symbol={modal.copropietario ? "✏️" : "➕"} /> 
            {modal.copropietario ? 'Editar' : 'Nuevo'} Copropietario
          </h3>
          
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">
                <Emoji symbol="🧑" /> Nombre completo
              </label>
              <input
                value={form.nombre}
                onChange={e => setForm({ ...form, nombre: e.target.value })}
                required
                className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">
                <Emoji symbol="🏢" /> Propiedad
              </label>
              <input
                value={form.propiedad}
                onChange={e => setForm({ ...form, propiedad: e.target.value })}
                required
                className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">
                <Emoji symbol="🔢" /> Unidad asignada
              </label>
              <input
                value={form.unidad_asignada}
                onChange={e => setForm({ ...form, unidad_asignada: e.target.value })}
                required
                className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div className="flex justify-end space-x-3 mt-6">
              <button
                type="button"
                onClick={() => setModal({ open: false })}
                className="px-4 py-2 border rounded hover:bg-gray-100 transition-colors"
              >
                Cancelar
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
              >
                {modal.copropietario ? 'Actualizar' : 'Crear'}
              </button>
            </div>
          </form>
        </div>
      </Modal>
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\pages\GestionUsuarios.jsx -----

import React, { useState, useEffect } from 'react';
import supabase from '../supabaseClient';
import Loader from '../components/Loader';
import Emoji from '../components/Emoji';

export default function GestionUsuarios() {
  const [usuarios, setUsuarios] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [modal, setModal] = useState({ open: false, usuario: null });
  const [form, setForm] = useState({ 
    nombre: '', 
    email: '',
    rol: 'registrador', 
    activo: true 
  });
  const [saving, setSaving] = useState(false);
  const [deleting, setDeleting] = useState(false);

  // Leer usuarios con validación
  const fetchUsuarios = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const { data, error } = await supabase
        .from('usuarios_app')
        .select('id, nombre, email, rol, activo')
        .order('nombre', { ascending: true });

      if (error) throw error;
      setUsuarios(Array.isArray(data) ? data : []);
    } catch (err) {
      setError(err.message || 'Error cargando usuarios');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => { 
    fetchUsuarios();
  }, []);

  // Validar formulario
  const validateForm = () => {
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(form.email)) {
      setError('Email inválido');
      return false;
    }
    if (form.nombre.trim().length < 3) {
      setError('Nombre debe tener al menos 3 caracteres');
      return false;
    }
    return true;
  };

  // Abrir modal para editar/crear
  const handleEdit = (usuario) => {
    setForm({
      nombre: usuario.nombre,
      email: usuario.email,
      rol: usuario.rol,
      activo: usuario.activo
    });
    setModal({ open: true, usuario });
  };

  const handleNew = () => {
    setForm({ nombre: '', email: '', rol: 'registrador', activo: true });
    setModal({ open: true, usuario: null });
  };

  // Guardar usuario
  const handleSave = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;
    
    setSaving(true);
    setError(null);

    try {
      const usuarioData = {
        nombre: form.nombre.trim(),
        email: form.email.trim().toLowerCase(),
        rol: form.rol,
        activo: form.activo
      };

      if (modal.usuario) {
        // Edición
        const { error } = await supabase
          .from('usuarios_app')
          .update(usuarioData)
          .eq('id', modal.usuario.id);
          
        if (error) throw error;
      } else {
        // Creación
        const { error } = await supabase
          .from('usuarios_app')
          .insert([usuarioData]);

        if (error) throw error;
      }

      setModal({ open: false, usuario: null });
      await fetchUsuarios();
    } catch (err) {
      setError(err.message || 'Error guardando usuario');
    } finally {
      setSaving(false);
    }
  };

  // Eliminar usuario
  const handleDelete = async (usuario) => {
    if (!window.confirm(`¿Eliminar usuario ${usuario.email}?`)) return;
    
    setDeleting(true);
    setError(null);

    try {
      const { error } = await supabase
        .from('usuarios_app')
        .delete()
        .eq('id', usuario.id);

      if (error) throw error;
      
      await fetchUsuarios();
    } catch (err) {
      setError(err.message || 'Error eliminando usuario');
    } finally {
      setDeleting(false);
    }
  };

  if (loading) return <Loader text="Cargando usuarios..." />;

  return (
    <div className="container mx-auto p-4">
      <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
        <Emoji symbol="👥" /> Gestión de Usuarios
      </h2>

      <div className="mb-4">
        <button 
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2"
          onClick={handleNew}
        >
          <Emoji symbol="➕" /> Nuevo usuario
        </button>
      </div>

      <div className="overflow-x-auto">
        <table className="w-full border-collapse">
          <thead className="bg-gray-100">
            <tr>
              <th className="p-3 text-left"><Emoji symbol="🧑" /> Nombre</th>
              <th className="p-3 text-left"><Emoji symbol="✉️" /> Email</th>
              <th className="p-3 text-left"><Emoji symbol="🎖️" /> Rol</th>
              <th className="p-3 text-left"><Emoji symbol="✔️" /> Estado</th>
              <th className="p-3 text-left"><Emoji symbol="⚙️" /> Acciones</th>
            </tr>
          </thead>
          <tbody>
            {usuarios.map(u => (
              <tr key={u.id} className="border-b hover:bg-gray-50">
                <td className="p-3">{u.nombre}</td>
                <td className="p-3">{u.email}</td>
                <td className="p-3">
                  <span className={`inline-block px-2 py-1 rounded ${u.rol === 'admin' ? 'bg-purple-100 text-purple-800' : 'bg-blue-100 text-blue-800'}`}>
                    {u.rol === 'admin' 
                      ? <><Emoji symbol="👑" /> Admin</>
                      : u.rol === 'copropietario'
                        ? <><Emoji symbol="🏠" /> Copropietario</>
                        : <><Emoji symbol="📋" /> Registrador</>}
                  </span>
                </td>
                <td className="p-3">
                  <span className={`inline-block px-2 py-1 rounded ${u.activo ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                    {u.activo ? <Emoji symbol="✅" /> : <Emoji symbol="❌" />}
                  </span>
                </td>
                <td className="p-3 flex gap-2">
                  <button 
                    className="text-blue-600 hover:text-blue-800"
                    onClick={() => handleEdit(u)}
                    disabled={deleting}
                  >
                    <Emoji symbol="✏️" />
                  </button>
                  <button 
                    className="text-red-600 hover:text-red-800"
                    onClick={() => handleDelete(u)}
                    disabled={deleting}
                  >
                    <Emoji symbol="🗑️" />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {error && (
        <div className="mt-4 p-3 bg-red-100 text-red-700 rounded-lg">
          <Emoji symbol="❌" /> {error}
        </div>
      )}

      {/* Modal de edición */}
      {modal.open && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
              <Emoji symbol={modal.usuario ? "✏️" : "➕"} />
              {modal.usuario ? 'Editar Usuario' : 'Nuevo Usuario'}
            </h3>

            <form onSubmit={handleSave} className="space-y-4">
              <div>
                <label className="block mb-2 font-medium"><Emoji symbol="🧑" /> Nombre:</label>
                <input
                  type="text"
                  value={form.nombre}
                  onChange={e => setForm({...form, nombre: e.target.value})}
                  className="w-full p-2 border rounded"
                  required
                  minLength="3"
                />
              </div>

              <div>
                <label className="block mb-2 font-medium"><Emoji symbol="✉️" /> Email:</label>
                <input
                  type="email"
                  value={form.email}
                  onChange={e => setForm({...form, email: e.target.value})}
                  className="w-full p-2 border rounded"
                  required
                  disabled={!!modal.usuario}
                />
              </div>

              <div>
                <label className="block mb-2 font-medium"><Emoji symbol="🎖️" /> Rol:</label>
                <select
                  value={form.rol}
                  onChange={e => setForm({...form, rol: e.target.value})}
                  className="w-full p-2 border rounded"
                  required
                >
                  <option value="admin">Administrador</option>
                  <option value="registrador">Registrador</option>
                  <option value="copropietario">Copropietario</option>
                </select>
              </div>

              <div className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={form.activo}
                  onChange={e => setForm({...form, activo: e.target.checked})}
                  className="w-4 h-4"
                />
                <label className="font-medium"><Emoji symbol="✔️" /> Usuario activo</label>
              </div>

              <div className="flex justify-end gap-2 mt-4">
                <button
                  type="button"
                  className="px-4 py-2 border rounded hover:bg-gray-100"
                  onClick={() => setModal({ open: false, usuario: null })}
                >
                  <Emoji symbol="❌" /> Cancelar
                </button>
                <button 
                  type="submit" 
                  className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                  disabled={saving}
                >
                  {saving ? <Loader size="small" /> : <><Emoji symbol="💾" /> Guardar</>}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\pages\Login.jsx -----

import React, { useState } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import supabase from "../supabaseClient";
import Loader from "../components/Loader";
import Emoji from "../components/Emoji";

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [otp, setOtp] = useState("");
  const [step, setStep] = useState("email"); // "email" | "otp" | "password"
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [info, setInfo] = useState("");
  const navigate = useNavigate();
  const location = useLocation();

  // Lógica para login con OTP (correo)
  const handleEmailSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setInfo("");
    setLoading(true);
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email,
        options: {
          shouldCreateUser: false,
          emailRedirectTo: window.location.origin,
        },
      });
      if (error) throw error;
      setStep("otp");
      setInfo("Código enviado. Revisa tu correo electrónico.");
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // Lógica para verificar OTP
  const handleOtpSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setInfo("");
    setLoading(true);
    try {
      const { error } = await supabase.auth.verifyOtp({
        email,
        token: otp,
        type: "email",
      });
      if (error) throw error;
      const from = location.state?.from?.pathname || "/registros";
      navigate(from, { replace: true });
    } catch (err) {
      setError(
        err.message.includes("token")
          ? "Código inválido o expirado"
          : err.message
      );
    } finally {
      setLoading(false);
    }
  };

  // Lógica para login con contraseña
  const handlePasswordLogin = async (e) => {
    e.preventDefault();
    setError("");
    setInfo("");
    setLoading(true);
    try {
      const { error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (error) throw error;
      const from = location.state?.from?.pathname || "/registros";
      navigate(from, { replace: true });
    } catch (err) {
      setError("Correo o contraseña incorrectos");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4">
      <div className="w-full max-w-md bg-gradient-to-br from-gray-900 to-gray-800 rounded-xl shadow-lg p-8 transition-all">
        <h1 className="text-3xl font-bold text-center mb-8 text-blue-300 flex items-center justify-center gap-2">
          <Emoji symbol="🔑" /> Acceso al Sistema
        </h1>

        {step === "email" && (
          <>
            <form onSubmit={handleEmailSubmit} className="space-y-5">
              <div>
                <label className="block text-base font-medium mb-2 text-white">
                  Correo electrónico
                </label>
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full px-4 py-3 rounded-lg border-2 border-blue-400 focus:border-blue-500 bg-gray-900 text-blue-100 placeholder-gray-400 text-lg outline-none"
                  placeholder="usuario@ejemplo.com"
                  required
                  autoFocus
                  disabled={loading}
                />
              </div>
              <button
                type="submit"
                className="w-full py-3 bg-blue-500 hover:bg-blue-600 text-white font-bold rounded-lg transition-colors flex items-center justify-center gap-2"
                disabled={loading}
              >
                {loading ? (
                  <Loader text="Enviando código..." />
                ) : (
                  <>
                    <Emoji symbol="📨" /> Continuar con correo
                  </>
                )}
              </button>
            </form>
            <form onSubmit={handlePasswordLogin} className="space-y-5 mt-6">
              <div>
                <label className="block text-base font-medium mb-2 text-white">
                  Contraseña
                </label>
                <input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="w-full px-4 py-3 rounded-lg border-2 border-blue-400 focus:border-blue-500 bg-gray-900 text-blue-100 placeholder-gray-400 text-lg outline-none"
                  placeholder="Ingresa tu contraseña"
                  required
                  disabled={loading || !email}
                  autoComplete="current-password"
                />
              </div>
              <button
                type="submit"
                className="w-full py-3 bg-green-500 hover:bg-green-600 text-white font-bold rounded-lg transition-colors flex items-center justify-center gap-2"
                disabled={loading || !email || !password}
              >
                {loading ? (
                  <Loader text="Ingresando..." />
                ) : (
                  <>
                    <Emoji symbol="🔓" /> Ingresar con contraseña
                  </>
                )}
              </button>
            </form>
          </>
        )}

        {step === "otp" && (
          <form onSubmit={handleOtpSubmit} className="space-y-6">
            <div>
              <label className="block text-base font-medium mb-2 text-white">
                Código de verificación
              </label>
              <input
                type="text"
                inputMode="numeric"
                pattern="[0-9]{6}"
                value={otp}
                onChange={(e) =>
                  setOtp(e.target.value.replace(/\D/g, "").slice(0, 6))
                }
                className="w-full px-4 py-3 text-center text-2xl font-mono rounded-lg border-2 border-blue-400 focus:border-blue-500 bg-gray-900 text-blue-100 placeholder-gray-400 outline-none"
                placeholder="123456"
                required
                autoFocus
                disabled={loading}
              />
              <p className="text-sm text-blue-200 mt-2 text-center">
                Ingresa el código de 6 dígitos enviado a {email}
              </p>
            </div>
            <button
              type="submit"
              className="w-full py-3 bg-green-500 hover:bg-green-600 text-white font-bold rounded-lg transition-colors flex items-center justify-center gap-2"
              disabled={loading}
            >
              {loading ? (
                <Loader text="Verificando..." />
              ) : (
                <>
                  <Emoji symbol="✅" /> Verificar código
                </>
              )}
            </button>
            <button
              type="button"
              className="w-full py-3 bg-blue-400 hover:bg-blue-500 text-white font-bold rounded-lg mt-2 transition-colors flex items-center justify-center gap-2"
              onClick={() => {
                setStep("email");
                setOtp("");
                setError("");
                setInfo("");
              }}
              disabled={loading}
            >
              <Emoji symbol="↩️" /> Volver a ingresar correo
            </button>
          </form>
        )}

        {error && (
          <div className="mt-6 p-4 bg-red-900 text-red-100 rounded-lg border border-red-800">
            <Emoji symbol="⚠️" /> {error}
          </div>
        )}

        {info && (
          <div className="mt-6 p-4 bg-green-900 text-green-100 rounded-lg border border-green-800">
            <Emoji symbol="ℹ️" /> {info}
          </div>
        )}

        </div>
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\pages\RegistroParqueo.jsx -----

// src/pages/RegistroParqueo.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import supabase from '../supabaseClient';
import Emoji from '../components/Emoji';
import Loader from '../components/Loader';
import ErrorMessage from '../components/ErrorMessage';
import useOnlineStatus from '../hooks/useOnlineStatus';
import SelectorDeFoto from '../components/SelectorDeFoto';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';

dayjs.extend(utc);
dayjs.extend(timezone);

// Utilidad para obtener la fecha/hora de Quito en formato YYYY-MM-DDTHH:mm
const getQuitoDateTimeLocal = () => {
  try {
    return dayjs().tz('America/Guayaquil').format('YYYY-MM-DDTHH:mm');
  } catch {
    return dayjs().format('YYYY-MM-DDTHH:mm');
  }
};

// Subida de fotos: guarda URLs públicas completas
const uploadPhotos = async (files, placa) => {
  const uploadedUrls = [];
  for (const file of files || []) {
    const fileName = `fotos/${placa}_${Date.now()}_${file.name}`;
    const { error } = await supabase.storage
      .from('evidencias-parqueadero')
      .upload(fileName, file);
    if (error) throw error;
    const { data } = supabase
      .storage
      .from('evidencias-parqueadero')
      .getPublicUrl(fileName);
    uploadedUrls.push(data.publicUrl);
  }
  return uploadedUrls;
};

export default function RegistroParqueo() {
  const [formDisabled, setFormDisabled] = useState(false);
  const [formData, setFormData] = useState({
    placa_vehiculo: '',
    tipo_vehiculo: 'carro',
    fecha_hora_ingreso: getQuitoDateTimeLocal(),
    observaciones: '',
    monto: 1.0,
    gratis: false,
    recaudado: false,
    fecha_recaudo: null,
    dependencia_id: '',
    fotos: [],
    audioObservacion: null
  });

  const [copropietarios, setCopropietarios] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [mensajeExito, setMensajeExito] = useState('');
  const [grabandoAudio, setGrabandoAudio] = useState(false);
  const [mediaRecorder, setMediaRecorder] = useState(null);
  const [audioUrl, setAudioUrl] = useState(null);
  const navigate = useNavigate();
  const isOnline = useOnlineStatus();

  const onFilesSelected = (files) => {
    setFormData(prev => ({
      ...prev,
      fotos: files
    }));
  };

  useEffect(() => {
    const fetchCopropietarios = async () => {
      try {
        const { data, error } = await supabase
          .from('copropietarios')
          .select('id, nombre, propiedad, unidad_asignada')
          .order('nombre');
        if (error) throw error;
        setCopropietarios(data || []);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchCopropietarios();
  }, []);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
      ...(name === 'gratis' && { monto: checked ? 0 : (prev.tipo_vehiculo === 'carro' ? 1.0 : 0.5) }),
      ...(name === 'tipo_vehiculo' && { monto: prev.gratis ? 0 : (value === 'carro' ? 1.0 : 0.5) })
    }));
  };

  // Grabación de audio
  const iniciarGrabacion = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const recorder = new window.MediaRecorder(stream);
      const audioChunks = [];

      recorder.ondataavailable = (e) => audioChunks.push(e.data);
      recorder.onstop = () => {
        const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
        const url = URL.createObjectURL(audioBlob);
        setAudioUrl(url);
        setFormData(prev => ({ ...prev, audioObservacion: audioBlob }));
      };

      recorder.start();
      setMediaRecorder(recorder);
      setGrabandoAudio(true);
    } catch (err) {
      setError('Error al acceder al micrófono');
    }
  };

  const detenerGrabacion = () => {
    if (mediaRecorder) {
      mediaRecorder.stop();
      setGrabandoAudio(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setMensajeExito('');
    try {
      if (!formData.placa_vehiculo.match(/^[A-Za-z0-9]{6,8}$/)) {
        throw new Error('Formato de placa inválido (6-8 caracteres alfanuméricos)');
      }
      if (!formData.dependencia_id) {
        throw new Error('Debe seleccionar un copropietario');
      }
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError || !user) throw new Error("Usuario no autenticado");
      const fechaHoraIngreso = formData.fecha_hora_ingreso
        ? dayjs(formData.fecha_hora_ingreso).tz('America/Guayaquil').toISOString()
        : null;
      const fotosUrls = await uploadPhotos(formData.fotos || [], formData.placa_vehiculo);

      let audioPath = null;
      if (formData.audioObservacion) {
        const fileName = `audios/${formData.placa_vehiculo}_${Date.now()}.webm`;
        const { error: audioError } = await supabase.storage
          .from('evidencias-parqueadero')
          .upload(fileName, formData.audioObservacion);
        if (audioError) throw audioError;
        const { data: audioUrlData } = supabase
          .storage
          .from('evidencias-parqueadero')
          .getPublicUrl(fileName);
        audioPath = audioUrlData.publicUrl;
      }

      const registro = {
        placa_vehiculo: formData.placa_vehiculo.toUpperCase(),
        tipo_vehiculo: formData.tipo_vehiculo,
        dependencia_id: formData.dependencia_id,
        usuario_id: user.id,
        observaciones: formData.observaciones || null,
        fecha_hora_ingreso: fechaHoraIngreso,
        recaudado: !!formData.recaudado,
        fecha_recaudo: formData.recaudado && formData.fecha_recaudo ? formData.fecha_recaudo : null,
        monto: formData.gratis ? 0 : Number(formData.monto),
        gratis: !!formData.gratis,
        observacion_audio_url: audioPath,
        foto_url: fotosUrls
      };

      const { error } = await supabase.from('registros_parqueadero').insert([registro]);
      if (error) throw error;

      setMensajeExito('Registro guardado exitosamente.');
      setTimeout(() => setMensajeExito(''), 3500);
      setFormData({
        placa_vehiculo: '',
        tipo_vehiculo: 'carro',
        fecha_hora_ingreso: getQuitoDateTimeLocal(),
        observaciones: '',
        monto: 1.0,
        gratis: false,
        recaudado: false,
        fecha_recaudo: null,
        dependencia_id: '',
        fotos: [],
        audioObservacion: null
      });
      setAudioUrl(null);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
      setFormDisabled(false);
    }
  };

  if (loading) return <Loader fullScreen text="Cargando formulario..." />;

  return (
    <div className="max-w-2xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">
        <Emoji symbol="📝" /> Registro de Parqueo
      </h1>

      {mensajeExito && (
        <div
          className="bg-green-600 text-white px-4 py-3 rounded shadow mb-4 text-center fade-in-up"
          style={{ fontWeight: 'bold', fontSize: '1.1em', letterSpacing: '0.5px' }}
          role="status"
          aria-live="polite"
        >
          <Emoji symbol="✅" label="Éxito" /> {mensajeExito}
        </div>
      )}

      {error && <ErrorMessage message={error} />}

      <form onSubmit={handleSubmit} className="space-y-4" autoComplete="off">
        <div>
          <label className="block font-semibold mb-1">
            Placa del vehículo:
          </label>
          <input
  name="placa_vehiculo"
  value={formData.placa_vehiculo}
  onChange={e => {
    // Solo mayúsculas y números
    const val = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
    setFormData(prev => ({
      ...prev,
      placa_vehiculo: val
    }));
  }}
  required
  className="w-full p-2 border rounded"
  placeholder="Ej: PBA1234"
  autoFocus
  maxLength={8}
  pattern="[A-Z0-9]{6,8}"
  title="Solo letras mayúsculas y números (6 a 8 caracteres)"
/>
        </div>
        <div>
          <label className="block font-semibold mb-1">
            Tipo de vehículo:
          </label>
          <select
            name="tipo_vehiculo"
            value={formData.tipo_vehiculo}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            disabled={formDisabled}
          >
            <option value="carro">Carro</option>
            <option value="moto">Moto</option>
          </select>
        </div>
        <div>
          <label className="block font-semibold mb-1">
            Fecha y hora de ingreso:
          </label>
          <input
            name="fecha_hora_ingreso"
            type="datetime-local"
            value={formData.fecha_hora_ingreso}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            disabled={formDisabled}
          />
        </div>
        <div>
          <label className="block font-semibold mb-1">
            Observaciones:
          </label>
          <input
            name="observaciones"
            value={formData.observaciones}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            placeholder="Observaciones (opcional)"
            disabled={formDisabled}
          />
        </div>
        <div>
          <label className="block font-semibold mb-1">
            Copropietario:
          </label>
          <select
  name="dependencia_id"
  value={formData.dependencia_id}
  onChange={handleChange}
  className="w-full p-2 border rounded"
  required
>
  <option value="">Seleccione un copropietario</option>
  {[...copropietarios]
    .sort((a, b) => {
      // Ordena primero Casa, luego Departamento, y luego por unidad asignada
      if (a.propiedad === b.propiedad) {
        return String(a.unidad_asignada).localeCompare(String(b.unidad_asignada), 'es', { numeric: true });
      }
      if (a.propiedad === 'Casa') return -1;
      if (b.propiedad === 'Casa') return 1;
      return a.propiedad.localeCompare(b.propiedad, 'es');
    })
    .map(copropietario => (
      <option key={copropietario.id} value={copropietario.id}>
        {copropietario.propiedad === 'Casa' && '🏡'}
        {copropietario.propiedad === 'Departamento' && '🌆'}
        {' '}
         - {copropietario.unidad_asignada}
      </option>
    ))}
</select>

        </div>
        <div>
          <label className="block font-semibold mb-1">
            Monto:
          </label>
          <input
            name="monto"
            type="number"
            min="0"
            step="0.01"
            value={formData.monto}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            placeholder="Monto"
            disabled={formDisabled || formData.gratis}
          />
        </div>
        <div className="flex items-center gap-2">
          <input
            type="checkbox"
            name="gratis"
            checked={formData.gratis}
            onChange={handleChange}
            id="gratis"
            disabled={formDisabled}
          />
          <label htmlFor="gratis" className="font-semibold">
            <Emoji symbol="🆓" /> Gratis
          </label>
        </div>
        <div>
          <label className="block font-semibold mb-1">
            Foto (opcional):
          </label>
          <SelectorDeFoto onFilesSelected={onFilesSelected} maxFiles={3} disabled={formDisabled} />
        </div>
        <div>
          <label className="block font-semibold mb-1">
            Audio (opcional):
          </label>
          <div className="flex items-center gap-2">
            {!grabandoAudio && (
              <button
                type="button"
                onClick={iniciarGrabacion}
                className="bg-blue-500 text-white px-3 py-1 rounded"
                disabled={formDisabled}
              >
                <Emoji symbol="🎤" /> Grabar audio
              </button>
            )}
            {grabandoAudio && (
              <button
                type="button"
                onClick={detenerGrabacion}
                className="bg-red-500 text-white px-3 py-1 rounded"
              >
                <Emoji symbol="⏹️" /> Detener
              </button>
            )}
            {audioUrl && (
              <audio src={audioUrl} controls style={{ height: 36 }} />
            )}
          </div>
        </div>
        <div>
          <button
            type="submit"
            className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition-colors font-semibold"
            disabled={loading || formDisabled || !isOnline}
          >
            {loading ? <Loader text="Guardando..." /> : 'Guardar Registro'}
          </button>
        </div>
      </form>
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\pages\ResetPassword.jsx -----

// src/pages/ResetPassword.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import supabase from '../supabaseClient';
import Emoji from '../components/Emoji';
import ErrorMessage from '../components/ErrorMessage';

export default function ResetPassword() {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();

  const validatePasswords = () => {
    if (password.length < 6) {
      setError('La contraseña debe tener al menos 6 caracteres');
      return false;
    }
    if (password !== confirmPassword) {
      setError('Las contraseñas no coinciden');
      return false;
    }
    return true;
  };

  const handleResetPassword = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    if (!validatePasswords()) return;

    setLoading(true);
    try {
      const { error } = await supabase.auth.updateUser({
        password: password
      });

      if (error) throw error;

      setSuccess('Contraseña actualizada exitosamente. Redirigiendo al login...');
      
      // Cerrar sesión y redirigir al login después de 2 segundos
      setTimeout(async () => {
        await supabase.auth.signOut();
        navigate('/login', { replace: true });
      }, 2000);

    } catch (error) {
      setError(error.message || 'Error al actualizar la contraseña');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-900 to-gray-800 px-4">
      <form
        onSubmit={handleResetPassword}
        className="w-full max-w-md bg-gradient-to-br from-gray-900 to-gray-800 rounded-2xl shadow-2xl p-8 border border-gray-700"
        aria-label="Formulario para restablecer contraseña"
      >
        <h1 className="text-3xl font-bold text-center mb-6 text-blue-300 flex items-center justify-center gap-2">
          <Emoji symbol="🔒" label="candado" /> Restablecer Contraseña
        </h1>

        <p className="text-center text-gray-300 mb-6">
          Ingresa tu nueva contraseña para completar el restablecimiento.
        </p>

        <div className="mb-4">
          <label htmlFor="password" className="block text-base font-medium mb-2 text-white">
            Nueva contraseña
          </label>
          <input
            id="password"
            type="password"
            autoComplete="new-password"
            className={`w-full p-3 rounded-xl bg-gray-800 text-blue-100 border-2 transition-all outline-none text-lg
              ${error && password.length < 6 ? 'border-pink-400 focus:border-pink-500' : 'border-blue-400 focus:border-blue-500'}
            `}
            placeholder="Mínimo 6 caracteres"
            value={password}
            onChange={e => setPassword(e.target.value)}
            required
            disabled={loading}
            minLength={6}
          />
        </div>

        <div className="mb-4">
          <label htmlFor="confirmPassword" className="block text-base font-medium mb-2 text-white">
            Confirmar contraseña
          </label>
          <input
            id="confirmPassword"
            type="password"
            autoComplete="new-password"
            className={`w-full p-3 rounded-xl bg-gray-800 text-blue-100 border-2 transition-all outline-none text-lg
              ${error && password !== confirmPassword ? 'border-pink-400 focus:border-pink-500' : 'border-blue-400 focus:border-blue-500'}
            `}
            placeholder="Confirma tu nueva contraseña"
            value={confirmPassword}
            onChange={e => setConfirmPassword(e.target.value)}
            required
            disabled={loading}
          />
        </div>

        {error && (
          <div className="mb-3 text-pink-400 text-sm font-semibold">
            <Emoji symbol="⚠️" /> {error}
          </div>
        )}

        {success && (
          <div className="mb-3 text-green-400 text-sm font-semibold">
            <Emoji symbol="✅" /> {success}
          </div>
        )}

        <button
          type="submit"
          className="w-full py-3 rounded-xl bg-green-500 hover:bg-green-600 text-white font-bold text-lg shadow transition-colors flex items-center justify-center gap-2"
          disabled={loading}
        >
          <Emoji symbol="🔐" />
          {loading ? 'Actualizando contraseña...' : 'Actualizar contraseña'}
        </button>

        <div className="mt-6 text-center">
          <button
            type="button"
            onClick={() => navigate('/login')}
            className="text-blue-300 hover:underline text-sm"
            disabled={loading}
          >
            ← Volver al login
          </button>
        </div>

            </form>
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\pages\ResumenRecaudo.jsx -----

import React, { useState, useEffect } from 'react';
import supabase from '../supabaseClient';
import Loader from '../components/Loader';
import Emoji from '../components/Emoji';
import ExportarPDF from '../components/ExportarPDF';
import ErrorMessage from '../components/ErrorMessage';
import SelectorDeFoto from '../components/SelectorDeFoto';
import dayjs from 'dayjs';
import SemaforoResumen from '../components/SemaforoResumen';

export default function ResumenRecaudo() {
  const [registros, setRegistros] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [montoRecaudar, setMontoRecaudar] = useState('');
  const [procesando, setProcesando] = useState(false);
  const [registrosModificados, setRegistrosModificados] = useState([]);
  const [propiedades, setPropiedades] = useState([]);
  const [unidades, setUnidades] = useState([]);
  const [filtroPropiedad, setFiltroPropiedad] = useState('');
  const [filtroUnidad, setFiltroUnidad] = useState('');
  const [filtroCopropietario, setFiltroCopropietario] = useState('');
  const [fotosEvidencia, setFotosEvidencia] = useState([]);

  // Configuración de columnas para PDF
  const columnasPDF = [
    { header: 'Fecha', key: 'fecha_hora_ingreso', formatter: v => dayjs(v).format('DD/MM/YY HH:mm') },
    { header: 'Placa', key: 'placa_vehiculo' },
    { header: 'Tipo', key: 'tipo_vehiculo' },
    { header: 'Monto', key: 'monto', formatter: v => `$${Number(v).toFixed(2)}` },
    { header: 'Evidencia', key: 'evidencia_recaudo', formatter: urls => Array.isArray(urls) && urls.length ? 'Sí' : 'No' }
  ];

  // Cargar datos iniciales
  useEffect(() => {
    const cargarDatos = async () => {
      setLoading(true);
      try {
        const [resRegistros, resCopropietarios] = await Promise.all([
          supabase.from('registros_parqueadero')
            .select('*, copropietarios:dependencia_id(nombre, propiedad, unidad_asignada)')
            .order('fecha_hora_ingreso', { ascending: false }),
          supabase.from('copropietarios').select('propiedad, unidad_asignada')
        ]);
        
        if (resRegistros.error) throw resRegistros.error;
        if (resCopropietarios.error) throw resCopropietarios.error;
        
        setRegistros(resRegistros.data || []);
        setPropiedades([...new Set(resCopropietarios.data.map(c => c.propiedad))].sort());
        setUnidades(resCopropietarios.data || []);
      } catch (e) {
        setError(e.message);
      } finally {
        setLoading(false);
      }
    };
    cargarDatos();
  }, []);

  // Opciones únicas para selects dependientes
  const unidadesFiltradas = filtroPropiedad
    ? [...new Set(unidades.filter(u => u.propiedad === filtroPropiedad).map(u => u.unidad_asignada))]
    : [];

  // Filtrado de registros
  const registrosFiltrados = registros.filter(reg => {
    const coincidePropiedad = !filtroPropiedad || reg.copropietarios?.propiedad === filtroPropiedad;
    const coincideUnidad = !filtroUnidad || reg.copropietarios?.unidad_asignada === filtroUnidad;
    const coincideNombre = !filtroCopropietario || (reg.copropietarios?.nombre || '').toLowerCase().includes(filtroCopropietario.toLowerCase());
    return coincidePropiedad && coincideUnidad && coincideNombre;
  });

  // Algoritmo optimizado para encontrar combinación exacta
  const encontrarCombinacionExacta = (registros, objetivo) => {
    const dp = Array(Math.floor(objetivo * 100) + 1).fill(null).map(() => []);
    dp[0] = [[]];

    for (const reg of registros) {
      const monto = Math.round(reg.monto * 100);
      for (let j = Math.floor(objetivo * 100); j >= monto; j--) {
        if (dp[j - monto].length > 0) {
          dp[j] = [...dp[j], ...dp[j - monto].map(combo => [...combo, reg])];
        }
      }
    }

    const resultados = dp[Math.floor(objetivo * 100)];
    return resultados?.[0] || null;
  };

  // Subida de evidencia a Supabase Storage
  const subirEvidencia = async () => {
    const urls = [];
    for (const foto of fotosEvidencia) {
      const extension = foto.name.split('.').pop().toLowerCase();
      const nombreArchivo = `evidencia-recaudo-${Date.now()}-${Math.random().toString(36).substr(2, 5)}.${extension}`;
      const { error } = await supabase.storage
        .from('evidencias-recaudo')
        .upload(nombreArchivo, foto, { contentType: foto.type });
      
      if (!error) {
        const { data: { publicUrl } } = supabase.storage
          .from('evidencias-recaudo')
          .getPublicUrl(nombreArchivo);
        urls.push(publicUrl);
      } else {
        throw error;
      }
    }
    return urls;
  };

  // Proceso de recaudación exacta
  const handleRecaudoExacto = async () => {
    setError('');
    setRegistrosModificados([]);
    
    try {
      // Validaciones
      if (!filtroPropiedad || !filtroUnidad) throw new Error('Debe seleccionar propiedad y unidad');
      const montoObjetivo = parseFloat(montoRecaudar);
      if (isNaN(montoObjetivo) || montoObjetivo <= 0) throw new Error('Monto inválido');
      if (fotosEvidencia.length === 0) throw new Error('Debe adjuntar evidencia fotográfica');

      setProcesando(true);
      
      // Filtrar y ordenar registros
      const pendientes = registrosFiltrados
        .filter(r => !r.recaudado && !r.gratis)
        .sort((a, b) => new Date(a.fecha_hora_ingreso) - new Date(b.fecha_hora_ingreso));

      // Buscar combinación exacta
      const seleccion = encontrarCombinacionExacta(pendientes, montoObjetivo);
      if (!seleccion) throw new Error('No existe combinación exacta para el monto ingresado');

      // Subir evidencia
      const urlsEvidencia = await subirEvidencia();

      // Actualizar registros
      const updates = seleccion.map(reg => 
        supabase
          .from('registros_parqueadero')
          .update({
            recaudado: true,
            fecha_recaudo: new Date().toISOString(),
            evidencia_recaudo: urlsEvidencia
          })
          .eq('id', reg.id)
      );

      const resultados = await Promise.all(updates);
      const errores = resultados.filter(r => r.error);
      if (errores.length > 0) throw new Error(`Error en ${errores.length} registros`);

      // Actualizar estado local
      setRegistros(prev => 
        prev.map(r => 
          seleccion.some(s => s.id === r.id) 
            ? { ...r, recaudado: true, fecha_recaudo: new Date(), evidencia_recaudo: urlsEvidencia } 
            : r
        )
      );
      
      setRegistrosModificados(seleccion);
      setMontoRecaudar('');
      setFotosEvidencia([]);
      
    } catch (e) {
      setError(e.message);
    } finally {
      setProcesando(false);
    }
  };

  if (loading) return <Loader text="Cargando datos..." />;

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="flex flex-col md:flex-row justify-between items-center mb-8 gap-4">
        <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-100">
          <Emoji symbol="📊" /> Gestión de Recaudación
        </h2>
        <ExportarPDF
          datos={registrosModificados}
          columnas={columnasPDF}
          titulo="Registros Recaudados"
        />
      </div>

      {/* Filtros */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div>
          <label className="block text-sm font-medium mb-1">Propiedad:</label>
          <select
            value={filtroPropiedad}
            onChange={e => {
              setFiltroPropiedad(e.target.value);
              setFiltroUnidad('');
            }}
            className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
          >
            <option value="">Todas las propiedades</option>
            {propiedades.map(prop => (
              <option key={prop} value={prop}>{prop}</option>
            ))}
          </select>
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Unidad asignada:</label>
          <select
            value={filtroUnidad}
            onChange={e => setFiltroUnidad(e.target.value)}
            className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
            disabled={!filtroPropiedad}
          >
            <option value="">Todas las unidades</option>
            {unidadesFiltradas.map(unidad => (
              <option key={unidad} value={unidad}>{unidad}</option>
            ))}
          </select>
        </div>
      </div>

      {/* Semaforo de Resumen */}
      <SemaforoResumen 
        registros={registrosFiltrados}
        customLabels={{
          recaudado: 'Recaudado',
          pendiente: 'Pendiente',
          gratis: 'Gratis',
          cantidad: 'Registros',
          total: 'Total'
        }}
        colorFondo="rgba(243, 244, 246, 0.5)"
        className="mb-8"
      />

      {/* Sección de recaudación */}
      <div className="bg-gray-50 dark:bg-gray-700 p-6 rounded-lg shadow-inner mb-8">
        <h3 className="text-xl font-semibold mb-4 text-gray-800 dark:text-gray-100">
          <Emoji symbol="⚡" /> Proceso de Recaudación
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Monto a recaudar ($)
            </label>
            <input
              type="number"
              min="0"
              step="0.01"
              value={montoRecaudar}
              onChange={e => setMontoRecaudar(e.target.value)}
              className="w-full p-2 border rounded-md dark:bg-gray-800 dark:border-gray-600"
              placeholder="Ej: 25.50"
              disabled={procesando}
            />
          </div>
          
          <div className="md:col-span-2 space-y-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Evidencia fotográfica (Máx. 5)
            </label>
            <SelectorDeFoto
              onFilesSelected={setFotosEvidencia}
              maxFiles={5}
              disabled={procesando}
            />
          </div>
        </div>

        <button
          onClick={handleRecaudoExacto}
          disabled={!montoRecaudar || procesando}
          className="w-full mt-4 py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors flex items-center justify-center gap-2"
        >
          {procesando ? (
            <Loader text="Procesando..." />
          ) : (
            <>
              <Emoji symbol="✅" /> Ejecutar Recaudo
            </>
          )}
        </button>

        {error && (
          <ErrorMessage 
            message={error} 
            className="mt-4"
          />
        )}
      </div>

      {/* Tabla de registros */}
      <div className="overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700">
        <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead className="bg-gray-50 dark:bg-gray-800">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Placa</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Tipo</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Monto</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Copropietario</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Fecha Recaudo</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Evidencia</th>
            </tr>
          </thead>
          <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
            {registrosFiltrados.map(reg => (
              <tr key={reg.id} className={reg.recaudado ? 'bg-green-50 dark:bg-green-900' : ''}>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">{reg.placa_vehiculo}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                  <Emoji symbol={reg.tipo_vehiculo === 'carro' ? '🚗' : '🏍️'} /> {reg.tipo_vehiculo}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                  ${Number(reg.monto).toFixed(2)}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                  {reg.copropietarios?.nombre || '-'}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                  {reg.fecha_recaudo ? dayjs(reg.fecha_recaudo).format('DD/MM/YY HH:mm') : '-'}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {reg.evidencia_recaudo?.map((url, index) => (
                    <a
                      key={index}
                      href={url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="inline-block mr-2"
                    >
                      <img
                        src={url}
                        alt={`Evidencia ${index + 1}`}
                        className="w-12 h-12 object-cover rounded border border-gray-200 dark:border-gray-600"
                      />
                    </a>
                  ))}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\providers\QueryClientProvider.jsx -----

// src/providers/QueryClientProvider.jsx
import React from 'react'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'

// Configura el QueryClient con opciones recomendadas para producción
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000,     // 5 minutos: los datos se consideran frescos
      cacheTime: 30 * 60 * 1000,    // 30 minutos: tiempo de vida en caché
      retry: 2,                     // Reintenta 2 veces en caso de error
      refetchOnWindowFocus: false,  // No recargar al cambiar de pestaña
      useErrorBoundary: true        // Usa ErrorBoundary para errores
    },
    mutations: {
      useErrorBoundary: true
    }
  }
})

/**
 * Envuelve tu aplicación con este provider para habilitar React Query globalmente.
 * Uso:
 * <MyQueryClientProvider>
 *   <App />
 * </MyQueryClientProvider>
 */
export default function MyQueryClientProvider({ children }) {
  return (
    <QueryClientProvider client={queryClient}>
      {children}
      {import.meta.env.DEV && <ReactQueryDevtools initialIsOpen={false} />}
    </QueryClientProvider>
  )
}


----- C:\ThomasParking\ThomasParking\src\styles\global.css -----

@charset "UTF-8";

/* =========================
   Variables Blue Neon Theme
   ========================= */
:root {
  --background: #181f2a;
  --surface: #232b3e;
  --text: #eaf6fb;
  --text-muted: #7dd3fc;
  --primary: #00e6fb;
  --primary-dark: #2563eb;
  --primary-light: #38bdf8;
  --secondary: #1e40af;
  --accent: #7c3aed;
  --success: #22d3ee;
  --warning: #fbbf24;
  --danger: #ef4444;
  --radius-lg: 20px;
  --radius-md: 12px;
  --radius-sm: 6px;
  --shadow-lg: 0 8px 32px #00e6fb33;
  --shadow-md: 0 2px 12px #00e6fb44;
  --transition: .22s cubic-bezier(.4,0,.2,1);
  --font-main: 'Inter', 'Segoe UI', Arial, sans-serif;
  --focus: #00e6fb;
  --table-header: linear-gradient(90deg, #0ff 0%, #38bdf8 100%);
  --table-header-text: #18181b;
  --table-row-hover: #1e293b;
  --banner-bg: #0ff6;
  --banner-text: #18181b;
}

[data-theme="light"] {
  --background: #f6fbff;
  --surface: #fff;
  --text: #18181b;
  --text-muted: #38bdf8;
  --primary: #2563eb;
  --primary-dark: #1e40af;
  --primary-light: #38bdf8;
  --secondary: #1e40af;
  --accent: #7c3aed;
  --success: #10b981;
  --warning: #fbbf24;
  --danger: #ef4444;
  --shadow-lg: 0 8px 32px #2563eb33;
  --shadow-md: 0 2px 12px #2563eb44;
  --focus: #2563eb;
  --table-header: linear-gradient(90deg, #2563eb 0%, #38bdf8 100%);
  --table-header-text: #fff;
  --table-row-hover: #e0f2fe;
  --banner-bg: #e0f2fe;
  --banner-text: #2563eb;
}

/* =========================
   Base & Typography
   ========================= */
html, body {
  margin: 0;
  padding: 0;
  font-family: var(--font-main);
  background: var(--background);
  color: var(--text);
  min-height: 100vh;
  scroll-behavior: smooth;
  transition: background var(--transition), color var(--transition);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-size: 16px;
}

#root, .app-root {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: stretch;
  background: var(--background);
}

h1, h2, h3, h4 {
  font-weight: 900;
  letter-spacing: -1px;
  margin-top: 0;
  text-align: center;
  line-height: 1.15;
  color: var(--primary);
  text-shadow: 0 2px 16px #00e6fb44;
}

a {
  color: var(--primary);
  text-decoration: none;
  font-weight: 600;
  transition: color var(--transition);
}
a:hover, a:focus {
  color: var(--accent);
  text-shadow: 0 0 8px var(--primary-light);
  outline: none;
}

/* === NAVBAR FIJO Y RESPONSIVO === */
header, .navbar {
  width: 100vw;
  min-width: 0;
  max-width: 100vw;
  background: linear-gradient(90deg, #2563eb 0%, #7c3aed 100%);
  color: #fff;
  box-shadow: 0 2px 12px #6366f144;
  position: fixed;
  top: 0; left: 0;
  z-index: 50;
  height: 48px;
  .menu-mobile-fullscreen {
  position: fixed;         /* O absolute, según el contexto */
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;           /* O el alto deseado */
  display: flex;
  justify-content: center; /* Centra horizontalmente */
  align-items: center;     /* Centra verticalmente */
  background: #18181b;     /* Opcional: fondo para destacar el menú */
  z-index: 100;
}

  padding: 0 4px;
  font-size: 1rem;
}

header .max-w-7xl,
.navbar .max-w-7xl {
  max-width: 100vw !important;
  padding: 0 !important;
}
header .flex,
.navbar .flex {
  flex-wrap: nowrap;
  gap: 0.5rem;
  min-width: 0;
}
header .font-bold,
.navbar .font-bold {
  font-size: 1rem !important;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
header .hidden.md\:flex,
.navbar .hidden.md\:flex {
  display: none !important;
}
header .ml-4,
.navbar .ml-4 {
  margin-left: 0.5rem !important;
}
header .ml-auto,
.navbar .ml-auto {
  margin-left: auto !important;
}
header .text-xs,
.navbar .text-xs {
  font-size: 0.9em !important;
}
header button,
.navbar button {
  min-width: 0 !important;
  min-height: 0 !important;
  width: 32px !important;
  height: 32px !important;
  padding: 4px !important;
  font-size: 1.2em;
  background: transparent;
  box-shadow: none;
}
header svg,
.navbar svg {
  width: 20px !important;
  height: 20px !important;
}



/* === BANNER OFFLINE === */
.offline-banner {
  width: 100vw;
  background: #f59e42;
  color: #fff;
  font-weight: bold;
  text-align: center;
  padding: 10px 0;
  position: fixed;
  top: 48px;
  left: 0;
  z-index: 100;
  letter-spacing: 0.5px;
}

/* === PADDING PARA QUE EL CONTENIDO NO QUEDE DETRÁS DEL NAVBAR === */
.pt-16 { padding-top: 4rem !important; }

/* === OTROS ESTILOS BASE Y UTILIDADES === */
:root {
  --background: #f8fafc;
  --surface: #fff;
  --text: #18181b;
  --text-muted: #6b7280;
  --primary: #6366f1;
  --primary-light: #e0e7ff;
  --secondary: #38bdf8;
  --accent: #ff6f91;
  --success: #10b981;
  --warning: #f59e42;
  --danger: #ef4444;
  --radius-lg: 20px;
  --radius-md: 12px;
  --radius-sm: 6px;
  --shadow-lg: 0 8px 32px #6366f133;
  --shadow-md: 0 2px 12px #6366f144;
  --transition: .22s cubic-bezier(.4,0,.2,1);
  --font-main: "Inter", "Segoe UI", Arial, sans-serif;
  --focus: #ff6f91;
}
[data-theme=dark] {
  --background: #18181b;
  --surface: #23272f;
  --text: #f3f4f6;
  --text-muted: #a1a1aa;
  --primary: #818cf8;
  --primary-light: #23272f;
  --secondary: #38bdf8;
  --accent: #f472b6;
  --shadow-lg: 0 8px 32px #818cf833;
  --shadow-md: 0 2px 12px #818cf844;
}
html, body {
  margin: 0;
  padding: 0;
  font-family: var(--font-main);
  background: var(--background);
  color: var(--text);
  min-height: 100vh;
  scroll-behavior: smooth;
  text-align: center;
  transition: background var(--transition), color var(--transition);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
#root, .app-root {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  background: var(--background);
}
a {
  color: var(--primary);
  text-decoration: none;
  transition: color var(--transition);
}
a:hover, a:focus {
  color: var(--accent);
  text-decoration: underline;
  outline-offset: 2px;
  outline: 2px solid var(--accent);
}
h1, h2, h3, h4 {
  font-weight: 800;
  letter-spacing: -1px;
  margin-top: 0;
  text-align: center;
  line-height: 1.2;
}
button, input, select, textarea {
  font-family: inherit;
  font-size: 1rem;
  border-radius: var(--radius-md);
  border: 1.5px solid #e5e7eb;
  padding: 10px 14px;
  outline-offset: 2px;
  transition: border-color var(--transition), background var(--transition), box-shadow var(--transition);
  margin: .25rem 0;
  box-sizing: border-box;
}
button {
  cursor: pointer;
  background: var(--primary);
  color: #fff;
  border: none;
  font-weight: 600;
  box-shadow: var(--shadow-md);
  min-width: 120px;
  min-height: 44px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  -webkit-user-select: none;
  user-select: none;
}
button:hover, button:focus {
  background: linear-gradient(90deg, var(--secondary) 60%, var(--accent) 100%);
  outline: none;
  box-shadow: 0 0 0 3px var(--focus);
}
button:focus-visible {
  outline: 3px solid var(--focus);
  outline-offset: 3px;
}
input:focus, select:focus, textarea:focus {
  border-color: var(--primary);
  background: #f0f9ff;
  box-shadow: 0 0 0 3px var(--focus);
}
input[type=checkbox], input[type=radio] {
  width: 1.1em;
  height: 1.1em;
  accent-color: var(--primary);
  margin-right: 7px;
  cursor: pointer;
}
::-webkit-scrollbar {
  width: 10px;
  background: #e0e7ef;
}
::-webkit-scrollbar-thumb {
  background: var(--primary);
  border-radius: 8px;
}
.thumbnail {
  width: 38px;
  height: 38px;
  object-fit: cover;
  border-radius: var(--radius-sm);
  box-shadow: 0 2px 6px #6366f133;
}
.pt-16 { padding-top: 4rem !important; }
:focus-visible {
  outline: 2.5px solid var(--focus);
  outline-offset: 2px;
}

/* =========================
   Banners & Messages
   ========================= */
.offline-banner {
  background: var(--banner-bg);
  color: var(--banner-text);
  padding: 8px 0;
  text-align: center;
  font-weight: 700;
  font-size: 1rem;
  border-bottom: 2px solid var(--primary);
  position: sticky;
  top: 48px;
  z-index: 40;
  letter-spacing: 1px;
  text-shadow: 0 1px 8px #00e6fb88;
}

.error-message {
  background: #23272f;
  color: var(--danger);
  border: 1.5px solid var(--primary);
  margin-top: 1rem;
  padding: 12px 18px;
  border-radius: var(--radius-md);
  font-size: 1.06em;
  font-weight: 600;
  text-align: center;
  max-width: 700px;
  word-wrap: break-word;
  box-shadow: 0 2px 12px #00e6fb33;
}
[data-theme="light"] .error-message {
  background: #fffbe6;
  color: #ef4444;
  border-color: #2563eb;
}

/* =========================
   Tables
   ========================= */
table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  background: var(--surface);
  border-radius: var(--radius-md);
  box-shadow: var(--shadow-md);
  margin-bottom: 2rem;
  overflow: hidden;
  font-size: 0.92em;
}
th, td {
  padding: 10px 6px;
  text-align: left;
  border-bottom: 1px solid #1e293b;
}
th {
  background: var(--table-header);
  color: var(--table-header-text);
  font-weight: 800;
  text-shadow: 0 1px 6px #00e6fb88;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  border-bottom: 2px solid var(--primary);
  font-size: 0.93em;
}
tr:last-child td {
  border-bottom: none;
}
tbody tr:hover {
  background: var(--table-row-hover);
  color: var(--primary);
  transition: background var(--transition), color var(--transition);
}

/* =========================
   Inputs y botones
   ========================= */
input, select, textarea {
  font-family: inherit;
  font-size: 1em;
  border-radius: var(--radius-md);
  border: 1.5px solid #e5e7eb;
  padding: 8px 10px;
  outline-offset: 2px;
  margin: .18rem 0;
  box-sizing: border-box;
  background: #232b3e;
  color: var(--text);
  min-width: 0;
  max-width: 100%;
}
input:focus, select:focus, textarea:focus {
  border-color: var(--primary);
  background: #1e293b;
  box-shadow: 0 0 0 2px var(--focus);
  color: var(--primary);
}
button {
  cursor: pointer;
  background: var(--primary);
  color: #fff;
  border: none;
  font-weight: 600;
  box-shadow: var(--shadow-md);
  min-width: 100px;
  min-height: 36px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  font-size: 1em;
  border-radius: var(--radius-md);
  transition: background var(--transition), box-shadow var(--transition), color var(--transition);
}
button:hover, button:focus {
  background: linear-gradient(90deg, var(--secondary) 60%, var(--accent) 100%);
  outline: none;
  box-shadow: 0 0 0 2px var(--focus);
}
button:active {
  transform: scale(0.97);
  filter: brightness(1.1);
}
input[type=checkbox], input[type=radio] {
  width: 1em;
  height: 1em;
  accent-color: var(--primary);
  margin-right: 5px;
  cursor: pointer;
}

/* =========================
   Loader
   ========================= */
.loader-spinner {
  width: 32px;
  height: 32px;
  border: 4px solid #e0e0e0;
  border-top: 4px solid var(--primary);
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 0.7rem;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
}
@keyframes spin {
  0% { transform: rotate(0);}
  100% { transform: rotate(360deg);}
}

/* =========================
   Modal
   ========================= */
.modal-backdrop {
  position: fixed;
  top: 0; left: 0;
  width: 100vw; height: 100vh;
  background: rgba(24,24,27,0.7);
  z-index: 9999;
  display: flex;
  align-items: center;
  justify-content: center;
}
.modal-content {
  background: var(--surface);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-lg);
  padding: 2rem;
  max-width: 480px;
  width: 90vw;
  max-height: 90vh;
  overflow-y: auto;
  text-align: left;
  position: relative;
  font-size: 0.97em;
}

/* =========================
   Responsive y iPhone 4 específico
   ========================= */
@media (max-width: 400px), (max-device-width: 400px) {
  html, body {
    font-size: 14px !important;
    min-width: 320px;
    max-width: 100vw;
    overflow-x: hidden !important;
  }
  header, .navbar {
    height: 38px !important;
    font-size: 0.95rem !important;
    padding: 0 1px !important;
  }
  .offline-banner {
    font-size: 0.92em;
    padding: 6px 0;
    top: 38px;
  }
  table, th, td {
    font-size: 0.89em !important;
    padding: 6px 3px !important;
  }
  .modal-content {
    padding: 0.7rem !important;
    max-width: 99vw !important;
    width: 99vw !important;
  }
  input, select, textarea, button {
    font-size: 0.97em !important;
    padding: 7px 8px !important;
  }
  .registros-table-wrapper, .resultados-table-container {
    max-width: 100vw !important;
    overflow-x: auto !important;
  }
  .sin-resultados, .error-message {
    font-size: 0.98em !important;
    padding: 0.7em 0 !important;
  }
  .menu-mobile-content, .navbar-mobile-content {
    width: 98vw;
    max-width: 98vw;
    padding: 14px 0 14px 0;
  }
}

/* =========================
   Utilidades
   ========================= */
.text-center { text-align: center !important; }
.text-right { text-align: right !important; }
.font-bold { font-weight: 700 !important; }
.font-semibold { font-weight: 600 !important; }
.flex { display: flex !important; }
.flex-col { flex-direction: column !important; }
.items-center { align-items: center !important; }
.gap-1 { gap: 0.25rem !important; }
.gap-2 { gap: 0.5rem !important; }
.gap-4 { gap: 1rem !important; }
.rounded-lg { border-radius: var(--radius-lg) !important; }
.rounded-md { border-radius: var(--radius-md) !important; }
.rounded { border-radius: var(--radius-sm) !important; }
.shadow { box-shadow: var(--shadow-md) !important; }
.shadow-lg { box-shadow: var(--shadow-lg) !important; }
.pt-16 { padding-top: 3.1rem !important; }
.mt-10 { margin-top: 2.5rem !important; }

/* =========================
   Accesibilidad
   ========================= */
:focus-visible {
  outline: 2px solid var(--focus);
  outline-offset: 2px;
}

/* =========================
   Sin resultados
   ========================= */
.sin-resultados {
  color: var(--text-muted);
  font-size: 1.05em;
  text-align: center;
  padding: 0.9em 0;
  letter-spacing: 1px;
}

/* =========================
   Miniaturas
   ========================= */
.thumbnail {
  width: 34px;
  height: 34px;
  object-fit: cover;
  border-radius: var(--radius-sm);
  box-shadow: 0 2px 6px #00e6fb88;
  border: 2px solid #00e6fb;
}
