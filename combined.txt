LISTA DE ARCHIVOS PROCESADOS:
C:\parking-app\eslint.config.js
C:\parking-app\package.json
C:\parking-app\vercel.json
C:\parking-app\vite.config.js
C:\parking-app\public\manifest.json
C:\parking-app\public\service-worker.js
C:\parking-app\src\App.jsx
C:\parking-app\src\GestionUsuarios.jsx
C:\parking-app\src\main.jsx
C:\parking-app\src\supabaseClient.js
C:\parking-app\src\components\AcercaDe.jsx
C:\parking-app\src\components\Auth.jsx
C:\parking-app\src\components\CapturaCamara.jsx
C:\parking-app\src\components\Consultas.jsx
C:\parking-app\src\components\DescargoGestion.jsx
C:\parking-app\src\components\Emoji.jsx
C:\parking-app\src\components\GestionCopropietarios.jsx
C:\parking-app\src\components\ListaRegistros.jsx
C:\parking-app\src\components\Loader.jsx
C:\parking-app\src\components\MenuDesplegable.jsx
C:\parking-app\src\components\Navbar.jsx
C:\parking-app\src\components\RegistroParqueo.jsx
C:\parking-app\src\components\ResumenRecaudo.jsx
C:\parking-app\src\components\ResumenRegistros.jsx
C:\parking-app\src\components\SelectorDeFoto.jsx
C:\parking-app\src\hooks\useHover.jsx
C:\parking-app\src\hooks\useOnlineStatus.jsx
C:\parking-app\src\styles\global.css

============================================================



----- C:\parking-app\eslint.config.js -----

// eslint.config.js
export default [
  {
    files: ['**/*.{js,jsx,ts,tsx}'],
    plugins: {
      react: require('eslint-plugin-react'),
    },
    languageOptions: {
      ecmaVersion: 2021,
      sourceType: 'module',
      globals: { React: 'writable' },
    },
    rules: {
      'react/jsx-uses-react': 'error',
      'react/jsx-uses-vars': 'error',
      'react/react-in-jsx-scope': 'off',
      'react/prop-types': 'off',
      'no-unused-vars': 'warn',
      'no-undef': 'error',
      'semi': ['error', 'always'],
      'quotes': ['error', 'single'],
    },
  },
];


----- C:\parking-app\package.json -----

{
  "name": "parqueadero-app",
  "version": "1.0.0",
  "description": "Gesti√≥n de parqueaderos de visita - Conjunto Habitacional Thomas II",
  "author": "Gabriel Ortega",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext .js,.jsx"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.39.7",
    "dayjs": "^1.11.10",
    "framer-motion": "^12.10.0",
    "react": "^18.2.0",
    "react-datepicker": "^4.24.0",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.49.2",
    "react-media-recorder": "^1.6.3",
    "scoop": "^0.0.2"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.2.1",
    "eslint": "^8.56.0",
    "eslint-plugin-react": "^7.33.2",
    "vite": "^6.3.5"
  }
}


----- C:\parking-app\vercel.json -----

{
  "version": 2,
  "builds": [
    {
      "src": "index.html",
      "use": "@vercel/static-build",
      "config": { "distDir": "dist" }
    }
  ],
  "routes": [
    { "src": "/(.*)", "dest": "/" }
  ]
}


----- C:\parking-app\vite.config.js -----

// vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    open: true
  },
  build: {
    outDir: 'dist',
    sourcemap: true
  }
})


----- C:\parking-app\public\manifest.json -----

{
  "name": "Gesti√≥n Parqueaderos",
  "short_name": "Parqueaderos",
  "start_url": ".",
  "display": "standalone",
  "background_color": "#6c63ff",
  "theme_color": "#6c63ff",
  "icons": [
    {
      "src": "/logo192.png",
      "sizes": "192x192",
      "type": "image/png"
    }
  ]
}


----- C:\parking-app\public\service-worker.js -----

const CACHE_NAME = 'parqueadero-cache-v1';
const ASSETS = [
  '/',
  '/index.html',
  '/manifest.json',
  // Agrega aqu√≠ los archivos importantes de tu app
];

// Guardar archivos al instalar
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME).then(cache => cache.addAll(ASSETS))
  );
});

// Servir archivos desde el cach√© cuando no hay internet
self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request).then(response => response || fetch(event.request))
  );
});


----- C:\parking-app\src\App.jsx -----

// src/App.jsx
import { useState, useEffect, Suspense, lazy } from 'react'
import { supabase } from './supabaseClient'
import Auth from './components/Auth'
import RegistroParqueo from './components/RegistroParqueo'
// import ResumenRegistros from './components/ResumenRegistros' // Ya no se usa aqu√≠
import Loader from './components/Loader'
import parqueaderoImg from './images/parqueadero.jpg'
import MenuDesplegable from './components/MenuDesplegable'
import Emoji from './components/Emoji'
import './styles/global.css'

// Lazy loading para m√≥dulos secundarios
const Consultas = lazy(() => import('./components/Consultas'))
const ResumenRecaudo = lazy(() => import('./components/ResumenRecaudo'))
const GestionCopropietarios = lazy(() => import('./components/GestionCopropietarios'))
const DescargoGestion = lazy(() => import('./components/DescargoGestion'))
const AcercaDe = lazy(() => import('./components/AcercaDe'))
const GestionUsuarios = lazy(() => import('./GestionUsuarios'))

function useOnlineStatus() {
  const [isOnline, setIsOnline] = useState(navigator.onLine)
  useEffect(() => {
    const update = () => setIsOnline(navigator.onLine)
    window.addEventListener('online', update)
    window.addEventListener('offline', update)
    return () => {
      window.removeEventListener('online', update)
      window.removeEventListener('offline', update)
    }
  }, [])
  return isOnline
}

export default function App() {
  const [session, setSession] = useState(null)
  const [usuarioApp, setUsuarioApp] = useState(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [refreshKey, setRefreshKey] = useState(0)
  const [currentView, setCurrentView] = useState('registro')
  const [registrosFiltrados, setRegistrosFiltrados] = useState([])

  // Tema (oscuro/claro)
  const getInitialTheme = () => {
    const stored = localStorage.getItem('theme')
    if (stored === 'dark' || stored === 'light') return stored
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
  }
  const [theme, setTheme] = useState(getInitialTheme)

  const isOnline = useOnlineStatus()

  useEffect(() => {
    document.documentElement.setAttribute('data-theme', theme)
    localStorage.setItem('theme', theme)
  }, [theme])

  useEffect(() => {
    let ignore = false
    const getSessionAndUsuario = async () => {
      try {
        setLoading(true)
        setError(null)
        const { data: { session }, error } = await supabase.auth.getSession()
        if (error) throw error
        setSession(session)
        if (session?.user) {
          const { data: usuario, error: userError } = await supabase
            .from('usuarios_app')
            .select('*')
            .eq('email', session.user.email)
            .single()
          if (userError) throw userError
          if (!ignore) setUsuarioApp(usuario)
        }
      } catch (error) {
        setError(error.message)
      } finally {
        setLoading(false)
      }
    }

    getSessionAndUsuario()
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
      getSessionAndUsuario()
    })

    return () => {
      ignore = true
      subscription?.unsubscribe()
    }
  }, [])

  if (loading) return <Loader fullScreen text="‚è≥ Cargando la experiencia..." />

  return (
    <div className="app-root" style={{ minHeight: '100vh', transition: 'background 0.3s' }}>
      <header className="header-gradient">
        <div className="topbar-center">
          <div
            style={{
              display: 'flex',
              alignItems: 'center',
              gap: 8,
              background: isOnline ? '#e6f9f3' : '#fff3cd',
              color: isOnline ? '#10b981' : '#856404',
              border: isOnline ? '1.5px solid #10b981' : '1.5px solid #f59e42',
              borderRadius: 8,
              padding: '3px 14px',
              fontWeight: 700,
              fontSize: '1em',
              marginRight: 18,
              minWidth: 110,
              boxShadow: isOnline ? '0 2px 6px #10b98122' : '0 2px 6px #f59e4222',
              transition: 'all 0.3s'
            }}
            aria-live="polite"
          >
            <span
              style={{
                display: 'inline-block',
                width: 12,
                height: 12,
                borderRadius: '50%',
                background: isOnline ? '#10b981' : '#f59e42',
                marginRight: 7,
                border: '2px solid #fff'
              }}
            />
            {isOnline
              ? <><Emoji symbol="üü¢" label="En l√≠nea" /> <b>En l√≠nea</b> <Emoji symbol="üîó" label="Conectado" /></>
              : <><Emoji symbol="üü†" label="Sin conexi√≥n" /> <b>Sin conexi√≥n</b> <Emoji symbol="‚ö°" label="Desconectado" /></>}
          </div>
          <button
            className="theme-toggle"
            aria-label={`Cambiar a modo ${theme === 'dark' ? 'claro' : 'oscuro'}`}
            onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
            title="Cambiar tema"
            type="button"
            style={{ marginLeft: 8 }}
          >
            {theme === 'dark'
              ? <><Emoji symbol="üåû" label="Modo claro" /> <span style={{ fontWeight: 600 }}>Claro</span></>
              : <><Emoji symbol="üåô" label="Modo oscuro" /> <span style={{ fontWeight: 600 }}>Oscuro</span></>}
          </button>
          <span className="barra-vertical" />
          {session && usuarioApp && (
            <>
              <span className="user-info">
                <Emoji symbol="üë§" label="Usuario" /> <b>{usuarioApp.nombre}</b>
                <span className="rol-badge">({usuarioApp.rol === 'admin' ? <><Emoji symbol="üëë" /> Admin</> : <><Emoji symbol="üìù" /> Registrador</>})</span>
              </span>
              <span className="barra-vertical" />
              <button
                className="logout-btn"
                onClick={async () => {
                  await supabase.auth.signOut()
                  setUsuarioApp(null)
                  setSession(null)
                }}
              >
                <Emoji symbol="üö™" label="Cerrar sesi√≥n" /> Salir
              </button>
            </>
          )}
        </div>
        <div className="header-content">
          <h1 className="conjunto-title" style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
            <Emoji symbol="üè¢" label="Conjunto" /> <span>CONJUNTO HABITACIONAL THOMAS II</span> <Emoji symbol="‚≠ê" label="Estrella" />
          </h1>
          <div
            className="subtitle"
            style={{
              display: 'flex',
              alignItems: 'center',
              gap: 18
            }}
          >
            <img
              src={parqueaderoImg}
              alt="Parqueadero"
              style={{
                height: 152,
                width: 'auto',
                maxWidth: '100%',
                borderRadius: 16,
                marginRight: 12,
                boxShadow: '0 2px 12px #0002',
                objectFit: 'contain'
              }}
            />
            <span>
              <Emoji symbol="üöó" label="Parqueo" /> <b>Gesti√≥n de Parqueaderos Comunales</b> <Emoji symbol="üÖøÔ∏è" label="Parking" />
            </span>
          </div>
        </div>
      </header>

      {/* Men√∫ principal */}
      <MenuDesplegable
        currentView={currentView}
        setCurrentView={setCurrentView}
        usuarioApp={usuarioApp}
      />

      {error && (
        <div className="error-banner">
          <Emoji symbol="‚ùó" label="Error" /> <b>Error:</b> {error} <Emoji symbol="üò¢" label="Triste" />
          <button onClick={() => setError(null)} className="close-error">
            <Emoji symbol="‚úñÔ∏è" label="Cerrar" />
          </button>
        </div>
      )}

      <main className="main-content">
        {!session ? (
          <Auth />
        ) : (
          <>
            {currentView === 'registro' ? (
              usuarioApp && usuarioApp.id ? (
                <>
                  <RegistroParqueo
                    usuarioApp={usuarioApp}
                    onRegistroExitoso={() => setRefreshKey(prev => prev + 1)}
                  />
                  {/* ResumenRegistros quitado aqu√≠ para no mostrar el resumen debajo del bot√≥n */}
                </>
              ) : (
                <Loader text="‚è≥ Cargando usuario..." />
              )
            ) : (
              <Suspense fallback={<Loader text="üöÄ Cargando m√≥dulo..." />}>
                {currentView === 'consulta' ? (
                  <Consultas />
                ) : currentView === 'recaudo' ? (
                  <ResumenRecaudo refreshKey={refreshKey} />
                ) : currentView === 'descargo' ? (
                  <DescargoGestion />
                ) : currentView === 'acerca' ? (
                  <AcercaDe />
                ) : currentView === 'copropietarios' ? (
                  <GestionCopropietarios />
                ) : currentView === 'usuarios' && usuarioApp?.rol === 'admin' ? (
                  <GestionUsuarios usuarioActual={usuarioApp} />
                ) : null}
              </Suspense>
            )}
          </>
        )}
      </main>
      <footer className="footer" style={{
        fontSize: 16,
        padding: 18,
        background: 'linear-gradient(90deg,#6366f1 0%,#38bdf8 100%)',
        color: '#fff',
        borderTopLeftRadius: 24,
        borderTopRightRadius: 24,
        marginTop: 40,
        boxShadow: '0 -2px 12px #6366f144'
      }}>
        <Emoji symbol="üí°" label="Innovaci√≥n" /> {new Date().getFullYear()} &mdash; <b>CONJUNTO HABITACIONAL THOMAS II</b>
        <span style={{ marginLeft: 8 }}>
          <Emoji symbol="‚ù§Ô∏è" label="amor" /> Desarrollado con pasi√≥n y tecnolog√≠a <Emoji symbol="üöÄ" label="Rocket" />
        </span>
      </footer>
    </div>
  )
}


----- C:\parking-app\src\GestionUsuarios.jsx -----

import { useState, useEffect } from 'react'
import { supabase } from './supabaseClient'
import Loader from "./components/Loader"
import Emoji from './components/Emoji'

export default function GestionUsuarios({ usuarioActual }) {
  const [usuarios, setUsuarios] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [modal, setModal] = useState({ open: false, usuario: null })
  const [form, setForm] = useState({ email: '', nombre: '', rol: 'registrador', activo: true })
  const [saving, setSaving] = useState(false)
  const [deleting, setDeleting] = useState(false)

  // Leer usuarios
  const fetchUsuarios = async () => {
    setLoading(true)
    const { data, error } = await supabase
      .from('usuarios_app')
      .select('id, email, nombre, rol, activo')
      .order('email', { ascending: true })
    if (error) setError(error.message)
    else setUsuarios(data)
    setLoading(false)
  }

  useEffect(() => { fetchUsuarios() }, [])

  // Abrir modal para editar
  const handleEdit = (usuario) => {
    setForm({
      email: usuario.email,
      nombre: usuario.nombre,
      rol: usuario.rol,
      activo: usuario.activo
    })
    setModal({ open: true, usuario })
  }

  // Abrir modal para crear
  const handleNew = () => {
    setForm({ email: '', nombre: '', rol: 'registrador', activo: true })
    setModal({ open: true, usuario: null })
  }

  // Guardar usuario (crear o editar)
  const handleSave = async (e) => {
    e.preventDefault()
    setSaving(true)
    setError(null)
    if (!form.email || !form.nombre || !form.rol) {
      setError('Todos los campos son obligatorios')
      setSaving(false)
      return
    }
    try {
      if (modal.usuario) {
        // Editar
        const { error } = await supabase
          .from('usuarios_app')
          .update({
            email: form.email.trim().toLowerCase(),
            nombre: form.nombre,
            rol: form.rol,
            activo: form.activo
          })
          .eq('id', modal.usuario.id)
        if (error) throw error
      } else {
        // Crear
        const { error } = await supabase
          .from('usuarios_app')
          .insert([{ ...form, email: form.email.trim().toLowerCase() }])
        if (error) throw error
      }
      setModal({ open: false, usuario: null })
      fetchUsuarios()
    } catch (err) {
      setError(err.message)
    } finally {
      setSaving(false)
    }
  }

  // Eliminar usuario
  const handleDelete = async (usuario) => {
    if (!window.confirm('¬øSeguro que deseas eliminar este usuario?')) return
    setDeleting(true)
    setError(null)
    try {
      if (usuario.id === usuarioActual.id) {
        setError('No puedes eliminar tu propio usuario.')
        setDeleting(false)
        return
      }
      const { error } = await supabase
        .from('usuarios_app')
        .delete()
        .eq('id', usuario.id)
      if (error) throw error
      fetchUsuarios()
    } catch (err) {
      setError(err.message)
    } finally {
      setDeleting(false)
    }
  }

  if (loading) return <Loader text="Cargando usuarios..." />

  return (
    <div className="gestion-usuarios-container">
      <h2>
        <Emoji symbol="üë•" label="Usuarios" /> Gesti√≥n de Usuarios
      </h2>
      <button className="edit-btn" onClick={handleNew} style={{ marginBottom: 18 }}>
        <Emoji symbol="‚ûï" /> Nuevo usuario
      </button>
      <div style={{ fontSize: 13, color: '#888', marginBottom: 12 }}>
        <Emoji symbol="‚ö†Ô∏è" /> Solo usuarios <b>administrador</b> pueden agregar, editar o eliminar usuarios.
      </div>
      <table className="resultados-table" style={{ marginTop: 0 }}>
        <thead>
          <tr>
            <th><Emoji symbol="‚úâÔ∏è" label="Email" /> Email</th>
            <th><Emoji symbol="üßë" label="Nombre" /> Nombre</th>
            <th><Emoji symbol="üéñÔ∏è" label="Rol" /> Rol</th>
            <th><Emoji symbol="‚úî" label="Activo" /> Activo</th>
            <th><Emoji symbol="‚öôÔ∏è" label="Acciones" /> Acciones</th>
          </tr>
        </thead>
        <tbody>
          {usuarios.map(u => (
            <tr key={u.id}>
              <td>{u.email}</td>
              <td>{u.nombre}</td>
              <td>
                {u.rol === 'admin' ? <><Emoji symbol="üëë" /> Administrador</> : <><Emoji symbol="üìã" /> Registrador</>}
              </td>
              <td>{u.activo ? <Emoji symbol="‚úî" /> : <Emoji symbol="‚ùå" />}</td>
              <td>
                <button className="edit-btn" onClick={() => handleEdit(u)} title="Editar">
                  <Emoji symbol="‚úèÔ∏è" label="Editar" />
                </button>
                <button className="delete-btn" onClick={() => handleDelete(u)} title="Eliminar" disabled={deleting || u.id === usuarioActual.id}>
                  <Emoji symbol="üóëÔ∏è" label="Eliminar" />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      {error && <div className="error-message">{error}</div>}

      {/* Modal para crear/editar */}
      {modal.open && (
        <div className="modal-backdrop">
          <div className="modal-content">
            <h3>
              <Emoji symbol={modal.usuario ? "‚úèÔ∏è" : "‚ûï"} label={modal.usuario ? "Editar" : "Nuevo"} />{' '}
              {modal.usuario ? 'Editar' : 'Nuevo'} Usuario
            </h3>
            <form className="modal-form" onSubmit={handleSave}>
              <label>
                <Emoji symbol="‚úâÔ∏è" /> Email:
                <input
                  type="email"
                  value={form.email}
                  onChange={e => setForm({ ...form, email: e.target.value })}
                  required
                  disabled={!!modal.usuario}
                />
              </label>
              <label>
                <Emoji symbol="üßë" /> Nombre:
                <input
                  type="text"
                  value={form.nombre}
                  onChange={e => setForm({ ...form, nombre: e.target.value })}
                  required
                />
              </label>
              <label>
                <Emoji symbol="üéñÔ∏è" /> Rol:
                <select
                  value={form.rol}
                  onChange={e => setForm({ ...form, rol: e.target.value })}
                  required
                >
                  <option value="admin">Administrador</option>
                  <option value="registrador">Registrador</option>
                </select>
              </label>
              <label>
                <input
                  type="checkbox"
                  checked={form.activo}
                  onChange={e => setForm({ ...form, activo: e.target.checked })}
                /> <Emoji symbol="‚úî" /> Usuario activo
              </label>
              <div style={{ marginTop: 14 }}>
                <button type="submit" className="save-btn" disabled={saving}>
                  <Emoji symbol="üíæ" /> Guardar
                </button>
                <button type="button" className="cancel-btn" onClick={() => setModal({ open: false, usuario: null })}>
                  <Emoji symbol="‚ùå" /> Cancelar
                </button>
              </div>
              {error && <div className="error-message">{error}</div>}
            </form>
          </div>
        </div>
      )}
    </div>
  )
}


----- C:\parking-app\src\main.jsx -----

// src/main.jsx
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.jsx'

if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/service-worker.js');
  });
}

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)


----- C:\parking-app\src\supabaseClient.js -----

// src/supabaseClient.js
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)


----- C:\parking-app\src\components\AcercaDe.jsx -----

// src/components/AcercaDe.jsx
import Emoji from './Emoji'

export default function AcercaDe() {
  return (
    <section
      className="acerca-de-container"
      style={{
        background: '#f8fafc',
        borderRadius: 16,
        boxShadow: '0 4px 6px rgba(0,0,0,0.05)',
        padding: '2rem',
        maxWidth: 700,
        margin: '2rem auto',
        textAlign: 'left'
      }}
    >
      <h2 style={{ fontWeight: 700, fontSize: '1.5rem', marginBottom: 12 }}>
        <Emoji symbol="‚ÑπÔ∏è" label="Acerca de" /> Acerca de la aplicaci√≥n
      </h2>
      <p style={{ fontSize: '1.08rem', marginBottom: 14 }}>
        <Emoji symbol="üöó" label="Parqueadero" /> <b>Aplicaci√≥n para Gesti√≥n de Parqueaderos de Visita</b> dise√±ada para el <b>Conjunto Habitacional Thomas II</b>. Permite registrar, consultar y gestionar el uso de parqueaderos de visita de manera eficiente, transparente y segura.
      </p>
      <p style={{ fontSize: '1.08rem', marginBottom: 14 }}>
        <Emoji symbol="üë®‚Äçüíª" label="Desarrollador" /> <b>Desarrollado por:</b> Gabriel Ortega - Presidente CEO Thomas II
      </p>
      <p style={{ fontSize: '1.08rem', marginBottom: 14 }}>
        <Emoji symbol="‚úâÔ∏è" label="Email" /> <b>Contacto:</b> <a href="mailto:gabrielortega@outlook.com">gabrielortega@outlook.com</a>
        <br />
        <Emoji symbol="üì±" label="Celular" /> <b>Celular:</b> <a href="tel:0999268450">0999268450</a>
      </p>
    </section>
  )
}


----- C:\parking-app\src\components\Auth.jsx -----

// src/components/Auth.jsx
import { useState, useEffect } from 'react'
import { supabase } from '../supabaseClient'
import Loader from './Loader'

export default function Auth() {
  const [usuarios, setUsuarios] = useState([])
  const [email, setEmail] = useState('')
  const [rol, setRol] = useState('')
  const [loading, setLoading] = useState(true)
  const [sending, setSending] = useState(false)
  const [error, setError] = useState(null)
  const [otpSent, setOtpSent] = useState(false)
  const [otp, setOtp] = useState('')

  useEffect(() => {
    let ignore = false
    async function fetchUsuarios() {
      setLoading(true)
      setError(null)
      const { data, error } = await supabase
        .from('usuarios_app')
        .select('email, rol, activo')
        .eq('activo', true)
        .order('email', { ascending: true })
      if (!ignore) {
        if (error) setError('Error al cargar usuarios: ' + error.message)
        setUsuarios(data || [])
        setLoading(false)
      }
    }
    fetchUsuarios()
    return () => { ignore = true }
  }, [])

  useEffect(() => {
    const user = usuarios.find(u => u.email === email)
    setRol(user?.rol || '')
  }, [email, usuarios])

  // Paso 1: Enviar OTP al email
  const handleSendOtp = async (e) => {
    e.preventDefault()
    setSending(true)
    setError(null)
    if (!email) {
      setError('Debe seleccionar un email')
      setSending(false)
      return
    }
    localStorage.setItem('tempRol', rol)
    const { error: authError } = await supabase.auth.signInWithOtp({
      email,
      options: {
        shouldCreateUser: true,
        data: { rol }
      }
    })
    if (authError) setError('Error: ' + authError.message)
    else setOtpSent(true)
    setSending(false)
  }

  // Paso 2: Verificar OTP
  const handleVerifyOtp = async (e) => {
    e.preventDefault()
    setSending(true)
    setError(null)
    const { data, error: verifyError } = await supabase.auth.verifyOtp({
      email,
      token: otp,
      type: 'email'
    })
    if (verifyError) setError('C√≥digo inv√°lido o expirado')
    setSending(false)
  }

  if (loading) return <Loader text="Cargando usuarios..." />

  return (
    <div className="auth-container" style={{
      maxWidth: 340,
      margin: '0 auto',
      padding: 32,
      background: '#fff',
      borderRadius: 12,
      boxShadow: '0 2px 12px #6c63ff22'
    }}>
      <h1 style={{ fontSize: '1.6rem', marginBottom: 24 }}>üîê Acceso Usuario</h1>
      {!otpSent ? (
        <form onSubmit={handleSendOtp} style={{ display: 'flex', flexDirection: 'column', gap: 16 }}>
          <label>
            Email autorizado:
            <select
              value={email}
              onChange={e => setEmail(e.target.value)}
              required
              style={{
                padding: 12,
                borderRadius: 8,
                border: '1px solid #d1c4e9',
                fontSize: 16,
                backgroundColor: '#fff',
                marginTop: 6
              }}
            >
              <option value="">Seleccione su email...</option>
              {usuarios.map(u => (
                <option key={u.email} value={u.email}>{u.email}</option>
              ))}
            </select>
          </label>
          <label>
            Rol:
            <input
              type="text"
              value={rol}
              disabled
              style={{
                padding: 12,
                borderRadius: 8,
                border: '1px solid #d1c4e9',
                fontSize: 16,
                backgroundColor: '#f5f5f5',
                marginTop: 6
              }}
            />
          </label>
          <button
            disabled={sending || !email}
            style={{
              padding: '12px 0',
              borderRadius: 8,
              background: 'linear-gradient(90deg, #6c63ff 60%, #ff6f91 100%)',
              color: '#fff',
              fontWeight: 700,
              fontSize: 18,
              border: 'none',
              cursor: sending ? 'wait' : 'pointer',
              transition: 'background 0.2s'
            }}
          >
            {sending ? 'Enviando...' : 'üì© Enviar c√≥digo'}
          </button>
        </form>
      ) : (
        <form onSubmit={handleVerifyOtp} style={{ display: 'flex', flexDirection: 'column', gap: 16 }}>
          <label>
            Ingrese el c√≥digo recibido en su email:
            <input
              type="text"
              value={otp}
              onChange={e => setOtp(e.target.value)}
              required
              maxLength={6}
              style={{
                padding: 12,
                borderRadius: 8,
                border: '1px solid #d1c4e9',
                fontSize: 16,
                backgroundColor: '#fff',
                marginTop: 6,
                letterSpacing: 3,
                textAlign: 'center'
              }}
            />
          </label>
          <button
            disabled={sending || !otp}
            style={{
              padding: '12px 0',
              borderRadius: 8,
              background: 'linear-gradient(90deg, #6c63ff 60%, #ff6f91 100%)',
              color: '#fff',
              fontWeight: 700,
              fontSize: 18,
              border: 'none',
              cursor: sending ? 'wait' : 'pointer',
              transition: 'background 0.2s'
            }}
          >
            {sending ? 'Verificando...' : 'üîì Ingresar'}
          </button>
          <button
            type="button"
            onClick={() => { setOtpSent(false); setOtp('') }}
            style={{
              background: 'none',
              color: '#6c63ff',
              border: 'none',
              marginTop: 8,
              cursor: 'pointer',
              textDecoration: 'underline'
            }}
          >
            Volver a enviar c√≥digo
          </button>
        </form>
      )}
      {error && (
        <div style={{ color: 'red', marginTop: 10, fontWeight: 600 }}>
          {error}
        </div>
      )}
      <div style={{ fontSize: 13, color: '#888', marginTop: 18 }}>
        Solo emails autorizados y activos pueden ingresar.
      </div>
      <div
        style={{
          marginTop: 14,
          background: '#fffbe6',
          color: '#b26d00',
          border: '1px solid #ffe58f',
          borderRadius: 8,
          padding: '10px 14px',
          fontSize: 14,
          fontWeight: 600
        }}
      >
        ‚ö†Ô∏è Para agregar un usuario, primero debe ingresar con un usuario <b>administrador</b>.
      </div>
    </div>
  )
}


----- C:\parking-app\src\components\CapturaCamara.jsx -----

// src/components/CapturaCamara.jsx
import React, { useState, useEffect, useRef } from 'react'
import Emoji from './Emoji'

export default function CapturaCamara({ onCaptura }) {
  const videoRef = useRef(null)
  const canvasRef = useRef(null)
  const [error, setError] = useState(null)
  const [foto, setFoto] = useState(null)
  const [modoCamara, setModoCamara] = useState('environment')
  const [stream, setStream] = useState(null)

  // Iniciar c√°mara
  const iniciarCamara = async () => {
    try {
      const constraints = {
        video: {
          facingMode: modoCamara,
          width: { ideal: 1280 },
          height: { ideal: 720 }
        },
        audio: false
      }

      const mediaStream = await navigator.mediaDevices.getUserMedia(constraints)
      setStream(mediaStream)

      if (videoRef.current) {
        videoRef.current.srcObject = mediaStream
      }
    } catch (err) {
      setError(`Error de c√°mara: ${err.message}`)
    }
  }

  // Capturar foto
  const capturarFoto = () => {
    const video = videoRef.current
    const canvas = canvasRef.current
    const ctx = canvas.getContext('2d')

    canvas.width = video.videoWidth
    canvas.height = video.videoHeight
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height)

    canvas.toBlob(blob => {
      const file = new File([blob], 'foto-capturada.jpg', { type: 'image/jpeg' })
      setFoto(URL.createObjectURL(file))
      onCaptura(file)
    }, 'image/jpeg', 0.9)
  }

  // Cambiar c√°mara frontal/trasera
  const cambiarCamara = () => {
    setModoCamara(prev => prev === 'user' ? 'environment' : 'user')
  }

  useEffect(() => {
    iniciarCamara()
    return () => {
      if (stream) {
        stream.getTracks().forEach(track => track.stop())
      }
    }
    // eslint-disable-next-line
  }, [modoCamara])

  if (error) return (
    <div className="error-camara">
      <Emoji symbol="üì∑" /> {error}
      <div style={{ fontSize: 14, marginTop: 8 }}>
        Aseg√∫rate de permitir el acceso a la c√°mara
      </div>
    </div>
  )

  return (
    <div className="contenedor-camara">
      {!foto ? (
        <>
          <video
            ref={videoRef}
            autoPlay
            playsInline
            style={{
              width: '100%',
              maxWidth: '400px',
              borderRadius: '12px',
              transform: modoCamara === 'user' ? 'scaleX(-1)' : 'none'
            }}
          />

          <div className="controles-camara">
            <button
              type="button"
              onClick={capturarFoto}
              className="btn-capturar"
            >
              <Emoji symbol="üì∏" /> Capturar
            </button>

            <button
              type="button"
              onClick={cambiarCamara}
              className="btn-cambiar-camara"
            >
              <Emoji symbol="üîÑ" /> Cambiar
            </button>
          </div>
        </>
      ) : (
        <>
          <img
            src={foto}
            alt="Previsualizaci√≥n"
            style={{
              width: '100%',
              maxWidth: '400px',
              borderRadius: '12px',
              border: '2px solid #e0e0e0'
            }}
          />

          <div className="acciones-foto">
            <button
              type="button"
              onClick={() => setFoto(null)}
              className="btn-reintentar"
            >
              <Emoji symbol="üîÑ" /> Volver a tomar
            </button>
          </div>
        </>
      )}

      <canvas ref={canvasRef} style={{ display: 'none' }} />
    </div>
  )
}


----- C:\parking-app\src\components\Consultas.jsx -----

// src/components/Consultas.jsx
import React, { useState, useEffect } from 'react'
import { supabase } from '../supabaseClient'
import Loader from './Loader'
import Emoji from './Emoji'
import ResumenRegistros from './ResumenRegistros'
import useOnlineStatus from '../hooks/useOnlineStatus'
import dayjs from 'dayjs'

export default function Consultas() {
  const [filtros, setFiltros] = useState({
    fechaInicio: '',
    fechaFin: '',
    placa: '',
    propiedad: '',
    unidadAsignada: '',
    tipoVehiculo: ''
  })
  const [todos, setTodos] = useState([])
  const [resultados, setResultados] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [copropietarios, setCopropietarios] = useState([])
  const [editModal, setEditModal] = useState({ open: false, registro: null })
  const [editData, setEditData] = useState({})
  const isOnline = useOnlineStatus()

  useEffect(() => {
    const fetchCopropietarios = async () => {
      const { data, error } = await supabase
        .from('copropietarios')
        .select('id, nombre, propiedad, unidad_asignada')
      if (!error) setCopropietarios(data)
    }
    fetchCopropietarios()
  }, [])

  useEffect(() => {
    const fetchTodos = async () => {
      setLoading(true)
      setError(null)
      try {
        const { data, error } = await supabase
          .from('registros_parqueadero')
          .select(`
            id,
            placa_vehiculo,
            tipo_vehiculo,
            fecha_hora_ingreso,
            observaciones,
            foto_url,
            gratis,
            monto,
            recaudado,
            fecha_recaudo,
            dependencia_id,
            observacion_audio_url,
            copropietarios:dependencia_id(nombre, propiedad, unidad_asignada),
            usuario:usuario_id!inner(id, nombre)
          `)
          .order('fecha_hora_ingreso', { ascending: false })
        if (error) throw error
        setTodos(data || [])
        setResultados(data || [])
      } catch (error) {
        setError(error.message)
        setTodos([])
        setResultados([])
      } finally {
        setLoading(false)
      }
    }
    fetchTodos()
  }, [])

  const propiedades = [...new Set(copropietarios.map(c => c.propiedad))].sort()
  const unidadesFiltradas = filtros.propiedad
    ? [...new Set(copropietarios.filter(c => c.propiedad === filtros.propiedad).map(c => c.unidad_asignada))]
    : []

  const copropietarioSeleccionado = copropietarios.find(
    c => c.propiedad === filtros.propiedad && c.unidad_asignada === filtros.unidadAsignada
  )

  const handleSubmit = (e) => {
    e.preventDefault()
    let filtrados = [...todos]
    if (filtros.fechaInicio)
      filtrados = filtrados.filter(r => r.fecha_hora_ingreso >= `${filtros.fechaInicio}T00:00:00`)
    if (filtros.fechaFin)
      filtrados = filtrados.filter(r => r.fecha_hora_ingreso <= `${filtros.fechaFin}T23:59:59`)
    if (filtros.placa)
      filtrados = filtrados.filter(r => r.placa_vehiculo?.toLowerCase().includes(filtros.placa.toLowerCase()))
    if (filtros.tipoVehiculo)
      filtrados = filtrados.filter(r => r.tipo_vehiculo === filtros.tipoVehiculo)
    if (filtros.propiedad && !filtros.unidadAsignada) {
      filtrados = filtrados.filter(r => r.copropietarios?.propiedad === filtros.propiedad)
    }
    if (filtros.propiedad && filtros.unidadAsignada && copropietarioSeleccionado) {
      filtrados = filtrados.filter(r => r.dependencia_id === copropietarioSeleccionado.id)
    }
    setResultados(filtrados)
  }

  const handleChange = (e) => {
    const { name, value } = e.target
    setFiltros(prev => ({
      ...prev,
      [name]: value,
      ...(name === 'propiedad' && { unidadAsignada: '' })
    }))
  }

  const limpiarFiltros = () => {
    setFiltros({
      fechaInicio: '',
      fechaFin: '',
      placa: '',
      propiedad: '',
      unidadAsignada: '',
      tipoVehiculo: ''
    })
    setResultados(todos)
  }

  const handleEdit = (registro) => {
    setEditModal({ open: true, registro })
    setEditData({
      placa_vehiculo: registro.placa_vehiculo,
      tipo_vehiculo: registro.tipo_vehiculo,
      fecha_hora_ingreso: registro.fecha_hora_ingreso?.slice(0, 10) || '',
      gratis: !!registro.gratis,
      observaciones: registro.observaciones || '',
      dependencia_id: registro.dependencia_id,
      recaudado: !!registro.recaudado,
      fecha_recaudo: registro.fecha_recaudo || ''
    })
  }

  const handleEditChange = (e) => {
    const { name, value, type, checked } = e.target
    setEditData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
      ...(name === 'recaudado' && !checked ? { fecha_recaudo: '' } : {})
    }))
  }

  const handleEditSave = async (e) => {
    e.preventDefault()
    const id = editModal.registro.id
    const monto = editData.gratis ? 0 : (editData.tipo_vehiculo === 'carro' ? 1.00 : 0.50)
    try {
      const { error } = await supabase
        .from('registros_parqueadero')
        .update({ ...editData, monto })
        .eq('id', id)
      if (error) throw error
      // Actualizar localmente
      const updated = todos.map(r => r.id === id ? { ...r, ...editData, monto } : r)
      setTodos(updated)
      setResultados(updated)
      setEditModal({ open: false, registro: null })
    } catch (error) {
      setError(error.message)
    }
  }

  const handleDelete = async (registro) => {
    if (!window.confirm('¬øSeguro que deseas eliminar este registro?')) return
    try {
      const { error } = await supabase
        .from('registros_parqueadero')
        .delete()
        .eq('id', registro.id)
      if (error) throw error
      const updated = todos.filter(r => r.id !== registro.id)
      setTodos(updated)
      setResultados(updated)
    } catch (err) {
      setError(err.message)
    }
  }

  return (
    <div className="consultas-container">
      <h2><Emoji symbol="üîé" label="Consultas" /> Consultas y Reportes</h2>
      <form onSubmit={handleSubmit} className="filtros-form">
        <div className="filtros-grid">
          <div className="filtro-item">
            <label>Fecha inicio:</label>
            <input
              type="date"
              name="fechaInicio"
              value={filtros.fechaInicio}
              onChange={handleChange}
            />
          </div>
          <div className="filtro-item">
            <label>Fecha fin:</label>
            <input
              type="date"
              name="fechaFin"
              value={filtros.fechaFin}
              onChange={handleChange}
            />
          </div>
          <div className="filtro-item">
            <label>Placa:</label>
            <input
              type="text"
              name="placa"
              placeholder="Buscar por placa"
              value={filtros.placa}
              onChange={handleChange}
            />
          </div>
          <div className="filtro-item">
            <label>Propiedad:</label>
            <select
              name="propiedad"
              value={filtros.propiedad}
              onChange={handleChange}
            >
              <option value="">Todas</option>
              {propiedades.map(prop => (
                <option key={prop} value={prop}>{prop}</option>
              ))}
            </select>
          </div>
          <div className="filtro-item">
            <label>Unidad asignada:</label>
            <select
              name="unidadAsignada"
              value={filtros.unidadAsignada}
              onChange={handleChange}
              disabled={!filtros.propiedad}
            >
              <option value="">Todas</option>
              {unidadesFiltradas.map(unidad => (
                <option key={unidad} value={unidad}>{unidad}</option>
              ))}
            </select>
          </div>
          <div className="filtro-item">
            <label>Tipo veh√≠culo:</label>
            <select
              name="tipoVehiculo"
              value={filtros.tipoVehiculo}
              onChange={handleChange}
            >
              <option value="">Todos</option>
              <option value="carro">Carro üöó</option>
              <option value="moto">Moto üèçÔ∏è</option>
            </select>
          </div>
        </div>
        <div className="acciones-filtros">
          <button
            type="submit"
            disabled={loading}
            className="btn-buscar"
          >
            {loading ? 'Buscando...' : 'Buscar'}
          </button>
          <button
            type="button"
            onClick={limpiarFiltros}
            className="btn-limpiar"
          >
            Limpiar
          </button>
        </div>
      </form>

      {error && <div className="error-message">{error}</div>}
      {loading && <Loader text="Buscando registros..." />}

      {resultados.length > 0 && (
        <ResumenRegistros registros={resultados} titulo="Resumen de Consultas" />
      )}

      {resultados.length > 0 ? (
        <div
          className="resultados-table-container"
          style={{
            maxHeight: '500px',
            overflowY: 'auto',
            overflowX: 'auto',
            border: '1px solid #ccc',
            borderRadius: 8,
          }}
        >
          <table
            className="resultados-table"
            style={{ width: 'max-content', minWidth: '100%' }}
          >
            <thead>
              <tr>
                <th><Emoji symbol="üìÖ" label="Fecha" /> Fecha</th>
                <th><Emoji symbol="üöó" label="Placa" /> Placa</th>
                <th><Emoji symbol="üèçÔ∏è" label="Tipo" /> Tipo</th>
                <th><Emoji symbol="üë•" label="Copropietario" /> Copropietario</th>
                <th><Emoji symbol="üíµ" label="Monto" /> Monto</th>
                <th><Emoji symbol="üü¢" label="Estado" /> Estado</th>
                <th><Emoji symbol="üì∑" label="Foto" /> Foto</th>
                <th><Emoji symbol="üë§" label="Registrado por" /> Registrado por</th>
                <th><Emoji symbol="‚öôÔ∏è" label="Acciones" /> Acciones</th>
              </tr>
            </thead>
            <tbody>
              {resultados.map(reg => (
                <tr key={reg.id} className={reg.gratis ? 'registro-gratis' : ''}>
                  <td>
                    {reg.fecha_hora_ingreso
                      ? dayjs(reg.fecha_hora_ingreso).format('DD/MM/YYYY')
                      : ''}
                  </td>
                  <td>{reg.placa_vehiculo}</td>
                  <td>
                    {reg.tipo_vehiculo?.toLowerCase() === 'carro' && <Emoji symbol="üöó" />}
                    {reg.tipo_vehiculo?.toLowerCase() === 'moto' && <Emoji symbol="üèçÔ∏è" />}
                    <span style={{ marginLeft: 6 }}>{reg.tipo_vehiculo?.toUpperCase()}</span>
                  </td>
                  <td>
                    {reg.copropietarios?.nombre || '-'}
                    <br />
                    <small>
                      {reg.copropietarios?.propiedad || 'Sin propiedad'} - {reg.copropietarios?.unidad_asignada || 'Sin unidad'}
                    </small>
                  </td>
                  <td>${Number(reg.monto).toFixed(2)}</td>
                  <td>
                    {reg.gratis ? <Emoji symbol="üÜì" label="Gratis" />
                      : reg.recaudado ? <Emoji symbol="üîó" label="Recaudado" />
                      : <Emoji symbol="‚è≥" label="Pendiente" />}
                  </td>
                  <td>
                    {reg.foto_url && (
                      <a href={reg.foto_url} target="_blank" rel="noopener noreferrer">
                        <img src={reg.foto_url} alt="Evidencia" className="thumbnail" />
                      </a>
                    )}
                  </td>
                  <td>{reg.usuario?.nombre || '-'}</td>
                  <td>
                    <button
                      className="edit-btn"
                      onClick={() => handleEdit(reg)}
                      title="Editar"
                      disabled={!isOnline}
                    >
                      <Emoji symbol="‚úèÔ∏è" label="Editar" />
                    </button>
                    <button
                      className="delete-btn"
                      onClick={() => handleDelete(reg)}
                      title="Eliminar"
                    >
                      <Emoji symbol="üóëÔ∏è" label="Eliminar" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ) : (
        !loading && <div className="sin-resultados">No se encontraron resultados</div>
      )}

      {editModal.open && (
        <div className="modal-backdrop">
          <div className="modal-content">
            <h3><Emoji symbol="‚úèÔ∏è" /> Editar Registro</h3>
            <form onSubmit={handleEditSave}>
              <label>
                Placa:
                <input
                  name="placa_vehiculo"
                  value={editData.placa_vehiculo}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                />
              </label>
              <label>
                Tipo:
                <select
                  name="tipo_vehiculo"
                  value={editData.tipo_vehiculo}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                >
                  <option value="carro">Carro üöó</option>
                  <option value="moto">Moto üèçÔ∏è</option>
                </select>
              </label>
              <label>
                Fecha ingreso:
                <input
                  type="date"
                  name="fecha_hora_ingreso"
                  value={editData.fecha_hora_ingreso}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                />
              </label>
              <label>
                Observaciones:
                <input
                  name="observaciones"
                  value={editData.observaciones}
                  onChange={handleEditChange}
                  disabled={!isOnline}
                />
              </label>
              <label>
                Copropietario:
                <select
                  name="dependencia_id"
                  value={editData.dependencia_id || ''}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                >
                  <option value="">Seleccione...</option>
                  {copropietarios.map(dep => (
                    <option key={dep.id} value={dep.id}>
                      {dep.nombre} ({dep.propiedad} - {dep.unidad_asignada})
                    </option>
                  ))}
                </select>
              </label>
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  name="gratis"
                  checked={!!editData.gratis}
                  onChange={handleEditChange}
                  disabled={!isOnline}
                />
                <Emoji symbol="üÜì" label="Gratis" /> Gratis
              </label>
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  name="recaudado"
                  checked={!!editData.recaudado}
                  onChange={handleEditChange}
                  disabled={!isOnline}
                />
                <Emoji symbol="üîó" label="Recaudado" /> Recaudado
              </label>
              {editData.recaudado && (
                <label>
                  Fecha Recaudo:
                  <input
                    type="date"
                    name="fecha_recaudo"
                    value={editData.fecha_recaudo || ''}
                    onChange={handleEditChange}
                    required={!!editData.recaudado}
                    disabled={!isOnline || !editData.recaudado}
                  />
                </label>
              )}
              <div className="acciones-modal">
                <button type="submit" className="save-btn" disabled={!isOnline}>
                  Guardar
                </button>
                <button
                  type="button"
                  className="cancel-btn"
                  onClick={() => setEditModal({ open: false, registro: null })}
                >
                  Cancelar
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}


----- C:\parking-app\src\components\DescargoGestion.jsx -----

// src/components/DescargoGestion.jsx
import React, { useState, useEffect } from "react";
import { useForm, Controller } from "react-hook-form";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { supabase } from "../supabaseClient";
import Emoji from "./Emoji";
import Loader from "./Loader";
import dayjs from "dayjs";

export default function DescargoGestion() {
  const {
    register,
    handleSubmit,
    control,
    reset,
    watch,
    setValue,
    formState: { errors, isSubmitting },
  } = useForm({
    defaultValues: {
      descripcion: "",
      fecha: new Date(),
      esfuerzo: [],
      monto: "",
      horas: "",
      materiales: "",
      observaciones: "",
      archivos: [],
    },
  });

  const [mensaje, setMensaje] = useState("");
  const [subiendo, setSubiendo] = useState(false);
  const [archivosPreview, setArchivosPreview] = useState([]);

  // Para mostrar registros en tabla
  const [registros, setRegistros] = useState([]);
  const [loadingRegistros, setLoadingRegistros] = useState(false);
  const [errorRegistros, setErrorRegistros] = useState(null);

  // Carga registros desde Supabase
  const fetchRegistros = async () => {
    setLoadingRegistros(true);
    setErrorRegistros(null);
    try {
      const { data, error } = await supabase
        .from("descargos_gestion")
        .select("*")
        .order("fecha", { ascending: false });
      if (error) throw error;
      setRegistros(data);
    } catch (error) {
      setErrorRegistros(error.message);
    } finally {
      setLoadingRegistros(false);
    }
  };

  useEffect(() => {
    fetchRegistros();
  }, []);

  // Previsualizaci√≥n de archivos
  const handleArchivos = (e) => {
    const files = Array.from(e.target.files);
    setValue("archivos", files);
    setArchivosPreview(
      files.map((f) => (f.type.startsWith("image/") ? URL.createObjectURL(f) : null))
    );
  };

  // Env√≠o del formulario
  const onSubmit = async (data) => {
    setMensaje("");
    setSubiendo(true);
    let archivosUrls = [];

    try {
      // Subida de archivos
      if (data.archivos?.length > 0) {
        for (let file of data.archivos) {
          const ext = file.name.split(".").pop();
          const nombre = `${Date.now()}_${Math.random().toString(36).substring(2, 8)}.${ext}`;
          const { error: uploadError } = await supabase.storage
            .from("descargos-evidencias")
            .upload(nombre, file);
          if (uploadError) throw uploadError;
          const { data: urlData } = supabase.storage
            .from("descargos-evidencias")
            .getPublicUrl(nombre);
          archivosUrls.push(urlData.publicUrl);
        }
      }

      // Crear registro
      const registro = {
        descripcion: data.descripcion,
        fecha: data.fecha.toISOString(),
        esfuerzo: data.esfuerzo,
        monto: data.monto ? Number(data.monto) : null,
        horas: data.horas ? Number(data.horas) : null,
        materiales: data.materiales || null,
        observaciones: data.observaciones || null,
        archivos: archivosUrls,
      };

      const { error } = await supabase.from("descargos_gestion").insert([registro]);

      if (error) throw error;

      setMensaje("‚úÖ ¬°Descargo registrado exitosamente!");
      reset();
      setArchivosPreview([]);
      fetchRegistros(); // refrescar tabla
    } catch (error) {
      setMensaje(`‚ö†Ô∏è Error: ${error.message}`);
    } finally {
      setSubiendo(false);
    }
  };

  const esfuerzoSeleccionado = watch("esfuerzo") || [];

  return (
    <div
      className="descargo-gestion-container"
      style={{
        background: "linear-gradient(135deg, #e0e7ff 0%, #f8fafc 100%)",
        borderRadius: 24,
        boxShadow: "0 6px 32px #6366f133",
        padding: "2.5rem 1.5rem",
        maxWidth: 700,
        margin: "2.5rem auto",
        transition: "background 0.4s",
      }}
    >
      <h2
        style={{
          display: "flex",
          alignItems: "center",
          gap: 10,
          fontWeight: 700,
          fontSize: "1.6rem",
          marginBottom: 16,
        }}
      >
        <Emoji symbol="üìù" /> Descargo de Gesti√≥n
      </h2>

      <form
        onSubmit={handleSubmit(onSubmit)}
        autoComplete="off"
        style={{ display: "flex", flexDirection: "column", gap: 20 }}
      >
        <label>
          <Emoji symbol="üí°" /> <b>Descripci√≥n de la gesti√≥n</b>
          <input
            type="text"
            {...register("descripcion", {
              required: "Campo obligatorio",
              maxLength: { value: 120, message: "M√°ximo 120 caracteres" },
            })}
            placeholder="Ej: Reparaci√≥n de luminarias"
            className={`input-modern ${errors.descripcion ? "input-error" : ""}`}
          />
          {errors.descripcion && <span className="error-message">{errors.descripcion.message}</span>}
        </label>

        <label>
          <Emoji symbol="üìÖ" /> <b>Fecha de lo gestionado</b>
          <Controller
            control={control}
            name="fecha"
            rules={{ required: "Campo obligatorio" }}
            render={({ field }) => (
              <DatePicker
                placeholderText="Selecciona fecha y hora"
                showTimeSelect
                timeFormat="HH:mm"
                timeIntervals={15}
                dateFormat="yyyy-MM-dd HH:mm"
                timeCaption="Hora"
                selected={field.value}
                onChange={field.onChange}
                className="input-modern"
              />
            )}
          />
          {errors.fecha && <span className="error-message">{errors.fecha.message}</span>}
        </label>

        <label>
          <Emoji symbol="üóÇÔ∏è" /> <b>Tipo de esfuerzo</b>
          <select
            {...register("esfuerzo", { required: "Seleccione al menos uno" })}
            multiple
            className="input-modern"
            style={{ minHeight: 70 }}
          >
            <option value="econ√≥mico">üí≤ Econ√≥mico</option>
            <option value="participativo">ü§ù Participativo</option>
            <option value="utilitarios">üõ†Ô∏è Utilitarios</option>
          </select>
          {errors.esfuerzo && <span className="error-message">{errors.esfuerzo.message}</span>}
        </label>

        {esfuerzoSeleccionado.includes("econ√≥mico") && (
          <label>
            <Emoji symbol="üíµ" /> <b>Monto econ√≥mico ($)</b>
            <input
              type="number"
              step="0.01"
              {...register("monto", { min: 0 })}
              placeholder="Ej: 45.00"
              className="input-modern"
            />
          </label>
        )}

        {esfuerzoSeleccionado.includes("participativo") && (
          <label>
            <Emoji symbol="‚è≥" /> <b>Horas de mano de obra</b>
            <input
              type="number"
              step="0.5"
              {...register("horas", { min: 0 })}
              placeholder="Ej: 3.5"
              className="input-modern"
            />
          </label>
        )}

        {esfuerzoSeleccionado.includes("utilitarios") && (
          <label>
            <Emoji symbol="üß∞" /> <b>Materiales/insumos utilizados</b>
            <input
              type="text"
              {...register("materiales")}
              placeholder="Ej: 2 focos, 1 gal√≥n pintura"
              className="input-modern"
            />
          </label>
        )}

        <label>
          <Emoji symbol="üìé" /> <b>Evidencias (facturas, recibos, fotos)</b>
          <input
            type="file"
            accept="image/*,application/pdf"
            multiple
            onChange={handleArchivos}
            className="input-modern"
          />
          <span style={{ fontSize: 13, color: "#888" }}>
            Puedes adjuntar im√°genes (jpg, png), PDF, etc.
          </span>
          <div
            style={{
              display: "flex",
              gap: 10,
              marginTop: 8,
              flexWrap: "wrap",
            }}
          >
            {archivosPreview.map((src, i) =>
              src ? (
                <img
                  key={i}
                  src={src}
                  alt={`Evidencia ${i + 1}`}
                  style={{
                    width: 60,
                    height: 60,
                    objectFit: "cover",
                    borderRadius: 8,
                    border: "1.5px solid #a5b4fc",
                  }}
                />
              ) : null
            )}
          </div>
        </label>

        <label>
          <Emoji symbol="üìù" /> <b>Observaciones adicionales</b>
          <textarea
            {...register("observaciones")}
            rows={2}
            placeholder="Detalles adicionales, responsables, etc."
            className="input-modern"
          />
        </label>

        <button
          type="submit"
          disabled={subiendo || isSubmitting}
          className="btn-disruptivo"
          style={{
            background: "linear-gradient(90deg, #6366f1 60%, #38bdf8 100%)",
            color: "#fff",
            padding: "14px 0",
            borderRadius: 12,
            fontWeight: 700,
            fontSize: 18,
            boxShadow: "0 2px 12px #6366f144",
            border: "none",
            cursor: subiendo ? "wait" : "pointer",
            transition: "background 0.2s",
          }}
        >
          {subiendo ? (
            <>
              <Emoji symbol="‚è≥" /> Registrando...
            </>
          ) : (
            <>
              <Emoji symbol="üì§" /> Registrar descargo
            </>
          )}
        </button>

        {mensaje && (
          <div
            className="info-message"
            style={{
              marginTop: 14,
              background: mensaje.startsWith("‚úÖ") ? "#e0ffe8" : "#fffbe6",
              color: mensaje.startsWith("‚úÖ") ? "#22c55e" : "#b26d00",
              border: mensaje.startsWith("‚úÖ")
                ? "1.5px solid #22c55e"
                : "1.5px solid #ffe58f",
              borderRadius: 8,
              padding: "10px 14px",
              fontSize: 15,
              fontWeight: 600,
            }}
          >
            {mensaje}
          </div>
        )}
      </form>

      <h3
        style={{
          marginTop: 40,
          marginBottom: 12,
          fontWeight: 700,
          fontSize: "1.4rem",
          display: "flex",
          alignItems: "center",
          gap: 10,
        }}
      >
        <Emoji symbol="üìã" label="Registros" /> Registros de Descargo de Gesti√≥n
      </h3>

      {loadingRegistros && <Loader text="Cargando registros..." />}

      {errorRegistros && (
        <div className="error-message" style={{ marginBottom: 16 }}>
          {errorRegistros}
        </div>
      )}

      {!loadingRegistros && registros.length === 0 && (
        <div>No hay registros disponibles.</div>
      )}

      {registros.length > 0 && (
        <div
          className="tabla-registros-descargo"
          style={{
            overflowX: "auto",
            maxHeight: 400,
            marginTop: 16,
            border: "1px solid #ccc",
            borderRadius: 8,
          }}
        >
          <table
            style={{
              width: "100%",
              borderCollapse: "collapse",
              fontSize: 14,
            }}
          >
            <thead>
              <tr style={{ backgroundColor: "#f0f4ff" }}>
                <th style={{ padding: "8px", borderBottom: "1px solid #ccc" }}>
                  Fecha
                </th>
                <th style={{ padding: "8px", borderBottom: "1px solid #ccc" }}>
                  Descripci√≥n
                </th>
                <th style={{ padding: "8px", borderBottom: "1px solid #ccc" }}>
                  Esfuerzo
                </th>
                <th style={{ padding: "8px", borderBottom: "1px solid #ccc" }}>
                  Monto
                </th>
                <th style={{ padding: "8px", borderBottom: "1px solid #ccc" }}>
                  Horas
                </th>
                <th style={{ padding: "8px", borderBottom: "1px solid #ccc" }}>
                  Materiales
                </th>
                <th style={{ padding: "8px", borderBottom: "1px solid #ccc" }}>
                  Observaciones
                </th>
                <th style={{ padding: "8px", borderBottom: "1px solid #ccc" }}>
                  Evidencias
                </th>
              </tr>
            </thead>
            <tbody>
              {registros.map((reg) => (
                <tr key={reg.id} style={{ borderBottom: "1px solid #ddd" }}>
                  <td style={{ padding: "6px 8px", textAlign: "center" }}>
                    {reg.fecha ? dayjs(reg.fecha).format("DD/MM/YYYY HH:mm") : "-"}
                  </td>
                  <td style={{ padding: "6px 8px" }}>{reg.descripcion || "-"}</td>
                  <td style={{ padding: "6px 8px" }}>
                    {Array.isArray(reg.esfuerzo)
                      ? reg.esfuerzo
                          .map((e) => {
                            if (e === "econ√≥mico") return "üí≤ Econ√≥mico";
                            if (e === "participativo") return "ü§ù Participativo";
                            if (e === "utilitarios") return "üõ†Ô∏è Utilitarios";
                            return e;
                          })
                          .join(", ")
                      : "-"}
                  </td>
                  <td style={{ padding: "6px 8px", textAlign: "right" }}>
                    {reg.monto != null ? `$${Number(reg.monto).toFixed(2)}` : "-"}
                  </td>
                  <td style={{ padding: "6px 8px", textAlign: "center" }}>
                    {reg.horas != null ? reg.horas : "-"}
                  </td>
                  <td style={{ padding: "6px 8px" }}>{reg.materiales || "-"}</td>
                  <td style={{ padding: "6px 8px" }}>{reg.observaciones || "-"}</td>
                  <td style={{ padding: "6px 8px" }}>
                    {reg.archivos && reg.archivos.length > 0 ? (
                      reg.archivos.map((url, i) => (
                        <a
                          key={i}
                          href={url}
                          target="_blank"
                          rel="noopener noreferrer"
                          style={{ marginRight: 8, display: "inline-block" }}
                        >
                          üìé Archivo {i + 1}
                        </a>
                      ))
                    ) : (
                      "-"
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}


----- C:\parking-app\src\components\Emoji.jsx -----

// src/components/Emoji.jsx
export default function Emoji({ symbol, label }) {
  return (
    <span role="img" aria-label={label} aria-hidden={label ? "false" : "true"}>
      {symbol}
    </span>
  )
}


----- C:\parking-app\src\components\GestionCopropietarios.jsx -----

import React, { useState, useEffect } from 'react'
import { supabase } from '../supabaseClient'
import Loader from './Loader'
import Emoji from './Emoji'

export default function GestionCopropietarios() {
  const [copropietarios, setCopropietarios] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [modal, setModal] = useState({ open: false, copropietario: null })
  const [form, setForm] = useState({ nombre: '', propiedad: '', unidad_asignada: '' })

  // Leer copropietarios
  const fetchCopropietarios = async () => {
    setLoading(true)
    const { data, error } = await supabase.from('copropietarios').select('*').order('propiedad')
    if (error) setError(error.message)
    else setCopropietarios(data)
    setLoading(false)
  }

  useEffect(() => { fetchCopropietarios() }, [])

  // Crear o actualizar copropietario
  const handleSave = async (e) => {
    e.preventDefault()
    setError(null)
    if (!form.nombre || !form.propiedad || !form.unidad_asignada) {
      setError('Todos los campos son obligatorios')
      return
    }
    if (modal.copropietario) {
      // Update
      const { error } = await supabase
        .from('copropietarios')
        .update(form)
        .eq('id', modal.copropietario.id)
      if (error) setError(error.message)
    } else {
      // Create
      const { error } = await supabase
        .from('copropietarios')
        .insert([form])
      if (error) setError(error.message)
    }
    setModal({ open: false, copropietario: null })
    setForm({ nombre: '', propiedad: '', unidad_asignada: '' })
    fetchCopropietarios()
  }

  // Eliminar copropietario
  const handleDelete = async (id) => {
    if (!window.confirm('¬øEliminar copropietario?')) return
    const { error } = await supabase.from('copropietarios').delete().eq('id', id)
    if (error) setError(error.message)
    fetchCopropietarios()
  }

  // Abrir modal para editar
  const handleEdit = (copropietario) => {
    setForm({
      nombre: copropietario.nombre,
      propiedad: copropietario.propiedad,
      unidad_asignada: copropietario.unidad_asignada
    })
    setModal({ open: true, copropietario })
  }

  // Abrir modal para crear
  const handleNew = () => {
    setForm({ nombre: '', propiedad: '', unidad_asignada: '' })
    setModal({ open: true, copropietario: null })
  }

  return (
    <div className="gestion-copropietarios-container">
      <h2>
        <Emoji symbol="üë•" label="Copropietarios" /> Gesti√≥n de Copropietarios
      </h2>
      <button className="edit-btn" onClick={handleNew}>
        <Emoji symbol="‚ûï" label="Agregar" /> Nuevo copropietario
      </button>
      {loading ? <Loader /> : (
        <table className="resultados-table">
          <thead>
            <tr>
              <th><Emoji symbol="üßë" label="Nombre" /> Nombre</th>
              <th><Emoji symbol="üè¢" label="Propiedad" /> Propiedad</th>
              <th><Emoji symbol="üî¢" label="Unidad" /> Unidad</th>
              <th><Emoji symbol="‚öôÔ∏è" label="Acciones" /> Acciones</th>
            </tr>
          </thead>
          <tbody>
            {copropietarios.map(c => (
              <tr key={c.id}>
                <td>{c.nombre}</td>
                <td>{c.propiedad}</td>
                <td>{c.unidad_asignada}</td>
                <td>
                  <button className="edit-btn" onClick={() => handleEdit(c)} title="Editar">
                    <Emoji symbol="‚úèÔ∏è" label="Editar" />
                  </button>
                  <button className="delete-btn" onClick={() => handleDelete(c.id)} title="Eliminar">
                    <Emoji symbol="üóëÔ∏è" label="Eliminar" />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
      {error && <div className="error-message">{error}</div>}

      {/* Modal para crear/editar */}
      {modal.open && (
        <div className="modal-backdrop">
          <div className="modal-content">
            <h3>
              <Emoji symbol={modal.copropietario ? "‚úèÔ∏è" : "‚ûï"} label={modal.copropietario ? "Editar" : "Nuevo"} />{' '}
              {modal.copropietario ? 'Editar' : 'Nuevo'} Copropietario
            </h3>
            <form className="modal-form" onSubmit={handleSave}>
              <label>
                <Emoji symbol="üßë" label="Nombre" /> Nombre:
                <input
                  value={form.nombre}
                  onChange={e => setForm({ ...form, nombre: e.target.value })}
                  required
                />
              </label>
              <label>
                <Emoji symbol="üè¢" label="Propiedad" /> Propiedad:
                <input
                  value={form.propiedad}
                  onChange={e => setForm({ ...form, propiedad: e.target.value })}
                  required
                />
              </label>
              <label>
                <Emoji symbol="üî¢" label="Unidad" /> Unidad asignada:
                <input
                  value={form.unidad_asignada}
                  onChange={e => setForm({ ...form, unidad_asignada: e.target.value })}
                  required
                />
              </label>
              <div>
                <button type="submit" className="save-btn">
                  <Emoji symbol="üíæ" label="Guardar" /> Guardar
                </button>
                <button type="button" className="cancel-btn" onClick={() => setModal({ open: false, copropietario: null })}>
                  <Emoji symbol="‚ùå" label="Cancelar" /> Cancelar
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}


----- C:\parking-app\src\components\ListaRegistros.jsx -----

// src/components/ListaRegistros.jsx
import React, { useEffect, useState } from 'react'
import { supabase } from '../supabaseClient'
import Loader from './Loader'
import Emoji from './Emoji'
import './ListaRegistros.css'
import dayjs from 'dayjs'
import useOnlineStatus from '../hooks/useOnlineStatus'

export default function ListaRegistros({ refreshKey, usuarioApp, onRegistrosFiltradosChange }) {
  const [registros, setRegistros] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [copropietarios, setCopropietarios] = useState([])
  const [filtros, setFiltros] = useState({ propiedad: '', unidadAsignada: '' })
  const [editModal, setEditModal] = useState({ open: false, registro: null })
  const [editData, setEditData] = useState({})
  const [eliminandoAudio, setEliminandoAudio] = useState(false)
  const isOnline = useOnlineStatus()

  useEffect(() => {
    const fetchCopropietarios = async () => {
      const { data, error } = await supabase
        .from('copropietarios')
        .select('id, nombre, propiedad, unidad_asignada')
      if (!error) setCopropietarios(data)
    }
    fetchCopropietarios()
  }, [])

  const propiedades = [...new Set(copropietarios.map(c => c.propiedad))].sort()
  const unidadesFiltradas = filtros.propiedad
    ? [...new Set(copropietarios.filter(c => c.propiedad === filtros.propiedad).map(c => c.unidad_asignada))]
    : []

  const fetchRegistros = async () => {
    setLoading(true)
    setError(null)
    try {
      if (isOnline) {
        const { data, error } = await supabase
          .from('registros_parqueadero')
          .select(`
            id,
            placa_vehiculo,
            tipo_vehiculo,
            fecha_hora_ingreso,
            observaciones,
            foto_url,
            monto,
            gratis,
            recaudado,
            fecha_recaudo,
            dependencia_id,
            observacion_audio_url,
            copropietarios:dependencia_id(nombre, propiedad, unidad_asignada),
            usuario:usuario_id!inner(id, nombre)
          `)
          .order('fecha_hora_ingreso', { ascending: false })
        if (error) throw error
        setRegistros(data)
        localStorage.setItem('registros_offline', JSON.stringify(data || []))
      } else {
        const localData = JSON.parse(localStorage.getItem('registros_offline') || '[]')
        setRegistros(localData)
      }
    } catch (error) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => { fetchRegistros() }, [refreshKey, isOnline])

  const handleFiltroChange = (e) => {
    const { name, value } = e.target
    setFiltros(prev => ({
      ...prev,
      [name]: value,
      ...(name === 'propiedad' && { unidadAsignada: '' })
    }))
  }

  const registrosFiltrados = registros.filter(reg => {
    const coincideProp = !filtros.propiedad || (reg.copropietarios?.propiedad || '') === filtros.propiedad
    const coincideUnidad = !filtros.unidadAsignada || (reg.copropietarios?.unidad_asignada || '') === filtros.unidadAsignada
    return coincideProp && coincideUnidad
  })

  useEffect(() => {
    if (onRegistrosFiltradosChange) {
      onRegistrosFiltradosChange(registrosFiltrados)
    }
  }, [registrosFiltrados, onRegistrosFiltradosChange])

  const totalMonto = registrosFiltrados.reduce(
    (acc, reg) => acc + Number(reg.monto || 0),
    0
  )

  // Edici√≥n
  const handleEdit = (registro) => {
    setEditModal({ open: true, registro })
    setEditData({
      placa_vehiculo: registro.placa_vehiculo,
      tipo_vehiculo: registro.tipo_vehiculo,
      fecha_hora_ingreso: registro.fecha_hora_ingreso ? registro.fecha_hora_ingreso.slice(0, 10) : '',
      gratis: !!registro.gratis,
      observaciones: registro.observaciones || '',
      dependencia_id: registro.dependencia_id,
      recaudado: !!registro.recaudado,
      fecha_recaudo: registro.fecha_recaudo || '',
      observacion_audio_url: registro.observacion_audio_url || '',
      nuevoAudio: null
    })
  }

  const handleEditChange = (e) => {
    const { name, value, type, checked } = e.target
    setEditData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
      ...(name === 'recaudado' && !checked ? { fecha_recaudo: '' } : {})
    }))
  }

  const handleEditSave = async (e) => {
    e.preventDefault()
    const id = editModal.registro.id
    const monto = editData.gratis ? 0 : (editData.tipo_vehiculo === 'carro' ? 1.00 : 0.50)
    let audioUrlFinal = editData.observacion_audio_url

    // Subida de nuevo audio
    if (editData.nuevoAudio) {
      const fileName = `audio_obs_edit_${editData.placa_vehiculo}_${Date.now()}.webm`
      const { error: uploadError } = await supabase
        .storage
        .from('evidencias-parqueadero')
        .upload(fileName, editData.nuevoAudio, { contentType: 'audio/webm' })
      if (uploadError) {
        setError('Error al subir el audio: ' + uploadError.message)
        return
      }
      const { data: publicUrlData } = supabase
        .storage
        .from('evidencias-parqueadero')
        .getPublicUrl(fileName)
      audioUrlFinal = publicUrlData.publicUrl
    }

    try {
      const { error } = await supabase
        .from('registros_parqueadero')
        .update({
          ...editData,
          monto,
          fecha_recaudo: editData.recaudado ? editData.fecha_recaudo : null,
          observacion_audio_url: audioUrlFinal
        })
        .eq('id', id)

      if (error) throw error

      setRegistros(registros.map(r =>
        r.id === id ? { ...r, ...editData, monto, observacion_audio_url: audioUrlFinal } : r
      ))

      if (!isOnline) {
        const localData = JSON.parse(localStorage.getItem('registros_offline') || '[]')
        const updatedData = localData.map(item =>
          item.id === id ? { ...item, ...editData, monto, observacion_audio_url: audioUrlFinal } : item
        )
        localStorage.setItem('registros_offline', JSON.stringify(updatedData))
      }

      setEditModal({ open: false, registro: null })
      setEditData({})
    } catch (error) {
      setError(error.message)
    }
  }

  // Eliminar audio
  const handleEliminarAudio = async () => {
    if (!editData.observacion_audio_url) return
    if (!window.confirm('¬øEliminar esta evidencia auditiva?')) return
    setEliminandoAudio(true)
    try {
      if (editData.observacion_audio_url && editData.observacion_audio_url !== 'pendiente-sync') {
        const urlParts = editData.observacion_audio_url.split('/')
        const fileName = urlParts[urlParts.length - 1]
        const { error: deleteError } = await supabase
          .storage
          .from('evidencias-parqueadero')
          .remove([fileName])
        if (deleteError) throw deleteError
      }
      setEditData(prev => ({ ...prev, observacion_audio_url: '', nuevoAudio: null }))
      const id = editModal.registro.id
      await supabase
        .from('registros_parqueadero')
        .update({ observacion_audio_url: null })
        .eq('id', id)
      setRegistros(registros.map(r =>
        r.id === id ? { ...r, observacion_audio_url: null } : r
      ))
    } catch (error) {
      setError('Error eliminando audio: ' + error.message)
    }
    setEliminandoAudio(false)
  }

  const handleDelete = async (registro) => {
    if (!window.confirm('¬øSeguro que deseas eliminar este registro?')) return
    try {
      if (isOnline) {
        const { error } = await supabase
          .from('registros_parqueadero')
          .delete()
          .eq('id', registro.id)
        if (error) throw error
      }

      const updatedRegistros = registros.filter(r => r.id !== registro.id)
      setRegistros(updatedRegistros)

      if (!isOnline) {
        const localData = JSON.parse(localStorage.getItem('registros_offline') || '[]')
        const filteredData = localData.filter(item => item.id !== registro.id)
        localStorage.setItem('registros_offline', JSON.stringify(filteredData))
      }
    } catch (err) {
      setError('Error eliminando registro: ' + err.message)
    }
  }

  if (loading) return <Loader text="Cargando registros..." />
  if (error) return <div className="error-message">{error}</div>

  return (
    <div className="lista-registros-container">
      <div className="offline-banner" style={{
        display: !isOnline ? 'flex' : 'none',
        background: '#fff3cd',
        color: '#856404',
        padding: '8px 16px',
        borderRadius: '8px',
        marginBottom: '16px',
        alignItems: 'center',
        gap: '8px'
      }}>
        <Emoji symbol="‚ö°" /> Modo offline - Mostrando datos almacenados localmente
      </div>

      <h2>
        <Emoji symbol="üìù" label="√öltimos Registros" /> √öltimos Registros
      </h2>

      <div style={{ display: 'flex', gap: 16, marginBottom: 16 }}>
        <div>
          <label>Propiedad:</label>
          <select
            name="propiedad"
            value={filtros.propiedad}
            onChange={handleFiltroChange}
          >
            <option value="">Todas</option>
            {propiedades.map(prop => (
              <option key={prop} value={prop}>{prop}</option>
            ))}
          </select>
        </div>
        <div>
          <label>Unidad asignada:</label>
          <select
            name="unidadAsignada"
            value={filtros.unidadAsignada}
            onChange={handleFiltroChange}
            disabled={!filtros.propiedad}
          >
            <option value="">Todas</option>
            {unidadesFiltradas.map(unidad => (
              <option key={unidad} value={unidad}>{unidad}</option>
            ))}
          </select>
        </div>
      </div>

      <div className="registros-table-wrapper">
        <table className="registros-table">
          <thead>
            <tr>
              <th style={{ textAlign: 'center' }}><Emoji symbol="üìÖ" /> Fecha/Hora</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="üöó" /> Placa</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="üèçÔ∏è" /> Tipo</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="üìù" /> Observaciones</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="üíµ" /> Monto</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="üÜì" /> Gratis</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="üîó" /> Recaudado</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="üìÖ" /> Fecha Recaudo</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="üè†" /> Copropietario</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="üë§" /> Registrado por</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="üì∑" /> Foto</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="üîä" /> Audio</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="‚öôÔ∏è" /> Acciones</th>
            </tr>
          </thead>

          <tbody>
            {registrosFiltrados.length > 0 ? (
              <>
                {registrosFiltrados.map(reg => (
                  <tr key={reg.id}>
                    <td style={{ textAlign: 'center' }}>
                      {reg.fecha_hora_ingreso
                        ? dayjs(reg.fecha_hora_ingreso).format('DD/MM/YYYY HH:mm')
                        : ''}
                    </td>
                    <td style={{ textAlign: 'center' }}>{reg.placa_vehiculo}</td>
                    <td style={{ textAlign: 'center' }}>
                      {reg.tipo_vehiculo?.toLowerCase() === 'carro' && (
                        <Emoji symbol="üöó" label="Carro" />
                      )}
                      {reg.tipo_vehiculo?.toLowerCase() === 'moto' && (
                        <Emoji symbol="üèçÔ∏è" label="Moto" />
                      )}
                      <span style={{ marginLeft: 6, textTransform: 'capitalize' }}>
                        {reg.tipo_vehiculo}
                      </span>
                    </td>
                    <td>{reg.observaciones || '-'}</td>
                    <td style={{ textAlign: 'center' }}>${Number(reg.monto).toFixed(2)}</td>
                    <td style={{ textAlign: 'center' }}>
                      {reg.gratis
                        ? <Emoji symbol="üÜì" label="Gratis" />
                        : <Emoji symbol="‚ùå" label="No Gratis" />}
                    </td>
                    <td style={{ textAlign: 'center' }}>
                      {reg.recaudado
                        ? <Emoji symbol="üîó" label="Recaudado" />
                        : <Emoji symbol="‚è≥" label="Pendiente" />}
                    </td>
                    <td style={{ textAlign: 'center' }}>
                      {reg.fecha_recaudo || '-'}
                    </td>
                    <td>
                      <Emoji symbol="üè†" label="Casa" />{' '}
                      {reg.copropietarios?.nombre || '-'}
                      <br />
                      <small>
                        {reg.copropietarios?.propiedad || ''} - {reg.copropietarios?.unidad_asignada || ''}
                      </small>
                    </td>
                    <td style={{ textAlign: 'center' }}>
                      {reg.usuario?.nombre || '-'}
                    </td>
                    <td style={{ textAlign: 'center' }}>
                      {reg.foto_url && (
                        <a href={reg.foto_url} target="_blank" rel="noopener noreferrer">
                          <img src={reg.foto_url} alt="Evidencia" className="thumbnail" />
                        </a>
                      )}
                    </td>
                    <td style={{ textAlign: 'center' }}>
                      {reg.observacion_audio_url && reg.observacion_audio_url !== 'pendiente-sync' ? (
                        <audio controls style={{ width: 90 }}>
                          <source src={reg.observacion_audio_url} type="audio/webm" />
                          Tu navegador no soporta audio.
                        </audio>
                      ) : (
                        <span style={{ color: '#aaa', fontSize: 14 }}>-</span>
                      )}
                    </td>
                    <td style={{ textAlign: 'center' }}>
                      <button
                        className="edit-btn"
                        title="Editar"
                        onClick={() => handleEdit(reg)}
                        style={{ marginRight: 6 }}
                        disabled={!isOnline}
                      >
                        <Emoji symbol="‚úèÔ∏è" label="Editar" />
                      </button>
                      <button
                        className="delete-btn"
                        title="Eliminar"
                        onClick={() => handleDelete(reg)}
                      >
                        <Emoji symbol="üóëÔ∏è" label="Eliminar" />
                      </button>
                    </td>
                  </tr>
                ))}
                <tr style={{ fontWeight: 'bold', background: '#f6f8fc' }}>
                  <td colSpan={4} style={{ textAlign: 'right' }}>
                    Total
                  </td>
                  <td style={{ textAlign: 'center' }}>
                    ${totalMonto.toFixed(2)}
                  </td>
                  <td colSpan={9}></td>
                </tr>
              </>
            ) : (
              <tr>
                <td colSpan="13" className="sin-resultados">
                  No se encontraron registros con los filtros seleccionados
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* Modal de edici√≥n */}
      {editModal.open && (
        <div className="modal-backdrop">
          <div className="modal-content">
            <h3>Editar Registro</h3>
            <form className="modal-form" onSubmit={handleEditSave}>
              <label>
                Placa:
                <input
                  name="placa_vehiculo"
                  value={editData.placa_vehiculo}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                />
              </label>
              <label>
                Tipo:
                <select
                  name="tipo_vehiculo"
                  value={editData.tipo_vehiculo}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                >
                  <option value="carro">Carro</option>
                  <option value="moto">Moto</option>
                </select>
              </label>
              <label>
                Fecha ingreso:
                <input
                  type="date"
                  name="fecha_hora_ingreso"
                  value={editData.fecha_hora_ingreso}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                />
              </label>
              <label>
                Observaciones:
                <input
                  name="observaciones"
                  value={editData.observaciones}
                  onChange={handleEditChange}
                  disabled={!isOnline}
                />
              </label>
              <label>
                Copropietario:
                <select
                  name="dependencia_id"
                  value={editData.dependencia_id || ''}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                >
                  <option value="">Seleccione...</option>
                  {copropietarios.map(dep => (
                    <option key={dep.id} value={dep.id}>
                      {dep.nombre} ({dep.propiedad} - {dep.unidad_asignada})
                    </option>
                  ))}
                </select>
              </label>
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  name="gratis"
                  checked={!!editData.gratis}
                  onChange={handleEditChange}
                  disabled={!isOnline}
                />
                <Emoji symbol="üÜì" label="Gratis" /> Gratis
              </label>
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  name="recaudado"
                  checked={!!editData.recaudado}
                  onChange={handleEditChange}
                  disabled={!isOnline}
                />
                <Emoji symbol="üîó" label="Recaudado" /> Recaudado
              </label>
              {editData.recaudado && (
                <label>
                  Fecha Recaudo:
                  <input
                    type="date"
                    name="fecha_recaudo"
                    value={editData.fecha_recaudo || ''}
                    onChange={handleEditChange}
                    required={!!editData.recaudado}
                    disabled={!isOnline || !editData.recaudado}
                  />
                </label>
              )}
              <label>
                Evidencia auditiva:
                {editData.observacion_audio_url && editData.observacion_audio_url !== 'pendiente-sync' ? (
                  <>
                    <audio controls style={{ width: '100%', margin: '8px 0' }}>
                      <source src={editData.observacion_audio_url} type="audio/webm" />
                      Tu navegador no soporta audio.
                    </audio>
                    <button
                      type="button"
                      onClick={handleEliminarAudio}
                      className="delete-btn"
                      style={{ marginTop: 8 }}
                      disabled={eliminandoAudio || !isOnline}
                    >
                      {eliminandoAudio ? 'Eliminando...' : <><Emoji symbol="üóëÔ∏è" /> Eliminar audio</>}
                    </button>
                  </>
                ) : (
                  <span style={{ color: '#aaa', fontSize: 14 }}>No hay audio guardado.</span>
                )}
                <input
                  type="file"
                  accept="audio/*"
                  onChange={e => setEditData(prev => ({
                    ...prev,
                    nuevoAudio: e.target.files && e.target.files[0] ? e.target.files[0] : null
                  }))}
                  disabled={!isOnline}
                  style={{ marginTop: 8 }}
                />
                <span style={{ fontSize: 12, color: '#888' }}>
                  Puedes subir un nuevo archivo de audio para reemplazar el actual.
                </span>
              </label>
              <div style={{ marginTop: 18 }}>
                <button
                  type="submit"
                  className="save-btn"
                  disabled={!isOnline}
                >
                  Guardar
                </button>
                <button
                  type="button"
                  className="cancel-btn"
                  onClick={() => setEditModal({ open: false, registro: null })}
                >
                  Cancelar
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}


----- C:\parking-app\src\components\Loader.jsx -----

// src/components/Loader.jsx
import React from 'react'

export default function Loader({ fullScreen = false, text = "‚è≥ Cargando..." }) {
  const loaderStyle = {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    minHeight: fullScreen ? '100vh' : '120px',
    width: '100%',
    background: fullScreen ? '#f5f6fa' : 'transparent',
    position: fullScreen ? 'fixed' : 'static',
    top: 0,
    left: 0,
    zIndex: 9999,
  }

  const spinnerStyle = {
    width: '48px',
    height: '48px',
    border: '6px solid #e0e0e0',
    borderTop: '6px solid #3498db',
    borderRadius: '50%',
    animation: 'spin 1s linear infinite',
    marginBottom: '1rem',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: '2rem'
  }

  return (
    <div style={loaderStyle}>
      <div style={spinnerStyle}>
        <span role="img" aria-label="reloj de arena" style={{ position: 'absolute', fontSize: '2.2rem', marginTop: 2 }}>
          ‚è≥
        </span>
      </div>
      <span style={{ color: '#2c3e50', fontWeight: 'bold', fontSize: '1.1rem' }}>{text}</span>
      <style>
        {`
          @keyframes spin {
            0% { transform: rotate(0deg);}
            100% { transform: rotate(360deg);}
          }
        `}
      </style>
    </div>
  )
}


----- C:\parking-app\src\components\MenuDesplegable.jsx -----

// src/components/MenuDesplegable.jsx
import React, { useState, useEffect, useRef } from 'react'
import Emoji from './Emoji'

export default function MenuDesplegable({ currentView, setCurrentView, usuarioApp }) {
  const [isOpen, setIsOpen] = useState(false)
  const menuRef = useRef(null)

  // Opciones del men√∫
  const menuItems = [
    { emoji: 'üìù', label: 'Registro', key: 'registro' },
    { emoji: 'üîé', label: 'Consultas', key: 'consulta' },
    { emoji: 'üí∞', label: 'Recaudaci√≥n', key: 'recaudo' },
    { emoji: 'üë•', label: 'Copropietarios', key: 'copropietarios' },
    { emoji: 'üì§', label: 'Descargo Gesti√≥n', key: 'descargo' },
    { emoji: '‚ÑπÔ∏è', label: 'Acerca de', key: 'acerca' },
    ...(usuarioApp?.rol === 'admin'
      ? [{ emoji: 'üë§', label: 'Usuarios', key: 'usuarios' }]
      : [])
  ]

  // Cierra el men√∫ al hacer clic fuera
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false)
      }
    }
    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  return (
    <div className="menu-container relative" ref={menuRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="menu-button flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-all duration-300 shadow-lg"
      >
        <Emoji symbol="‚ò∞" label="Men√∫" className="mr-2" />
        <span className="font-semibold">Men√∫ Principal</span>
      </button>

      {isOpen && (
        <div className="menu-dropdown absolute top-full left-0 mt-2 w-64 bg-white rounded-xl shadow-2xl border border-gray-100 z-50">
          <div className="p-2 space-y-1">
            {menuItems.map((item, index) => (
              <button
                key={index}
                onClick={() => {
                  setCurrentView(item.key)
                  setIsOpen(false)
                }}
                className={`flex items-center px-4 py-3 text-gray-800 hover:bg-blue-50 rounded-lg transition-colors duration-200 w-full text-left ${
                  currentView === item.key ? 'bg-blue-100 font-semibold' : ''
                }`}
                type="button"
              >
                <span className="text-xl mr-3"><Emoji symbol={item.emoji} /></span>
                <span>{item.label}</span>
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}


----- C:\parking-app\src\components\Navbar.jsx -----

// src/components/Navbar.jsx
import React from 'react'
import { Link } from 'react-router-dom'
import MenuDesplegable from './MenuDesplegable'

export default function Navbar() {
  return (
    <nav className="navbar flex items-center justify-between px-6 py-4 bg-blue-700 text-white shadow-lg">
      <div className="flex items-center space-x-4">
        <Link to="/" className="text-2xl font-bold hover:text-blue-200 transition-colors flex items-center gap-2">
          <span role="img" aria-label="Casa">üè†</span>
          Conjunto Habitacional
        </Link>
      </div>
      <MenuDesplegable />
    </nav>
  )
}


----- C:\parking-app\src\components\RegistroParqueo.jsx -----

// src/components/RegistroParqueo.jsx
import React, { useState, useEffect, useRef } from 'react';
import { supabase } from '../supabaseClient';
import SelectorDeFoto from './SelectorDeFoto';
import { ReactMediaRecorder } from 'react-media-recorder';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import Emoji from './Emoji';
import dayjs from 'dayjs';

function addToSyncQueue(operation) {
  const queue = JSON.parse(localStorage.getItem('syncQueue') || '[]');
  queue.push({ ...operation, timestamp: new Date() });
  localStorage.setItem('syncQueue', JSON.stringify(queue));
}

const getToday = () => new Date();

const getPropiedadEmoji = (prop) => {
  if (/^(D|Depto|Depa)/i.test(prop)) return 'üè¢';
  if (/^(C|Casa)/i.test(prop)) return 'üè†';
  return 'üèòÔ∏è';
};

export default function RegistroParqueo({ usuarioApp, onRegistroExitoso }) {
  const [placa, setPlaca] = useState('');
  const [tipoVehiculo, setTipoVehiculo] = useState('carro');
  const [propiedad, setPropiedad] = useState('');
  const [unidadAsignada, setUnidadAsignada] = useState('');
  const [copropietarios, setCopropietarios] = useState([]);
  const [observaciones, setObservaciones] = useState('');
  const [fecha, setFecha] = useState(getToday());
  const [mensaje, setMensaje] = useState('');
  const [loading, setLoading] = useState(false);
  const [foto, setFoto] = useState(null);
  const [gratis, setGratis] = useState(false);
  const [audioBlob, setAudioBlob] = useState(null);
  const [audioUrl, setAudioUrl] = useState(null);
  const [registrosUsuario, setRegistrosUsuario] = useState([]);
  const [editModal, setEditModal] = useState({ open: false, registro: null });
  const [editData, setEditData] = useState({});
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const inputPlacaRef = useRef(null);

  // Online status listener
  useEffect(() => {
    const updateOnlineStatus = () => setIsOnline(navigator.onLine);
    window.addEventListener('online', updateOnlineStatus);
    window.addEventListener('offline', updateOnlineStatus);
    return () => {
      window.removeEventListener('online', updateOnlineStatus);
      window.removeEventListener('offline', updateOnlineStatus);
    };
  }, []);

  // Load copropietarios
  useEffect(() => {
    supabase
      .from('copropietarios')
      .select('id, nombre, propiedad, unidad_asignada')
      .then(({ data, error }) => {
        if (!error) setCopropietarios(data);
      });
  }, []);

  // Load last 10 registros by user
  useEffect(() => {
    if (!usuarioApp) return;
    supabase
      .from('registros_parqueadero')
      .select('*')
      .eq('usuario_id', usuarioApp.id)
      .order('fecha_hora_ingreso', { ascending: false })
      .limit(10)
      .then(({ data, error }) => {
        if (!error) setRegistrosUsuario(data);
      });
  }, [usuarioApp, loading]);

  const propiedades = [...new Set(copropietarios.map(c => c.propiedad))].sort();
  const unidadesFiltradas = propiedad
    ? [...new Set(copropietarios.filter(c => c.propiedad === propiedad).map(c => c.unidad_asignada))].sort((a, b) =>
        !isNaN(a) && !isNaN(b) ? Number(a) - Number(b) : a.localeCompare(b, undefined, { numeric: true }),
      )
    : [];

  const copropietarioSeleccionado = copropietarios.find(
    c => c.propiedad === propiedad && c.unidad_asignada === unidadAsignada,
  );

  // Handlers for photo and audio
  const handleFoto = (file) => setFoto(file);

  const handleAudioStop = async (blobUrl) => {
    setAudioUrl(blobUrl);
    const resp = await fetch(blobUrl);
    const blob = await resp.blob();
    setAudioBlob(blob);
  };

  // Submit new registro
  const handleSubmit = async (e) => {
    e.preventDefault();
    setMensaje('');
    setLoading(true);

    const placaFormateada = placa.toUpperCase().replace(/[^A-Z0-9]/g, '');
    if (!placaFormateada) {
      setMensaje('La placa es obligatoria');
      setLoading(false);
      return;
    }
    if (!copropietarioSeleccionado) {
      setMensaje('Debe seleccionar propiedad y unidad asignada v√°lidas.');
      setLoading(false);
      return;
    }

    let fotoUrl = null;
    let audioUrlFinal = null;

    if (foto) {
      const ext = foto.name.split('.').pop();
      const fileName = `${placaFormateada}_${Date.now()}.${ext}`;
      if (isOnline) {
        const { error: uploadError } = await supabase.storage.from('evidencias-parqueadero').upload(fileName, foto);
        if (uploadError) {
          setMensaje('Error al subir la foto: ' + uploadError.message);
          setLoading(false);
          return;
        }
        const { data: publicUrlData } = supabase.storage.from('evidencias-parqueadero').getPublicUrl(fileName);
        fotoUrl = publicUrlData.publicUrl;
      } else {
        fotoUrl = 'pendiente-sync';
      }
    }

    if (audioBlob) {
      const fileName = `audio_obs_${placaFormateada}_${Date.now()}.webm`;
      if (isOnline) {
        const { error: uploadError } = await supabase.storage
          .from('evidencias-parqueadero')
          .upload(fileName, audioBlob, { contentType: 'audio/webm' });
        if (uploadError) {
          setMensaje('Error al subir el audio: ' + uploadError.message);
          setLoading(false);
          return;
        }
        const { data: publicUrlData } = supabase.storage.from('evidencias-parqueadero').getPublicUrl(fileName);
        audioUrlFinal = publicUrlData.publicUrl;
      } else {
        audioUrlFinal = 'pendiente-sync';
      }
    }

    const monto = gratis ? 0 : tipoVehiculo === 'carro' ? 1.0 : 0.5;

    const registro = {
      placa_vehiculo: placaFormateada,
      tipo_vehiculo: tipoVehiculo,
      dependencia_id: copropietarioSeleccionado.id,
      usuario_id: usuarioApp.id,
      observaciones: observaciones || null,
      fecha_hora_ingreso: fecha instanceof Date ? fecha.toISOString() : fecha,
      foto_url: fotoUrl,
      gratis,
      monto,
      observacion_audio_url: audioUrlFinal,
    };

    if (isOnline) {
      const { error } = await supabase.from('registros_parqueadero').insert([registro]);
      if (error) setMensaje('Error al registrar: ' + error.message);
      else {
        setMensaje('¬°Registro exitoso!');
        onRegistroExitoso?.();
      }
    } else {
      addToSyncQueue({ table: 'registros_parqueadero', method: 'insert', params: [[registro]] });
      const localData = JSON.parse(localStorage.getItem('registros_offline') || '[]');
      localStorage.setItem('registros_offline', JSON.stringify([...localData, registro]));
      setMensaje('Registro guardado offline. Se sincronizar√° cuando vuelvas a tener internet.');
    }

    setPlaca('');
    setTipoVehiculo('carro');
    setPropiedad('');
    setUnidadAsignada('');
    setObservaciones('');
    setFecha(getToday());
    setFoto(null);
    setGratis(false);
    setAudioBlob(null);
    setAudioUrl(null);
    setLoading(false);
  };

  // Edit modal handlers
  const handleEdit = (registro) => {
    setEditModal({ open: true, registro });
    setEditData({
      placa_vehiculo: registro.placa_vehiculo,
      tipo_vehiculo: registro.tipo_vehiculo,
      fecha_hora_ingreso: registro.fecha_hora_ingreso?.slice(0, 10) || '',
      observaciones: registro.observaciones || '',
      dependencia_id: registro.dependencia_id,
      gratis: !!registro.gratis,
      monto: registro.monto || 0,
      observacion_audio_url: registro.observacion_audio_url || '',
      nuevoAudio: null,
    });
  };

  const handleEditChange = (e) => {
    const { name, value, type, checked, files } = e.target;
    if (name === 'nuevoAudio' && files && files.length > 0) {
      setEditData((prev) => ({ ...prev, nuevoAudio: files[0] }));
    } else {
      setEditData((prev) => ({
        ...prev,
        [name]: type === 'checkbox' ? checked : value,
        ...(name === 'gratis' && checked ? { monto: 0 } : {}),
      }));
    }
  };

  const handleEditSave = async (e) => {
    e.preventDefault();
    setMensaje('');
    const id = editModal.registro.id;
    let audioUrlFinal = editData.observacion_audio_url;

    if (editData.nuevoAudio) {
      const fileName = `audio_obs_edit_${editData.placa_vehiculo}_${Date.now()}.webm`;
      const { error: uploadError } = await supabase.storage
        .from('evidencias-parqueadero')
        .upload(fileName, editData.nuevoAudio, { contentType: 'audio/webm' });
      if (uploadError) {
        setMensaje('Error al subir el audio: ' + uploadError.message);
        return;
      }
      const { data: publicUrlData } = supabase.storage.from('evidencias-parqueadero').getPublicUrl(fileName);
      audioUrlFinal = publicUrlData.publicUrl;
    }

    const montoCalc = editData.gratis ? 0 : editData.tipo_vehiculo === 'carro' ? 1.0 : 0.5;

    try {
      const { error } = await supabase
        .from('registros_parqueadero')
        .update({
          placa_vehiculo: editData.placa_vehiculo,
          tipo_vehiculo: editData.tipo_vehiculo,
          fecha_hora_ingreso: editData.fecha_hora_ingreso,
          observaciones: editData.observaciones,
          dependencia_id: editData.dependencia_id,
          gratis: editData.gratis,
          monto: montoCalc,
          observacion_audio_url: audioUrlFinal,
        })
        .eq('id', id);
      if (error) throw error;

      setRegistrosUsuario((prev) =>
        prev.map((r) => (r.id === id ? { ...r, ...editData, monto: montoCalc, observacion_audio_url: audioUrlFinal } : r)),
      );
      setEditModal({ open: false, registro: null });
      setEditData({});
      setMensaje('Registro actualizado correctamente');
    } catch (err) {
      setMensaje('Error al actualizar: ' + err.message);
    }
  };

  const handleDelete = async (registro) => {
    if (!window.confirm('¬øSeguro que deseas eliminar este registro?')) return;
    try {
      if (isOnline) {
        const { error } = await supabase.from('registros_parqueadero').delete().eq('id', registro.id);
        if (error) throw error;
      }
      setRegistrosUsuario((prev) => prev.filter((r) => r.id !== registro.id));
      setMensaje('Registro eliminado correctamente');
    } catch (err) {
      setMensaje('Error eliminando registro: ' + err.message);
    }
  };

  return (
    <div>
      <form onSubmit={handleSubmit} style={{ maxWidth: 700, margin: 'auto' }}>
        <h2>
          <Emoji symbol="üìù" /> Registro de Parqueo
        </h2>

        <input
          type="text"
          placeholder="Placa"
          value={placa}
          onChange={(e) => setPlaca(e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, ''))}
          maxLength={10}
          required
          ref={inputPlacaRef}
        />

        <div style={{ margin: '12px 0' }}>
          <label>
            <Emoji symbol="üö¶" /> Tipo veh√≠culo:
          </label>
          <button type="button" className={tipoVehiculo === 'carro' ? 'selected' : ''} onClick={() => setTipoVehiculo('carro')}>
            <Emoji symbol="üöó" /> Carro
          </button>
          <button type="button" className={tipoVehiculo === 'moto' ? 'selected' : ''} onClick={() => setTipoVehiculo('moto')}>
            <Emoji symbol="üèçÔ∏è" /> Moto
          </button>
        </div>

        <div>
          <label>
            <Emoji symbol="üè†" /> Propiedad:
          </label>
          <select
            value={propiedad}
            onChange={(e) => {
              setPropiedad(e.target.value);
              setUnidadAsignada('');
            }}
            required
          >
            <option value="">Seleccione propiedad</option>
            {propiedades.map((prop) => (
              <option key={prop} value={prop}>
                {getPropiedadEmoji(prop)} {prop}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label>
            <Emoji symbol="üî¢" /> Unidad asignada:
          </label>
          <select value={unidadAsignada} onChange={(e) => setUnidadAsignada(e.target.value)} required disabled={!propiedad}>
            <option value="">Seleccione unidad</option>
            {unidadesFiltradas.map((unidad) => (
              <option key={unidad} value={unidad}>
                {unidad}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label>
            <Emoji symbol="üìù" /> Observaciones:
          </label>
          <input
            type="text"
            value={observaciones}
            onChange={(e) => setObservaciones(e.target.value)}
            placeholder="Ej: Veh√≠culo de visita, entrega, etc."
          />
        </div>

        <div>
          <label>
            <Emoji symbol="üìÖ" /> Fecha y hora:
          </label>
          <DatePicker
            selected={fecha}
            onChange={setFecha}
            showTimeSelect
            dateFormat="yyyy-MM-dd HH:mm"
            timeFormat="HH:mm"
            timeIntervals={15}
            required
          />
        </div>

        <div>
          <label>
            <Emoji symbol="üÜì" /> Gratis:
          </label>
          <input type="checkbox" checked={gratis} onChange={(e) => setGratis(e.target.checked)} />
        </div>

        <SelectorDeFoto onFileSelected={handleFoto} />

        <div>
          <label>
            <Emoji symbol="üé§" /> Audio:
          </label>
          <ReactMediaRecorder
            audio
            render={({ status, startRecording, stopRecording, mediaBlobUrl }) => (
              <div>
                <button type="button" onClick={startRecording} disabled={status === 'recording'}>
                  üé§ Grabar
                </button>
                <button
                  type="button"
                  onClick={() => {
                    stopRecording();
                    setTimeout(() => {
                      if (mediaBlobUrl) handleAudioStop(mediaBlobUrl);
                    }, 400);
                  }}
                  disabled={status !== 'recording'}
                >
                  ‚èπÔ∏è Detener
                </button>
                {audioUrl && <audio controls src={audioUrl} />}
              </div>
            )}
          />
        </div>

        <button type="submit" disabled={loading}>
          {loading ? 'Registrando...' : 'Registrar Ingreso'}
        </button>

        {mensaje && <p>{mensaje}</p>}
      </form>

      <section style={{ marginTop: 40, maxWidth: 900, margin: 'auto' }}>
        <h3>
          <Emoji symbol="üìã" /> √öltimos registros agregados por ti
        </h3>
        <div className="resultados-table-container">
          <table className="resultados-table">
            <thead>
              <tr>
                <th>
                  <Emoji symbol="üìÖ" /> Fecha
                </th>
                <th>
                  <Emoji symbol="üöó" /> Placa
                </th>
                <th>
                  <Emoji symbol="üö¶" /> Tipo
                </th>
                <th>
                  <Emoji symbol="üë•" /> Copropietario
                </th>
                <th>
                  <Emoji symbol="üíµ" /> Monto
                </th>
                <th>
                  <Emoji symbol="üÜì" /> Gratis
                </th>
                <th>
                  <Emoji symbol="üì∑" /> Foto
                </th>
                <th>
                  <Emoji symbol="‚öôÔ∏è" /> Acciones
                </th>
              </tr>
            </thead>
            <tbody>
              {registrosUsuario.length === 0 ? (
                <tr>
                  <td colSpan="8" style={{ textAlign: 'center' }}>
                    No hay registros
                  </td>
                </tr>
              ) : (
                registrosUsuario.map((reg) => {
                  const copropietario = copropietarios.find((c) => c.id === reg.dependencia_id);
                  return (
                    <tr key={reg.id} className={reg.gratis ? 'registro-gratis' : ''}>
                      <td>{dayjs(reg.fecha_hora_ingreso).format('DD/MM/YYYY')}</td>
                      <td>{reg.placa_vehiculo}</td>
                      <td>
                        {reg.tipo_vehiculo?.toLowerCase() === 'carro' && <Emoji symbol="üöó" />}
                        {reg.tipo_vehiculo?.toLowerCase() === 'moto' && <Emoji symbol="üèçÔ∏è" />}
                        <span style={{ marginLeft: 6 }}></span>
                      </td>
                      <td>
                        {copropietario?.nombre || '-'}
                        <br />
                        <small>
                          {copropietario?.propiedad || 'Sin propiedad'} - {copropietario?.unidad_asignada || 'Sin unidad'}
                        </small>
                      </td>
                      <td>${Number(reg.monto).toFixed(2)}</td>
                      <td>{reg.gratis ? <Emoji symbol="üÜì" /> : '-'}</td>
                      <td>
                        {reg.foto_url && (
                          <a href={reg.foto_url} target="_blank" rel="noopener noreferrer">
                            <img src={reg.foto_url} alt="Evidencia" className="thumbnail" />
                          </a>
                        )}
                      </td>
                      <td>
                        <button
                          className="edit-btn"
                          onClick={() => handleEdit(reg)}
                          title="Editar"
                          disabled={!isOnline}
                          style={{ marginRight: 6 }}
                        >
                          <Emoji symbol="‚úèÔ∏è" label="Editar" />
                        </button>
                        <button className="delete-btn" onClick={() => handleDelete(reg)} title="Eliminar">
                          <Emoji symbol="üóëÔ∏è" label="Eliminar" />
                        </button>
                      </td>
                    </tr>
                  );
                })
              )}
            </tbody>
          </table>
        </div>
      </section>

      {/* Modal edici√≥n */}
      {editModal.open && (
        <div className="modal-backdrop">
          <div className="modal-content" style={{ maxWidth: 600 }}>
            <h3>
              <Emoji symbol="‚úèÔ∏è" /> Editar Registro
            </h3>
            <form onSubmit={handleEditSave} className="modal-form">
              <label>
                Placa:
                <input
                  name="placa_vehiculo"
                  value={editData.placa_vehiculo}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                />
              </label>
              <label>
                Tipo veh√≠culo:
                <select
                  name="tipo_vehiculo"
                  value={editData.tipo_vehiculo}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                >
                  <option value="carro">Carro üöó</option>
                  <option value="moto">Moto üèçÔ∏è</option>
                </select>
              </label>
              <label>
                Fecha ingreso:
                <input
                  type="date"
                  name="fecha_hora_ingreso"
                  value={editData.fecha_hora_ingreso}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                />
              </label>
              <label>
                Observaciones:
                <input
                  name="observaciones"
                  value={editData.observaciones}
                  onChange={handleEditChange}
                  disabled={!isOnline}
                />
              </label>
              <label>
                Copropietario:
                <select
                  name="dependencia_id"
                  value={editData.dependencia_id || ''}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                >
                  <option value="">Seleccione...</option>
                  {copropietarios.map((dep) => (
                    <option key={dep.id} value={dep.id}>
                      {dep.nombre} ({dep.propiedad} - {dep.unidad_asignada})
                    </option>
                  ))}
                </select>
              </label>
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  name="gratis"
                  checked={!!editData.gratis}
                  onChange={handleEditChange}
                  disabled={!isOnline}
                />
                <Emoji symbol="üÜì" label="Gratis" /> Gratis
              </label>
              <label>
                Evidencia auditiva:
                {editData.observacion_audio_url && editData.observacion_audio_url !== 'pendiente-sync' ? (
                  <>
                    <audio controls style={{ width: '100%', margin: '8px 0' }}>
                      <source src={editData.observacion_audio_url} type="audio/webm" />
                      Tu navegador no soporta audio.
                    </audio>
                    <button
                      type="button"
                      onClick={() => setEditData((prev) => ({ ...prev, observacion_audio_url: '', nuevoAudio: null }))}
                      className="delete-btn"
                      style={{ marginTop: 8 }}
                      disabled={!isOnline}
                    >
                      <Emoji symbol="üóëÔ∏è" /> Eliminar audio
                    </button>
                  </>
                ) : (
                  <span style={{ color: '#aaa', fontSize: 14 }}>No hay audio guardado.</span>
                )}
                <input
                  type="file"
                  accept="audio/*"
                  name="nuevoAudio"
                  onChange={handleEditChange}
                  disabled={!isOnline}
                  style={{ marginTop: 8 }}
                />
                <small style={{ fontSize: 12, color: '#888' }}>
                  Puedes subir un nuevo archivo de audio para reemplazar el actual.
                </small>
              </label>
              <div style={{ marginTop: 18, display: 'flex', gap: 12, justifyContent: 'flex-end' }}>
                <button type="submit" className="save-btn" disabled={!isOnline}>
                  Guardar
                </button>
                <button type="button" className="cancel-btn" onClick={() => setEditModal({ open: false, registro: null })}>
                  Cancelar
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}


----- C:\parking-app\src\components\ResumenRecaudo.jsx -----

// src/components/ResumenRecaudo.jsx
import React, { useState, useEffect } from 'react'
import { supabase } from '../supabaseClient'
import Loader from './Loader'
import Emoji from './Emoji'

export default function ResumenRecaudo({ refreshKey }) {
  const [registros, setRegistros] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [montoRecaudar, setMontoRecaudar] = useState('')
  const [procesando, setProcesando] = useState(false)
  const [filtroPropiedad, setFiltroPropiedad] = useState('')
  const [filtroUnidad, setFiltroUnidad] = useState('')
  const [filtroCopropietario, setFiltroCopropietario] = useState('')
  const [editModal, setEditModal] = useState({ open: false, registro: null })
  const [editData, setEditData] = useState({})
  const [propiedades, setPropiedades] = useState([])
  const [unidades, setUnidades] = useState([])

  useEffect(() => {
    const fetchCopropietarios = async () => {
      const { data, error } = await supabase
        .from('copropietarios')
        .select('propiedad, unidad_asignada')
      if (!error) {
        const props = [...new Set(data.map(d => d.propiedad))].sort()
        setPropiedades(props)
        setUnidades(data)
      }
    }
    fetchCopropietarios()
  }, [])

  const unidadesFiltradas = filtroPropiedad
    ? [...new Set(unidades.filter(u => u.propiedad === filtroPropiedad).map(u => u.unidad_asignada))]
    : []

  const fetchData = async () => {
    setLoading(true)
    try {
      const { data, error } = await supabase
        .from('registros_parqueadero')
        .select(`
          *,
          copropietarios:dependencia_id(nombre, propiedad, unidad_asignada)
        `)
        .order('fecha_hora_ingreso', { ascending: false })

      if (error) throw error
      setRegistros(data)
    } catch (error) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => { fetchData() }, [refreshKey])

  const handleRecaudoAutomatico = async () => {
    if (!filtroPropiedad || !filtroUnidad) {
      alert('Debe seleccionar propiedad y unidad asignada')
      return
    }

    const montoObjetivo = parseFloat(montoRecaudar)
    if (isNaN(montoObjetivo) || montoObjetivo <= 0) {
      alert('Ingrese un monto v√°lido')
      return
    }

    setProcesando(true)
    try {
      const { data: registrosParaRecaudar, error } = await supabase
        .from('registros_parqueadero')
        .select(`
          *,
          copropietarios:dependencia_id(propiedad, unidad_asignada)
        `)
        .eq('copropietarios.propiedad', filtroPropiedad)
        .eq('copropietarios.unidad_asignada', filtroUnidad)
        .eq('recaudado', false)
        .eq('gratis', false)
        .order('fecha_hora_ingreso', { ascending: true })

      if (error) throw error
      if (!registrosParaRecaudar?.length) {
        alert('No hay registros pendientes para esta propiedad/unidad')
        return
      }

      let montoAcumulado = 0
      const registrosAMarcar = registrosParaRecaudar
        .filter(reg => {
          if (montoAcumulado >= montoObjetivo) return false
          montoAcumulado += Number(reg.monto)
          return true
        })
        .map(reg => reg.id)

      const { error: updateError } = await supabase
        .from('registros_parqueadero')
        .update({
          recaudado: true,
          fecha_recaudo: new Date().toISOString().slice(0, 10)
        })
        .in('id', registrosAMarcar)

      if (updateError) throw updateError

      alert(`Recaudado $${montoAcumulado.toFixed(2)} en ${registrosAMarcar.length} registros`)
      fetchData()
      setMontoRecaudar('')
    } catch (error) {
      alert('Error: ' + error.message)
    } finally {
      setProcesando(false)
    }
  }

  const registrosFiltrados = registros.filter(reg => {
    const coincidePropiedad = !filtroPropiedad || (reg.copropietarios?.propiedad || '') === filtroPropiedad
    const coincideUnidad = !filtroUnidad || (reg.copropietarios?.unidad_asignada || '') === filtroUnidad
    const coincideCopropietario = !filtroCopropietario || (reg.copropietarios?.nombre || '').toLowerCase().includes(filtroCopropietario.toLowerCase())
    return coincidePropiedad && coincideUnidad && coincideCopropietario
  })

  const resumen = registrosFiltrados.reduce((acc, reg) => {
    if (reg.gratis) acc.gratis++
    else if (reg.recaudado) acc.recaudado += Number(reg.monto)
    else acc.pendiente += Number(reg.monto)
    return acc
  }, { recaudado: 0, pendiente: 0, gratis: 0 })

  const handleEditSave = async () => {
    const id = editModal.registro.id
    const monto = editData.gratis ? 0 : (editData.tipo_vehiculo === 'carro' ? 1.00 : 0.50)

    try {
      const { error } = await supabase
        .from('registros_parqueadero')
        .update({ ...editData, monto })
        .eq('id', id)

      if (error) throw error
      fetchData()
      setEditModal({ open: false, registro: null })
    } catch (error) {
      alert(error.message)
    }
  }

  const handleDelete = async (id) => {
    if (!window.confirm('¬øSeguro que desea eliminar este registro?')) return
    try {
      const { error } = await supabase
        .from('registros_parqueadero')
        .delete()
        .eq('id', id)
      if (error) throw error
      fetchData()
    } catch (error) {
      alert(error.message)
    }
  }

  return (
    <div className="resumen-container">
      <h2><Emoji symbol="üìä" label="Resumen" /> Resumen de Recaudaci√≥n</h2>

      <div className="resumen-visual">
        <div className="resumen-item recaudado">
          <Emoji symbol="üí∞" /> ${resumen.recaudado.toFixed(2)}
          <span>Recaudado</span>
        </div>
        <div className="resumen-item pendiente">
          <Emoji symbol="‚è≥" /> ${resumen.pendiente.toFixed(2)}
          <span>Pendiente</span>
        </div>
        <div className="resumen-item gratis">
          <Emoji symbol="üÜì" /> {resumen.gratis}
          <span>Gratis</span>
        </div>
      </div>

      <section className="recaudo-automatico">
        <h3><Emoji symbol="‚ö°" /> Recaudo Autom√°tico</h3>
        <div className="filtros-recaudo">
          <div className="filtro-group">
            <label><Emoji symbol="üè†" /> Propiedad:</label>
            <select
              value={filtroPropiedad}
              onChange={e => {
                setFiltroPropiedad(e.target.value)
                setFiltroUnidad('')
              }}
            >
              <option value="">Seleccione propiedad</option>
              {propiedades.map(prop => (
                <option key={prop} value={prop}>{prop}</option>
              ))}
            </select>
          </div>

          <div className="filtro-group">
            <label><Emoji symbol="üî¢" /> Unidad:</label>
            <select
              value={filtroUnidad}
              onChange={e => setFiltroUnidad(e.target.value)}
              disabled={!filtroPropiedad}
            >
              <option value="">Seleccione unidad</option>
              {unidadesFiltradas.map(unidad => (
                <option key={unidad} value={unidad}>{unidad}</option>
              ))}
            </select>
          </div>

          <div className="filtro-group">
            <label><Emoji symbol="üíµ" /> Monto objetivo:</label>
            <input
              type="number"
              step="0.01"
              value={montoRecaudar}
              onChange={e => setMontoRecaudar(e.target.value)}
              placeholder="Ej: 50.00"
            />
          </div>

          <button
            className="btn-recaudo"
            onClick={handleRecaudoAutomatico}
            disabled={procesando || !filtroPropiedad || !filtroUnidad}
          >
            {procesando ? 'Procesando...' : 'Ejecutar Recaudo'}
          </button>
        </div>
      </section>

      <div className="filtros-avanzados">
        <div className="filtro-group">
          <label><Emoji symbol="üë•" /> Copropietario:</label>
          <input
            type="text"
            value={filtroCopropietario}
            onChange={e => setFiltroCopropietario(e.target.value)}
            placeholder="Filtrar por nombre"
          />
        </div>
      </div>

      <div className="detalle-recaudo">
        <h3><Emoji symbol="üìã" /> Detalle de Registros</h3>
        <div className="tabla-detalle">
          <table>
            <thead>
              <tr>
                <th><Emoji symbol="üöó" /> Placa</th>
                <th><Emoji symbol="üõµ" /> Tipo</th>
                <th><Emoji symbol="üíµ" /> Monto</th>
                <th><Emoji symbol="üë•" /> Copropietario</th>
                <th><Emoji symbol="üìÖ" /> Fecha Recaudo</th>
                <th><Emoji symbol="‚öôÔ∏è" /> Acciones</th>
              </tr>
            </thead>
            <tbody>
              {registrosFiltrados.map(reg => (
                <tr key={reg.id} className={reg.recaudado ? 'recaudado' : 'pendiente'}>
                  <td>{reg.placa_vehiculo}</td>
                  <td>{reg.tipo_vehiculo}</td>
                  <td>${reg.monto.toFixed(2)}</td>
                  <td>{reg.copropietarios?.nombre || '-'}</td>
                  <td>{reg.fecha_recaudo || '-'}</td>
                  <td>
                    <button onClick={() => {
                      setEditModal({ open: true, registro: reg })
                      setEditData({
                        placa_vehiculo: reg.placa_vehiculo,
                        tipo_vehiculo: reg.tipo_vehiculo,
                        fecha_hora_ingreso: reg.fecha_hora_ingreso?.slice(0, 10) || '',
                        gratis: reg.gratis
                      })
                    }}>
                      <Emoji symbol="‚úèÔ∏è" />
                    </button>
                    <button onClick={() => handleDelete(reg.id)}>
                      <Emoji symbol="üóëÔ∏è" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {editModal.open && (
        <div className="modal-edicion">
          <h3>Editar Registro</h3>
          <form onSubmit={e => { e.preventDefault(); handleEditSave() }}>
            <label>
              Placa:
              <input
                value={editData.placa_vehiculo}
                onChange={e => setEditData({ ...editData, placa_vehiculo: e.target.value })}
                required
              />
            </label>

            <label>
              Tipo:
              <select
                value={editData.tipo_vehiculo}
                onChange={e => setEditData({ ...editData, tipo_vehiculo: e.target.value })}
              >
                <option value="carro">Carro</option>
                <option value="moto">Moto</option>
              </select>
            </label>

            <label>
              Fecha ingreso:
              <input
                type="date"
                value={editData.fecha_hora_ingreso}
                onChange={e => setEditData({ ...editData, fecha_hora_ingreso: e.target.value })}
              />
            </label>

            <label className="checkbox">
              <input
                type="checkbox"
                checked={editData.gratis}
                onChange={e => setEditData({ ...editData, gratis: e.target.checked })}
              />
              <Emoji symbol="üÜì" /> Gratis
            </label>

            <div className="acciones-modal">
              <button type="submit">Guardar</button>
              <button type="button" onClick={() => setEditModal({ open: false, registro: null })}>
                Cancelar
              </button>
            </div>
          </form>
        </div>
      )}

      {loading && <Loader text="Cargando datos..." />}
      {error && <div className="error-message">{error}</div>}
    </div>
  )
}


----- C:\parking-app\src\components\ResumenRegistros.jsx -----

// src/components/ResumenRegistros.jsx
import React from 'react'
import Emoji from './Emoji'

export default function ResumenRegistros({ registros = [] }) {
  const resumen = registros.reduce((acc, reg) => {
    if (reg.gratis) acc.gratis++
    else if (reg.recaudado) acc.recaudado += Number(reg.monto)
    else acc.pendiente += Number(reg.monto)
    acc.total += Number(reg.monto)
    acc.cantidad++
    return acc
  }, { recaudado: 0, pendiente: 0, gratis: 0, total: 0, cantidad: 0 })

  return (
    <div style={{
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(160px, 1fr))',
      gap: '1rem',
      padding: '1rem',
      background: 'rgba(255, 255, 255, 0.1)',
      borderRadius: '12px',
      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
    }}>
      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem' }}>
          <Emoji symbol="üí∞" /> ${resumen.recaudado.toFixed(2)}
        </div>
        <small style={{ color: '#666' }}>Recaudado</small>
      </div>

      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem' }}>
          <Emoji symbol="‚è≥" /> ${resumen.pendiente.toFixed(2)}
        </div>
        <small style={{ color: '#666' }}>Pendiente</small>
      </div>

      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem' }}>
          <Emoji symbol="üÜì" /> {resumen.gratis}
        </div>
        <small style={{ color: '#666' }}>Gratis</small>
      </div>

      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem' }}>
          <Emoji symbol="üìã" /> {resumen.cantidad}
        </div>
        <small style={{ color: '#666' }}>Registros</small>
      </div>

      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem' }}>
          <Emoji symbol="üßæ" /> ${resumen.total.toFixed(2)}
        </div>
        <small style={{ color: '#666' }}>Total</small>
      </div>
    </div>
  )
}


----- C:\parking-app\src\components\SelectorDeFoto.jsx -----

// src/components/SelectorDeFoto.jsx
import React, { useState } from 'react'
import CapturaCamara from './CapturaCamara'

export default function SelectorDeFoto({ onFileSelected }) {
  const [modo, setModo] = useState('camara') // 'camara' o 'galeria'

  const handleFile = file => {
    onFileSelected(file)
  }

  return (
    <div className="selector-foto">
      <div className="modos-seleccion">
        <button
          type="button"
          onClick={() => setModo('camara')}
          className={modo === 'camara' ? 'active' : ''}
        >
          üì∏ Usar C√°mara
        </button>
        <button
          type="button"
          onClick={() => setModo('galeria')}
          className={modo === 'galeria' ? 'active' : ''}
        >
          üñºÔ∏è Subir Archivo
        </button>
      </div>

      {modo === 'camara' ? (
        <CapturaCamara onCaptura={handleFile} />
      ) : (
        <input
          type="file"
          accept="image/*"
          onChange={e => {
            if (e.target.files && e.target.files[0]) {
              handleFile(e.target.files[0])
            }
          }}
        />
      )}
    </div>
  )
}


----- C:\parking-app\src\hooks\useHover.jsx -----

import { useRef, useState, useEffect } from 'react';

export default function useHover() {
  const ref = useRef(null);
  const [isHovered, setIsHovered] = useState(false);

  useEffect(() => {
    const node = ref.current;
    if (!node) return;

    const handleMouseEnter = () => setIsHovered(true);
    const handleMouseLeave = () => setIsHovered(false);

    node.addEventListener('mouseenter', handleMouseEnter);
    node.addEventListener('mouseleave', handleMouseLeave);

    return () => {
      node.removeEventListener('mouseenter', handleMouseEnter);
      node.removeEventListener('mouseleave', handleMouseLeave);
    };
  }, [ref]);

  return [ref, isHovered];
}


----- C:\parking-app\src\hooks\useOnlineStatus.jsx -----

// src/hooks/useOnlineStatus.jsx
import { useState, useEffect } from 'react'

export default function useOnlineStatus() {
  const [isOnline, setIsOnline] = useState(navigator.onLine)
  useEffect(() => {
    const update = () => setIsOnline(navigator.onLine)
    window.addEventListener('online', update)
    window.addEventListener('offline', update)
    return () => {
      window.removeEventListener('online', update)
      window.removeEventListener('offline', update)
    }
  }, [])
  return isOnline
}


----- C:\parking-app\src\styles\global.css -----

/* global.css - Moderno, accesible, responsivo, claro/oscuro */

/* Variables globales para temas */
:root {
  --background: #f8fafc;
  --surface: #fff;
  --text: #18181b;
  --text-muted: #6b7280;
  --primary: #6366f1;
  --primary-light: #e0e7ff;
  --secondary: #38bdf8;
  --accent: #ff6f91;
  --success: #10b981;
  --warning: #f59e42;
  --danger: #ef4444;
  --radius-lg: 20px;
  --radius-md: 12px;
  --radius-sm: 6px;
  --shadow-lg: 0 8px 32px #6366f133;
  --shadow-md: 0 2px 12px #6366f144;
  --transition: 0.22s cubic-bezier(.4,0,.2,1);
  --font-main: 'Inter', 'Segoe UI', Arial, sans-serif;
  --focus: #ff6f91;
}

[data-theme="dark"] {
  --background: #18181b;
  --surface: #23272f;
  --text: #f3f4f6;
  --text-muted: #a1a1aa;
  --primary: #818cf8;
  --primary-light: #23272f;
  --secondary: #38bdf8;
  --accent: #f472b6;
  --shadow-lg: 0 8px 32px #818cf833;
  --shadow-md: 0 2px 12px #818cf844;
}

/* Base */
html, body {
  margin: 0;
  padding: 0;
  font-family: var(--font-main);
  background: var(--background);
  color: var(--text);
  min-height: 100vh;
  scroll-behavior: smooth;
  text-align: center;
  transition: background var(--transition), color var(--transition);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#root, .app-root {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  background: var(--background);
}

/* Links accesibles */
a {
  color: var(--primary);
  text-decoration: none;
  transition: color var(--transition);
}
a:hover, a:focus {
  color: var(--accent);
  text-decoration: underline;
  outline-offset: 2px;
  outline: 2px solid var(--accent);
}

/* Headings */
h1, h2, h3, h4 {
  font-weight: 800;
  letter-spacing: -1px;
  margin-top: 0;
  text-align: center;
  line-height: 1.2;
}

/* Botones y formularios */
button, input, select, textarea {
  font-family: inherit;
  font-size: 1rem;
  border-radius: var(--radius-md);
  border: 1.5px solid #e5e7eb;
  padding: 10px 14px;
  outline-offset: 2px;
  transition: border-color var(--transition), background var(--transition), box-shadow var(--transition);
  margin: 0.25rem 0;
  box-sizing: border-box;
}

button {
  cursor: pointer;
  background: var(--primary);
  color: var(--text-muted);
  color: var(--text-light);
  border: none;
  font-weight: 600;
  box-shadow: var(--shadow-md);
  min-width: 120px;
  min-height: 44px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  user-select: none;
}
button:hover, button:focus, .btn-disruptivo:hover, .menu-button:hover {
  background: linear-gradient(90deg, var(--secondary) 60%, var(--accent) 100%);
  outline: none;
  box-shadow: 0 0 0 3px var(--focus);
}
button:focus-visible {
  outline: 3px solid var(--focus);
  outline-offset: 3px;
}

.btn-disruptivo {
  background: linear-gradient(90deg, var(--primary) 60%, var(--secondary) 100%);
  color: #fff;
  font-weight: 700;
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-lg);
  padding: 14px 0;
  font-size: 1.1rem;
  width: 100%;
  max-width: 340px;
  margin: 1rem auto;
}

/* Inputs focus accesible */
input:focus, select:focus, textarea:focus {
  border-color: var(--primary);
  background: #f0f9ff;
  box-shadow: 0 0 0 3px var(--focus);
}

/* Checkbox y radio accesibles */
input[type="checkbox"], input[type="radio"] {
  width: 1.1em;
  height: 1.1em;
  accent-color: var(--primary);
  margin-right: 7px;
  cursor: pointer;
}

/* Scrollbar personalizados */
::-webkit-scrollbar {
  width: 10px;
  background: #e0e7ef;
}
::-webkit-scrollbar-thumb {
  background: var(--primary);
  border-radius: 8px;
}

/* Layout y contenedores */
.header-gradient {
  background: linear-gradient(90deg, var(--primary) 0%, var(--secondary) 100%);
  color: #fff;
  padding: 2.5rem 0 1.2rem 0;
  border-bottom-left-radius: var(--radius-lg);
  border-bottom-right-radius: var(--radius-lg);
  box-shadow: var(--shadow-lg);
  width: 100vw;
  text-align: center;
}

.topbar-center {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 16px;
  margin-bottom: 1.2rem;
  flex-wrap: wrap;
}

.header-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.2rem;
  width: 100%;
  max-width: 900px;
  margin: 0 auto;
}

.conjunto-title {
  font-size: 2.1rem;
  font-weight: 900;
  color: #fff;
  text-shadow: 0 2px 8px #0003;
  justify-content: center;
}

.subtitle {
  font-size: 1.15rem;
  color: #e0e7ef;
  font-weight: 600;
}

.footer {
  margin-top: 3rem;
  text-align: center;
  background: linear-gradient(90deg, var(--primary) 0%, var(--secondary) 100%);
  color: #fff;
  border-top-left-radius: var(--radius-lg);
  border-top-right-radius: var(--radius-lg);
  box-shadow: var(--shadow-lg);
  font-size: 1.08rem;
  padding: 1.2rem 0;
  width: 100vw;
}

.main-content {
  width: 100vw;
  max-width: 700px;
  margin: 0 auto;
  padding: 2.2rem 1rem 1.2rem 1rem;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.menu-container {
  margin: 1.5rem 0 1.5rem 0;
  display: flex;
  justify-content: center;
  width: 100vw;
}

/* Formularios y filtros */
.filtros-form {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 1.2rem;
}
.filtros-grid {
  display: flex;
  flex-wrap: wrap;
  gap: 1.2rem;
  justify-content: center;
  margin-bottom: 1rem;
  width: 100%;
}
.filtro-item {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  min-width: 140px;
  font-size: 1em;
}
.acciones-filtros {
  display: flex;
  gap: 1rem;
  justify-content: center;
  margin-top: 1rem;
}

/* Tablas */
.resultados-table-container {
  width: 100%;
  margin: 0 auto;
  overflow-x: auto;
  max-height: 500px;
  overflow-y: auto;
  border: 1px solid #ccc;
  border-radius: var(--radius-md);
  box-shadow: var(--shadow-md);
}
.resultados-table, .registros-table {
  width: max-content;
  min-width: 100%;
  border-collapse: collapse;
  margin-top: 1.2rem;
  background: var(--surface);
  border-radius: var(--radius-md);
  overflow: hidden;
  box-shadow: var(--shadow-md);
  margin-left: auto;
  margin-right: auto;
}
.resultados-table th, .registros-table th {
  background: var(--primary);
  color: #fff;
  font-weight: 800;
  padding: 10px 6px;
  text-align: center;
  position: sticky;
  top: 0;
  z-index: 10;
}
.resultados-table td, .registros-table td {
  padding: 10px 6px;
  text-align: center;
  border-bottom: 1px solid #e5e7eb;
  font-size: 1.02em;
}
.resultados-table tr:last-child td, .registros-table tr:last-child td {
  border-bottom: none;
}
.resultados-table tr:hover, .registros-table tr:hover {
  background: #f1f5f9;
}
.thumbnail {
  width: 38px;
  height: 38px;
  object-fit: cover;
  border-radius: var(--radius-sm);
  box-shadow: 0 2px 6px #6366f133;
}
.sin-resultados {
  color: var(--text-muted);
  font-size: 1.1em;
  text-align: center;
  padding: 1.2em 0;
}

/* Mensajes */
.info-message, .error-message {
  margin-top: 1rem;
  padding: 12px 18px;
  border-radius: var(--radius-md);
  font-size: 1.06em;
  font-weight: 600;
  text-align: center;
  max-width: 700px;
  word-wrap: break-word;
}
.info-message {
  background: #e0ffe8;
  color: var(--success);
  border: 1.5px solid #22c55e;
}
.error-message {
  background: #fffbe6;
  color: var(--danger);
  border: 1.5px solid #ffe58f;
}

/* Modales */
.modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(24, 24, 27, 0.75);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}
.modal-content {
  background: var(--surface);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-lg);
  padding: 2rem;
  max-width: 480px;
  width: 90vw;
  max-height: 90vh;
  overflow-y: auto;
  text-align: left;
}
.modal-content h3 {
  margin-top: 0;
  margin-bottom: 1rem;
  font-weight: 800;
  font-size: 1.5rem;
}

/* Inputs dentro modal */
.modal-form label {
  display: flex;
  flex-direction: column;
  margin-bottom: 1rem;
  font-weight: 600;
}
.modal-form input[type="text"],
.modal-form input[type="email"],
.modal-form input[type="date"],
.modal-form select,
.modal-form textarea {
  font-size: 1rem;
  padding: 8px 12px;
  border-radius: var(--radius-md);
  border: 1.5px solid #d1d5db;
  margin-top: 6px;
  resize: vertical;
}
.modal-form input[type="checkbox"] {
  width: 1.2em;
  height: 1.2em;
  margin-right: 8px;
  accent-color: var(--primary);
  cursor: pointer;
}
.modal-form .checkbox-label {
  display: flex;
  align-items: center;
  font-weight: 600;
  margin-bottom: 1rem;
}
.acciones-modal {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
}
.save-btn, .cancel-btn {
  padding: 10px 18px;
  border-radius: var(--radius-md);
  font-weight: 700;
  font-size: 1rem;
  cursor: pointer;
  border: none;
  min-width: 100px;
  transition: background var(--transition);
}
.save-btn {
  background: var(--primary);
  color: var(--text-light);
}
.save-btn:hover, .save-btn:focus-visible {
  background: var(--secondary);
  outline: none;
  box-shadow: 0 0 0 3px var(--focus);
}
.cancel-btn {
  background: #ccc;
  color: #333;
}
.cancel-btn:hover, .cancel-btn:focus-visible {
  background: #999;
  outline: none;
  box-shadow: 0 0 0 3px var(--focus);
}

/* Focus visible para accesibilidad */
:focus-visible {
  outline: 3px solid var(--focus);
  outline-offset: 3px;
}

/* Responsive */
@media (max-width: 768px) {
  .filtros-grid {
    flex-direction: column;
    align-items: center;
  }
  .filtro-item {
    min-width: 100%;
  }
  .resultados-table-container {
    max-height: 300px;
  }
}

/* Emoji buttons */
.emoji-selector {
  font-size: 1.8rem;
  border: 2px solid transparent;
  border-radius: var(--radius-md);
  padding: 6px 12px;
  cursor: pointer;
  background: transparent;
  transition: border-color var(--transition);
}
.emoji-selector.selected, .emoji-selector:hover, .emoji-selector:focus-visible {
  border-color: var(--primary);
  outline: none;
  box-shadow: 0 0 0 3px var(--focus);
}

/* Inputs modernos */
.input-modern {
  font-size: 1rem;
  padding: 10px 12px;
  border-radius: var(--radius-md);
  border: 1.5px solid #d1c4e9;
  transition: border-color var(--transition);
}
.input-modern:focus {
  border-color: var(--primary);
  outline: none;
  box-shadow: 0 0 0 3px var(--focus);
}
.input-error {
  border-color: var(--danger);
}

/* Loader */
.loader {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 120px;
  width: 100%;
}
@keyframes spin {
  0% { transform: rotate(0deg);}
  100% { transform: rotate(360deg);}
}
.loader-spinner {
  width: 48px;
  height: 48px;
  border: 6px solid #e0e0e0;
  border-top: 6px solid var(--primary);
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
}

/* Accessibility: reduce motion for users who prefer it */
@media (prefers-reduced-motion: reduce) {
  *, *::before, *::after {
    animation-duration: 0.001ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.001ms !important;
    scroll-behavior: auto !important;
  }
}
