LISTA DE ARCHIVOS PROCESADOS:
C:\ThomasParking\ThomasParking\dist\assets\index-C5U9KVgd.css
C:\ThomasParking\ThomasParking\src\App.jsx
C:\ThomasParking\ThomasParking\src\main.jsx
C:\ThomasParking\ThomasParking\src\components\AuthGuard.jsx
C:\ThomasParking\ThomasParking\src\components\CapturaCamara.jsx
C:\ThomasParking\ThomasParking\src\components\DetalleConsulta.jsx
C:\ThomasParking\ThomasParking\src\components\Emoji.jsx
C:\ThomasParking\ThomasParking\src\components\ErrorBoundary.jsx
C:\ThomasParking\ThomasParking\src\components\ErrorMessage.jsx
C:\ThomasParking\ThomasParking\src\components\Filtros.jsx
C:\ThomasParking\ThomasParking\src\components\Footer.jsx
C:\ThomasParking\ThomasParking\src\components\ListaRegistros.jsx
C:\ThomasParking\ThomasParking\src\components\Loader.jsx
C:\ThomasParking\ThomasParking\src\components\LoadingOverlay.jsx
C:\ThomasParking\ThomasParking\src\components\LoadingScreen.jsx
C:\ThomasParking\ThomasParking\src\components\Modal.jsx
C:\ThomasParking\ThomasParking\src\components\Navbar.jsx
C:\ThomasParking\ThomasParking\src\components\ResumenRegistros.jsx
C:\ThomasParking\ThomasParking\src\components\SelectorDeFoto.jsx
C:\ThomasParking\ThomasParking\src\components\SignUp.jsx
C:\ThomasParking\ThomasParking\src\components\SyncIndicator.jsx
C:\ThomasParking\ThomasParking\src\components\TablaResultados.jsx
C:\ThomasParking\ThomasParking\src\components\ThemeToggle.jsx
C:\ThomasParking\ThomasParking\src\context\ThemeContext.jsx
C:\ThomasParking\ThomasParking\src\context\ViewContext.jsx
C:\ThomasParking\ThomasParking\src\hooks\useHover.jsx
C:\ThomasParking\ThomasParking\src\hooks\useOnlineStatus.jsx
C:\ThomasParking\ThomasParking\src\pages\AcercaDe.jsx
C:\ThomasParking\ThomasParking\src\pages\CapturaFoto.jsx
C:\ThomasParking\ThomasParking\src\pages\Consultas.jsx
C:\ThomasParking\ThomasParking\src\pages\DescargoGestion.jsx
C:\ThomasParking\ThomasParking\src\pages\GestionCopropietarios.jsx
C:\ThomasParking\ThomasParking\src\pages\GestionUsuarios.jsx
C:\ThomasParking\ThomasParking\src\pages\Login.jsx
C:\ThomasParking\ThomasParking\src\pages\RegistroParqueo.jsx
C:\ThomasParking\ThomasParking\src\pages\ResumenRecaudo.jsx
C:\ThomasParking\ThomasParking\src\providers\QueryClientProvider.jsx
C:\ThomasParking\ThomasParking\src\styles\global.css

============================================================



----- C:\ThomasParking\ThomasParking\dist\assets\index-C5U9KVgd.css -----

@charset "UTF-8";.react-datepicker__year-read-view--down-arrow,.react-datepicker__month-read-view--down-arrow,.react-datepicker__month-year-read-view--down-arrow,.react-datepicker__navigation-icon:before{border-color:#ccc;border-style:solid;border-width:3px 3px 0 0;content:"";display:block;height:9px;position:absolute;top:6px;width:9px}.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle,.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle{margin-left:-4px;position:absolute;width:0}.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle:before,.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle:before,.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle:after,.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle:after{box-sizing:content-box;position:absolute;border:8px solid transparent;height:0;width:1px;content:"";z-index:-1;border-width:8px;left:-8px}.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle:before,.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle:before{border-bottom-color:#aeaeae}.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle{top:0;margin-top:-8px}.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle:before,.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle:after{border-top:none;border-bottom-color:#f0f0f0}.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle:after{top:0}.react-datepicker-popper[data-placement^=bottom] .react-datepicker__triangle:before{top:-1px;border-bottom-color:#aeaeae}.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle{bottom:0;margin-bottom:-8px}.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle:before,.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle:after{border-bottom:none;border-top-color:#fff}.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle:after{bottom:0}.react-datepicker-popper[data-placement^=top] .react-datepicker__triangle:before{bottom:-1px;border-top-color:#aeaeae}.react-datepicker-wrapper{display:inline-block;padding:0;border:0}.react-datepicker{font-family:Helvetica Neue,helvetica,arial,sans-serif;font-size:.8rem;background-color:#fff;color:#000;border:1px solid #aeaeae;border-radius:.3rem;display:inline-block;position:relative}.react-datepicker--time-only .react-datepicker__triangle{left:35px}.react-datepicker--time-only .react-datepicker__time-container{border-left:0}.react-datepicker--time-only .react-datepicker__time,.react-datepicker--time-only .react-datepicker__time-box{border-bottom-left-radius:.3rem;border-bottom-right-radius:.3rem}.react-datepicker__triangle{position:absolute;left:50px}.react-datepicker-popper{z-index:1}.react-datepicker-popper[data-placement^=bottom]{padding-top:10px}.react-datepicker-popper[data-placement=bottom-end] .react-datepicker__triangle,.react-datepicker-popper[data-placement=top-end] .react-datepicker__triangle{left:auto;right:50px}.react-datepicker-popper[data-placement^=top]{padding-bottom:10px}.react-datepicker-popper[data-placement^=right]{padding-left:8px}.react-datepicker-popper[data-placement^=right] .react-datepicker__triangle{left:auto;right:42px}.react-datepicker-popper[data-placement^=left]{padding-right:8px}.react-datepicker-popper[data-placement^=left] .react-datepicker__triangle{left:42px;right:auto}.react-datepicker__header{text-align:center;background-color:#f0f0f0;border-bottom:1px solid #aeaeae;border-top-left-radius:.3rem;padding:8px 0;position:relative}.react-datepicker__header--time{padding-bottom:8px;padding-left:5px;padding-right:5px}.react-datepicker__header--time:not(.react-datepicker__header--time--only){border-top-left-radius:0}.react-datepicker__header:not(.react-datepicker__header--has-time-select){border-top-right-radius:.3rem}.react-datepicker__year-dropdown-container--select,.react-datepicker__month-dropdown-container--select,.react-datepicker__month-year-dropdown-container--select,.react-datepicker__year-dropdown-container--scroll,.react-datepicker__month-dropdown-container--scroll,.react-datepicker__month-year-dropdown-container--scroll{display:inline-block;margin:0 15px}.react-datepicker__current-month,.react-datepicker-time__header,.react-datepicker-year-header{margin-top:0;color:#000;font-weight:700;font-size:.944rem}.react-datepicker-time__header{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.react-datepicker__navigation{align-items:center;background:none;display:flex;justify-content:center;text-align:center;cursor:pointer;position:absolute;top:2px;padding:0;border:none;z-index:1;height:32px;width:32px;text-indent:-999em;overflow:hidden}.react-datepicker__navigation--previous{left:2px}.react-datepicker__navigation--next{right:2px}.react-datepicker__navigation--next--with-time:not(.react-datepicker__navigation--next--with-today-button){right:85px}.react-datepicker__navigation--years{position:relative;top:0;display:block;margin-left:auto;margin-right:auto}.react-datepicker__navigation--years-previous{top:4px}.react-datepicker__navigation--years-upcoming{top:-4px}.react-datepicker__navigation:hover *:before{border-color:#a6a6a6}.react-datepicker__navigation-icon{position:relative;top:-1px;font-size:20px;width:0}.react-datepicker__navigation-icon--next{left:-2px}.react-datepicker__navigation-icon--next:before{transform:rotate(45deg);left:-7px}.react-datepicker__navigation-icon--previous{right:-2px}.react-datepicker__navigation-icon--previous:before{transform:rotate(225deg);right:-7px}.react-datepicker__month-container{float:left}.react-datepicker__year{margin:.4rem;text-align:center}.react-datepicker__year-wrapper{display:flex;flex-wrap:wrap;max-width:180px}.react-datepicker__year .react-datepicker__year-text{display:inline-block;width:4rem;margin:2px}.react-datepicker__month{margin:.4rem;text-align:center}.react-datepicker__month .react-datepicker__month-text,.react-datepicker__month .react-datepicker__quarter-text{display:inline-block;width:4rem;margin:2px}.react-datepicker__input-time-container{clear:both;width:100%;float:left;margin:5px 0 10px 15px;text-align:left}.react-datepicker__input-time-container .react-datepicker-time__caption,.react-datepicker__input-time-container .react-datepicker-time__input-container{display:inline-block}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input{display:inline-block;margin-left:10px}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input{width:auto}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input[type=time]::-webkit-inner-spin-button,.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input[type=time]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__input input[type=time]{-moz-appearance:textfield}.react-datepicker__input-time-container .react-datepicker-time__input-container .react-datepicker-time__delimiter{margin-left:5px;display:inline-block}.react-datepicker__time-container{float:right;border-left:1px solid #aeaeae;width:85px}.react-datepicker__time-container--with-today-button{display:inline;border:1px solid #aeaeae;border-radius:.3rem;position:absolute;right:-87px;top:0}.react-datepicker__time-container .react-datepicker__time{position:relative;background:#fff;border-bottom-right-radius:.3rem}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box{width:85px;overflow-x:hidden;margin:0 auto;text-align:center;border-bottom-right-radius:.3rem}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list{list-style:none;margin:0;height:calc(195px + .85rem);overflow-y:scroll;padding-right:0;padding-left:0;width:100%;box-sizing:content-box}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item{height:30px;padding:5px 10px;white-space:nowrap}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item:hover{cursor:pointer;background-color:#f0f0f0}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected{background-color:#216ba5;color:#fff;font-weight:700}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected:hover{background-color:#216ba5}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled{color:#ccc}.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled:hover{cursor:default;background-color:transparent}.react-datepicker__week-number{color:#ccc;display:inline-block;width:1.7rem;line-height:1.7rem;text-align:center;margin:.166rem}.react-datepicker__week-number.react-datepicker__week-number--clickable{cursor:pointer}.react-datepicker__week-number.react-datepicker__week-number--clickable:not(.react-datepicker__week-number--selected,.react-datepicker__week-number--keyboard-selected):hover{border-radius:.3rem;background-color:#f0f0f0}.react-datepicker__week-number--selected{border-radius:.3rem;background-color:#216ba5;color:#fff}.react-datepicker__week-number--selected:hover{background-color:#1d5d90}.react-datepicker__week-number--keyboard-selected{border-radius:.3rem;background-color:#2a87d0;color:#fff}.react-datepicker__week-number--keyboard-selected:hover{background-color:#1d5d90}.react-datepicker__day-names{white-space:nowrap;margin-bottom:-8px}.react-datepicker__week{white-space:nowrap}.react-datepicker__day-name,.react-datepicker__day,.react-datepicker__time-name{color:#000;display:inline-block;width:1.7rem;line-height:1.7rem;text-align:center;margin:.166rem}.react-datepicker__day,.react-datepicker__month-text,.react-datepicker__quarter-text,.react-datepicker__year-text{cursor:pointer}.react-datepicker__day:hover,.react-datepicker__month-text:hover,.react-datepicker__quarter-text:hover,.react-datepicker__year-text:hover{border-radius:.3rem;background-color:#f0f0f0}.react-datepicker__day--today,.react-datepicker__month-text--today,.react-datepicker__quarter-text--today,.react-datepicker__year-text--today{font-weight:700}.react-datepicker__day--highlighted,.react-datepicker__month-text--highlighted,.react-datepicker__quarter-text--highlighted,.react-datepicker__year-text--highlighted{border-radius:.3rem;background-color:#3dcc4a;color:#fff}.react-datepicker__day--highlighted:hover,.react-datepicker__month-text--highlighted:hover,.react-datepicker__quarter-text--highlighted:hover,.react-datepicker__year-text--highlighted:hover{background-color:#32be3f}.react-datepicker__day--highlighted-custom-1,.react-datepicker__month-text--highlighted-custom-1,.react-datepicker__quarter-text--highlighted-custom-1,.react-datepicker__year-text--highlighted-custom-1{color:#f0f}.react-datepicker__day--highlighted-custom-2,.react-datepicker__month-text--highlighted-custom-2,.react-datepicker__quarter-text--highlighted-custom-2,.react-datepicker__year-text--highlighted-custom-2{color:green}.react-datepicker__day--holidays,.react-datepicker__month-text--holidays,.react-datepicker__quarter-text--holidays,.react-datepicker__year-text--holidays{position:relative;border-radius:.3rem;background-color:#ff6803;color:#fff}.react-datepicker__day--holidays .holiday-overlay,.react-datepicker__month-text--holidays .holiday-overlay,.react-datepicker__quarter-text--holidays .holiday-overlay,.react-datepicker__year-text--holidays .holiday-overlay{position:absolute;bottom:100%;left:50%;transform:translate(-50%);background-color:#333;color:#fff;padding:4px;border-radius:4px;white-space:nowrap;visibility:hidden;opacity:0;transition:visibility 0s,opacity .3s ease-in-out}.react-datepicker__day--holidays:hover,.react-datepicker__month-text--holidays:hover,.react-datepicker__quarter-text--holidays:hover,.react-datepicker__year-text--holidays:hover{background-color:#cf5300}.react-datepicker__day--holidays:hover .holiday-overlay,.react-datepicker__month-text--holidays:hover .holiday-overlay,.react-datepicker__quarter-text--holidays:hover .holiday-overlay,.react-datepicker__year-text--holidays:hover .holiday-overlay{visibility:visible;opacity:1}.react-datepicker__day--selected,.react-datepicker__day--in-selecting-range,.react-datepicker__day--in-range,.react-datepicker__month-text--selected,.react-datepicker__month-text--in-selecting-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--selected,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--selected,.react-datepicker__year-text--in-selecting-range,.react-datepicker__year-text--in-range{border-radius:.3rem;background-color:#216ba5;color:#fff}.react-datepicker__day--selected:hover,.react-datepicker__day--in-selecting-range:hover,.react-datepicker__day--in-range:hover,.react-datepicker__month-text--selected:hover,.react-datepicker__month-text--in-selecting-range:hover,.react-datepicker__month-text--in-range:hover,.react-datepicker__quarter-text--selected:hover,.react-datepicker__quarter-text--in-selecting-range:hover,.react-datepicker__quarter-text--in-range:hover,.react-datepicker__year-text--selected:hover,.react-datepicker__year-text--in-selecting-range:hover,.react-datepicker__year-text--in-range:hover{background-color:#1d5d90}.react-datepicker__day--keyboard-selected,.react-datepicker__month-text--keyboard-selected,.react-datepicker__quarter-text--keyboard-selected,.react-datepicker__year-text--keyboard-selected{border-radius:.3rem;background-color:#bad9f1;color:#000}.react-datepicker__day--keyboard-selected:hover,.react-datepicker__month-text--keyboard-selected:hover,.react-datepicker__quarter-text--keyboard-selected:hover,.react-datepicker__year-text--keyboard-selected:hover{background-color:#1d5d90}.react-datepicker__day--in-selecting-range:not(.react-datepicker__day--in-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--in-range),.react-datepicker__month-text--in-selecting-range:not(.react-datepicker__day--in-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--in-range),.react-datepicker__quarter-text--in-selecting-range:not(.react-datepicker__day--in-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--in-range),.react-datepicker__year-text--in-selecting-range:not(.react-datepicker__day--in-range,.react-datepicker__month-text--in-range,.react-datepicker__quarter-text--in-range,.react-datepicker__year-text--in-range){background-color:#216ba580}.react-datepicker__month--selecting-range .react-datepicker__day--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__year--selecting-range .react-datepicker__day--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__month--selecting-range .react-datepicker__month-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__year--selecting-range .react-datepicker__month-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__month--selecting-range .react-datepicker__quarter-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__year--selecting-range .react-datepicker__quarter-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__month--selecting-range .react-datepicker__year-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range),.react-datepicker__year--selecting-range .react-datepicker__year-text--in-range:not(.react-datepicker__day--in-selecting-range,.react-datepicker__month-text--in-selecting-range,.react-datepicker__quarter-text--in-selecting-range,.react-datepicker__year-text--in-selecting-range){background-color:#f0f0f0;color:#000}.react-datepicker__day--disabled,.react-datepicker__month-text--disabled,.react-datepicker__quarter-text--disabled,.react-datepicker__year-text--disabled{cursor:default;color:#ccc}.react-datepicker__day--disabled:hover,.react-datepicker__month-text--disabled:hover,.react-datepicker__quarter-text--disabled:hover,.react-datepicker__year-text--disabled:hover{background-color:transparent}.react-datepicker__input-container{position:relative;display:inline-block;width:100%}.react-datepicker__input-container .react-datepicker__calendar-icon{position:absolute;padding:.5rem;box-sizing:content-box}.react-datepicker__view-calendar-icon input{padding:6px 10px 5px 25px}.react-datepicker__year-read-view,.react-datepicker__month-read-view,.react-datepicker__month-year-read-view{border:1px solid transparent;border-radius:.3rem;position:relative}.react-datepicker__year-read-view:hover,.react-datepicker__month-read-view:hover,.react-datepicker__month-year-read-view:hover{cursor:pointer}.react-datepicker__year-read-view:hover .react-datepicker__year-read-view--down-arrow,.react-datepicker__year-read-view:hover .react-datepicker__month-read-view--down-arrow,.react-datepicker__month-read-view:hover .react-datepicker__year-read-view--down-arrow,.react-datepicker__month-read-view:hover .react-datepicker__month-read-view--down-arrow,.react-datepicker__month-year-read-view:hover .react-datepicker__year-read-view--down-arrow,.react-datepicker__month-year-read-view:hover .react-datepicker__month-read-view--down-arrow{border-top-color:#b3b3b3}.react-datepicker__year-read-view--down-arrow,.react-datepicker__month-read-view--down-arrow,.react-datepicker__month-year-read-view--down-arrow{transform:rotate(135deg);right:-16px;top:0}.react-datepicker__year-dropdown,.react-datepicker__month-dropdown,.react-datepicker__month-year-dropdown{background-color:#f0f0f0;position:absolute;width:50%;left:25%;top:30px;z-index:1;text-align:center;border-radius:.3rem;border:1px solid #aeaeae}.react-datepicker__year-dropdown:hover,.react-datepicker__month-dropdown:hover,.react-datepicker__month-year-dropdown:hover{cursor:pointer}.react-datepicker__year-dropdown--scrollable,.react-datepicker__month-dropdown--scrollable,.react-datepicker__month-year-dropdown--scrollable{height:150px;overflow-y:scroll}.react-datepicker__year-option,.react-datepicker__month-option,.react-datepicker__month-year-option{line-height:20px;width:100%;display:block;margin-left:auto;margin-right:auto}.react-datepicker__year-option:first-of-type,.react-datepicker__month-option:first-of-type,.react-datepicker__month-year-option:first-of-type{border-top-left-radius:.3rem;border-top-right-radius:.3rem}.react-datepicker__year-option:last-of-type,.react-datepicker__month-option:last-of-type,.react-datepicker__month-year-option:last-of-type{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border-bottom-left-radius:.3rem;border-bottom-right-radius:.3rem}.react-datepicker__year-option:hover,.react-datepicker__month-option:hover,.react-datepicker__month-year-option:hover{background-color:#ccc}.react-datepicker__year-option:hover .react-datepicker__navigation--years-upcoming,.react-datepicker__month-option:hover .react-datepicker__navigation--years-upcoming,.react-datepicker__month-year-option:hover .react-datepicker__navigation--years-upcoming{border-bottom-color:#b3b3b3}.react-datepicker__year-option:hover .react-datepicker__navigation--years-previous,.react-datepicker__month-option:hover .react-datepicker__navigation--years-previous,.react-datepicker__month-year-option:hover .react-datepicker__navigation--years-previous{border-top-color:#b3b3b3}.react-datepicker__year-option--selected,.react-datepicker__month-option--selected,.react-datepicker__month-year-option--selected{position:absolute;left:15px}.react-datepicker__close-icon{cursor:pointer;background-color:transparent;border:0;outline:0;padding:0 6px 0 0;position:absolute;top:0;right:0;height:100%;display:table-cell;vertical-align:middle}.react-datepicker__close-icon:after{cursor:pointer;background-color:#216ba5;color:#fff;border-radius:50%;height:16px;width:16px;padding:2px;font-size:12px;line-height:1;text-align:center;display:table-cell;vertical-align:middle;content:"×"}.react-datepicker__close-icon--disabled{cursor:default}.react-datepicker__close-icon--disabled:after{cursor:default;background-color:#ccc}.react-datepicker__today-button{background:#f0f0f0;border-top:1px solid #aeaeae;cursor:pointer;text-align:center;font-weight:700;padding:5px 0;clear:left}.react-datepicker__portal{position:fixed;width:100vw;height:100vh;background-color:#000c;left:0;top:0;justify-content:center;align-items:center;display:flex;z-index:2147483647}.react-datepicker__portal .react-datepicker__day-name,.react-datepicker__portal .react-datepicker__day,.react-datepicker__portal .react-datepicker__time-name{width:3rem;line-height:3rem}@media (max-width: 400px),(max-height: 550px){.react-datepicker__portal .react-datepicker__day-name,.react-datepicker__portal .react-datepicker__day,.react-datepicker__portal .react-datepicker__time-name{width:2rem;line-height:2rem}}.react-datepicker__portal .react-datepicker__current-month,.react-datepicker__portal .react-datepicker-time__header{font-size:1.44rem}.react-datepicker__children-container{width:13.8rem;margin:.4rem;padding-right:.2rem;padding-left:.2rem;height:auto}.react-datepicker__aria-live{position:absolute;clip-path:circle(0);border:0;height:1px;margin:-1px;overflow:hidden;padding:0;width:1px;white-space:nowrap}.react-datepicker__calendar-icon{width:1em;height:1em;vertical-align:-.125em}:root{--background: #f8fafc;--surface: #fff;--text: #18181b;--text-muted: #6b7280;--primary: #6366f1;--primary-light: #e0e7ff;--secondary: #38bdf8;--accent: #ff6f91;--success: #10b981;--warning: #f59e42;--danger: #ef4444;--radius-lg: 20px;--radius-md: 12px;--radius-sm: 6px;--shadow-lg: 0 8px 32px #6366f133;--shadow-md: 0 2px 12px #6366f144;--transition: .22s cubic-bezier(.4,0,.2,1);--font-main: "Inter", "Segoe UI", Arial, sans-serif;--focus: #ff6f91}[data-theme=dark]{--background: #18181b;--surface: #23272f;--text: #f3f4f6;--text-muted: #a1a1aa;--primary: #818cf8;--primary-light: #23272f;--secondary: #38bdf8;--accent: #f472b6;--shadow-lg: 0 8px 32px #818cf833;--shadow-md: 0 2px 12px #818cf844}html,body{margin:0;padding:0;font-family:var(--font-main);background:var(--background);color:var(--text);min-height:100vh;scroll-behavior:smooth;text-align:center;transition:background var(--transition),color var(--transition);-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}#root,.app-root{min-height:100vh;display:flex;flex-direction:column;align-items:center;background:var(--background)}a{color:var(--primary);text-decoration:none;transition:color var(--transition)}a:hover,a:focus{color:var(--accent);text-decoration:underline;outline-offset:2px;outline:2px solid var(--accent)}h1,h2,h3,h4{font-weight:800;letter-spacing:-1px;margin-top:0;text-align:center;line-height:1.2}button,input,select,textarea{font-family:inherit;font-size:1rem;border-radius:var(--radius-md);border:1.5px solid #e5e7eb;padding:10px 14px;outline-offset:2px;transition:border-color var(--transition),background var(--transition),box-shadow var(--transition);margin:.25rem 0;box-sizing:border-box}button{cursor:pointer;background:var(--primary);color:var(--text-muted);color:var(--text-light);border:none;font-weight:600;box-shadow:var(--shadow-md);min-width:120px;min-height:44px;display:inline-flex;align-items:center;justify-content:center;gap:8px;-webkit-user-select:none;user-select:none}button:hover,button:focus,.btn-disruptivo:hover,.menu-button:hover{background:linear-gradient(90deg,var(--secondary) 60%,var(--accent) 100%);outline:none;box-shadow:0 0 0 3px var(--focus)}button:focus-visible{outline:3px solid var(--focus);outline-offset:3px}.btn-disruptivo{background:linear-gradient(90deg,var(--primary) 60%,var(--secondary) 100%);color:#fff;font-weight:700;border-radius:var(--radius-lg);box-shadow:var(--shadow-lg);padding:14px 0;font-size:1.1rem;width:100%;max-width:340px;margin:1rem auto}input:focus,select:focus,textarea:focus{border-color:var(--primary);background:#f0f9ff;box-shadow:0 0 0 3px var(--focus)}input[type=checkbox],input[type=radio]{width:1.1em;height:1.1em;accent-color:var(--primary);margin-right:7px;cursor:pointer}::-webkit-scrollbar{width:10px;background:#e0e7ef}::-webkit-scrollbar-thumb{background:var(--primary);border-radius:8px}.header-gradient{background:linear-gradient(90deg,var(--primary) 0%,var(--secondary) 100%);color:#fff;padding:2.5rem 0 1.2rem;border-bottom-left-radius:var(--radius-lg);border-bottom-right-radius:var(--radius-lg);box-shadow:var(--shadow-lg);width:100vw;text-align:center}.topbar-center{display:flex;align-items:center;justify-content:center;gap:16px;margin-bottom:1.2rem;flex-wrap:wrap}.header-content{display:flex;flex-direction:column;align-items:center;gap:1.2rem;width:100%;max-width:900px;margin:0 auto}.conjunto-title{font-size:2.1rem;font-weight:900;color:#fff;text-shadow:0 2px 8px #0003;justify-content:center}.subtitle{font-size:1.15rem;color:#e0e7ef;font-weight:600}.footer{margin-top:3rem;text-align:center;background:linear-gradient(90deg,var(--primary) 0%,var(--secondary) 100%);color:#fff;border-top-left-radius:var(--radius-lg);border-top-right-radius:var(--radius-lg);box-shadow:var(--shadow-lg);font-size:1.08rem;padding:1.2rem 0;width:100vw}.main-content{width:100vw;max-width:700px;margin:0 auto;padding:2.2rem 1rem 1.2rem;display:flex;flex-direction:column;align-items:center}.menu-container{margin:1.5rem 0;display:flex;justify-content:center;width:100vw}.filtros-form{width:100%;display:flex;flex-direction:column;align-items:center;margin-bottom:1.2rem}.filtros-grid{display:flex;flex-wrap:wrap;gap:1.2rem;justify-content:center;margin-bottom:1rem;width:100%}.filtro-item{display:flex;flex-direction:column;align-items:flex-start;min-width:140px;font-size:1em}.acciones-filtros{display:flex;gap:1rem;justify-content:center;margin-top:1rem}.resultados-table-container{width:100%;margin:0 auto;overflow-x:auto;max-height:500px;overflow-y:auto;border:1px solid #ccc;border-radius:var(--radius-md);box-shadow:var(--shadow-md)}.resultados-table,.registros-table{width:max-content;min-width:100%;border-collapse:collapse;margin-top:1.2rem;background:var(--surface);border-radius:var(--radius-md);overflow:hidden;box-shadow:var(--shadow-md);margin-left:auto;margin-right:auto}.resultados-table th,.registros-table th{background:var(--primary);color:#fff;font-weight:800;padding:10px 6px;text-align:center;position:sticky;top:0;z-index:10}.resultados-table td,.registros-table td{padding:10px 6px;text-align:center;border-bottom:1px solid #e5e7eb;font-size:1.02em}.resultados-table tr:last-child td,.registros-table tr:last-child td{border-bottom:none}.resultados-table tr:hover,.registros-table tr:hover{background:#f1f5f9}.thumbnail{width:38px;height:38px;object-fit:cover;border-radius:var(--radius-sm);box-shadow:0 2px 6px #6366f133}.sin-resultados{color:var(--text-muted);font-size:1.1em;text-align:center;padding:1.2em 0}.info-message,.error-message{margin-top:1rem;padding:12px 18px;border-radius:var(--radius-md);font-size:1.06em;font-weight:600;text-align:center;max-width:700px;word-wrap:break-word}.info-message{background:#e0ffe8;color:var(--success);border:1.5px solid #22c55e}.error-message{background:#fffbe6;color:var(--danger);border:1.5px solid #ffe58f}.modal-backdrop{position:fixed;top:0;left:0;width:100vw;height:100vh;background:#18181bbf;display:flex;justify-content:center;align-items:center;z-index:9999}.modal-content{background:var(--surface);border-radius:var(--radius-lg);box-shadow:var(--shadow-lg);padding:2rem;max-width:480px;width:90vw;max-height:90vh;overflow-y:auto;text-align:left}.modal-content h3{margin-top:0;margin-bottom:1rem;font-weight:800;font-size:1.5rem}.modal-form label{display:flex;flex-direction:column;margin-bottom:1rem;font-weight:600}.modal-form input[type=text],.modal-form input[type=email],.modal-form input[type=date],.modal-form select,.modal-form textarea{font-size:1rem;padding:8px 12px;border-radius:var(--radius-md);border:1.5px solid #d1d5db;margin-top:6px;resize:vertical}.modal-form input[type=checkbox]{width:1.2em;height:1.2em;margin-right:8px;accent-color:var(--primary);cursor:pointer}.modal-form .checkbox-label{display:flex;align-items:center;font-weight:600;margin-bottom:1rem}.acciones-modal{display:flex;justify-content:flex-end;gap:1rem}.save-btn,.cancel-btn{padding:10px 18px;border-radius:var(--radius-md);font-weight:700;font-size:1rem;cursor:pointer;border:none;min-width:100px;transition:background var(--transition)}.save-btn{background:var(--primary);color:var(--text-light)}.save-btn:hover,.save-btn:focus-visible{background:var(--secondary);outline:none;box-shadow:0 0 0 3px var(--focus)}.cancel-btn{background:#ccc;color:#333}.cancel-btn:hover,.cancel-btn:focus-visible{background:#999;outline:none;box-shadow:0 0 0 3px var(--focus)}:focus-visible{outline:3px solid var(--focus);outline-offset:3px}@media (max-width: 768px){.filtros-grid{flex-direction:column;align-items:center}.filtro-item{min-width:100%}.resultados-table-container{max-height:300px}}.emoji-selector{font-size:1.8rem;border:2px solid transparent;border-radius:var(--radius-md);padding:6px 12px;cursor:pointer;background:transparent;transition:border-color var(--transition)}.emoji-selector.selected,.emoji-selector:hover,.emoji-selector:focus-visible{border-color:var(--primary);outline:none;box-shadow:0 0 0 3px var(--focus)}.input-modern{font-size:1rem;padding:10px 12px;border-radius:var(--radius-md);border:1.5px solid #d1c4e9;transition:border-color var(--transition)}.input-modern:focus{border-color:var(--primary);outline:none;box-shadow:0 0 0 3px var(--focus)}.input-error{border-color:var(--danger)}.loader{display:flex;flex-direction:column;align-items:center;justify-content:center;min-height:120px;width:100%}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.loader-spinner{width:48px;height:48px;border:6px solid #e0e0e0;border-top:6px solid var(--primary);border-radius:50%;animation:spin 1s linear infinite;margin-bottom:1rem;display:flex;align-items:center;justify-content:center;font-size:2rem}@media (prefers-reduced-motion: reduce){*,*:before,*:after{animation-duration:.001ms!important;animation-iteration-count:1!important;transition-duration:.001ms!important;scroll-behavior:auto!important}}


----- C:\ThomasParking\ThomasParking\src\App.jsx -----

// src/App.jsx

import React, { useEffect, useState } from 'react';
import { BrowserRouter, Routes, Route, Navigate, useLocation } from 'react-router-dom';
import { supabase } from './supabaseClient';

// Páginas
import RegistroParqueo from './pages/RegistroParqueo';
import Consultas from './pages/Consultas';
import Recaudo from './pages/ResumenRecaudo';
import Descargos from './pages/DescargoGestion';
import GestionUsuarios from './pages/GestionUsuarios';
import GestionCopropietarios from './pages/GestionCopropietarios';
import AcercaDe from './pages/AcercaDe';
import Login from './pages/Login';
import SignUp from './components/SignUp';

// Componentes de layout
import Navbar from './components/Navbar';
import Footer from './components/Footer';

// Hook para estado online/offline
import useOnlineStatus from './hooks/useOnlineStatus';

// Error boundary
import ErrorBoundary from './components/ErrorBoundary';

// Ruta protegida
function ProtectedRoute({ user, allowedRoles, children }) {
  if (!user) return <Navigate to="/login" replace />;
  if (allowedRoles && !allowedRoles.includes(user.user_metadata?.role)) {
    return <Navigate to="/" replace />;
  }
  return children;
}

function AppRoutes({ user, menuOpen, setMenuOpen, isOnline }) {
  const location = useLocation();
  // Rutas donde NO quieres mostrar el Navbar
  const hideNavbarRoutes = ['/login', '/', '/registro'];

  return (
    <>
      {!hideNavbarRoutes.includes(location.pathname) && (
        <Navbar user={user} menuOpen={menuOpen} setMenuOpen={setMenuOpen} />
      )}

      {/* Indicador claro de estado offline */}
      {!isOnline && (
        <div className="offline-banner" role="status" aria-live="polite"
          style={{
            background: '#fff3cd',
            color: '#856404',
            padding: '10px 0',
            textAlign: 'center',
            fontWeight: 600,
            fontSize: '1rem',
            letterSpacing: '0.02em',
            borderBottom: '1.5px solid #ffe58f',
            zIndex: 100,
            width: '100vw',
            position: 'relative'
          }}
        >
          <span role="img" aria-label="offline">⚡</span>
          &nbsp;Modo offline: solo lectura. Edición y borrado están deshabilitados.
        </div>
      )}

      {/* Oculta el contenido principal cuando el menú móvil está abierto */}
      {!menuOpen && (
        <div className="pt-16 min-h-screen flex flex-col">
          <Routes>
            <Route path="/login" element={<Login />} />
            <Route path="/registro" element={<SignUp />} />
            <Route
              path="/registros"
              element={
                <ProtectedRoute user={user}>
                  <RegistroParqueo />
                </ProtectedRoute>
              }
            />
            <Route
              path="/consultas"
              element={
                <ProtectedRoute user={user}>
                  <Consultas />
                </ProtectedRoute>
              }
            />
            <Route
              path="/recaudo"
              element={
                <ProtectedRoute user={user}>
                  <Recaudo />
                </ProtectedRoute>
              }
            />
            <Route
              path="/descargos"
              element={
                <ProtectedRoute user={user}>
                  <Descargos />
                </ProtectedRoute>
              }
            />
            <Route
              path="/acercade"
              element={
                <ProtectedRoute user={user}>
                  <AcercaDe />
                </ProtectedRoute>
              }
            />
            <Route
              path="/usuarios"
              element={
                <ProtectedRoute user={user}>
                  <GestionUsuarios />
                </ProtectedRoute>
              }
            />
            <Route
              path="/copropietarios"
              element={
                <ProtectedRoute user={user}>
                  <GestionCopropietarios />
                </ProtectedRoute>
              }
            />
            <Route
              path="/"
              element={
                user ? <Navigate to="/registros" replace /> : <Navigate to="/login" replace />
              }
            />
            <Route path="*" element={<Navigate to="/" replace />} />
          </Routes>
          <Footer />
        </div>
      )}
    </>
  );
}

export default function App() {
  const [user, setUser] = useState(null);
  const [menuOpen, setMenuOpen] = useState(false);
  const isOnline = useOnlineStatus();

  // Mantener el usuario autenticado
  useEffect(() => {
    let mounted = true;
    async function getSession() {
      const { data: { user } } = await supabase.auth.getUser();
      if (mounted) setUser(user || null);
    }
    getSession();
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (_event, session) => {
        setUser(session?.user || null);
      }
    );
    return () => {
      mounted = false;
      subscription?.unsubscribe();
    };
  }, []);

  return (
    <BrowserRouter>
      <ErrorBoundary>
        <AppRoutes
          user={user}
          menuOpen={menuOpen}
          setMenuOpen={setMenuOpen}
          isOnline={isOnline}
        />
      </ErrorBoundary>
    </BrowserRouter>
  );
}


----- C:\ThomasParking\ThomasParking\src\main.jsx -----

// src/main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './styles/global.css'

// Si tienes ThemeProvider propio, descomenta e importa aquí:
import { ThemeProvider } from './context/ThemeContext'

// Registro de Service Worker para PWA (opcional, elimina si no se usa)
if ('serviceWorker' in navigator && import.meta.env.PROD) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/service-worker.js')
      .then(registration => {
        console.log('ServiceWorker registrado con éxito:', registration.scope)
      })
      .catch(error => {
        console.error('Error al registrar ServiceWorker:', error)
      })
  })
}

// Renderizado principal de la app
ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    {/* Si usas ThemeProvider global, envuelve <App /> así:
    <ThemeProvider>
      <App />
    </ThemeProvider>
    */}
    <App />
  </React.StrictMode>
)


----- C:\ThomasParking\ThomasParking\src\components\AuthGuard.jsx -----

// src/components/AuthGuard.jsx
import React, { useState, useEffect } from 'react';
import { Navigate, useLocation, Outlet } from 'react-router-dom';
import { supabase } from '../supabaseClient';
import Loader from './Loader';
import ErrorMessage from './ErrorMessage';

export default function AuthGuard({ requiredRole = null }) {
  const location = useLocation();
  const [authState, setAuthState] = useState({
    user: null,
    loading: true,
    error: null,
    role: null
  });

  const checkAuthorization = async (user) => {
    try {
      // 1. Obtener rol desde la tabla usuarios_app
      const { data, error } = await supabase
        .from('usuarios_app')
        .select('email, rol, activo')
        .eq('email', user.email)
        .single();

      if (error) throw new Error('Error de autorización: ' + error.message);
      if (!data) throw new Error('Usuario no registrado en el sistema');
      if (!data.activo) throw new Error('Cuenta desactivada');

      // 2. Actualizar metadata del usuario en Supabase
      const { error: updateError } = await supabase.auth.updateUser({
        data: { role: data.rol }
      });

      if (updateError) throw new Error('Error actualizando perfil: ' + updateError.message);

      return { ...user, role: data.rol };
    } catch (error) {
      await supabase.auth.signOut();
      throw error;
    }
  };

  useEffect(() => {
    let isMounted = true;
    const timeout = setTimeout(() => {
      if (isMounted && authState.loading) {
        setAuthState(prev => ({
          ...prev,
          loading: false,
          error: 'Timeout al verificar credenciales'
        }));
      }
    }, 15000);

    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        try {
          if (!session?.user) {
            if (isMounted) {
              setAuthState({
                user: null,
                loading: false,
                error: null,
                role: null
              });
            }
            return;
          }

          const authorizedUser = await checkAuthorization(session.user);
          if (isMounted) {
            setAuthState({
              user: authorizedUser,
              loading: false,
              error: null,
              role: authorizedUser.role
            });
          }
        } catch (error) {
          if (isMounted) {
            setAuthState({
              user: null,
              loading: false,
              error: error.message,
              role: null
            });
          }
        }
      }
    );

    const initializeAuth = async () => {
      try {
        const { data: { user }, error } = await supabase.auth.getUser();
        
        if (!isMounted) return;
        if (error) throw error;
        if (!user) throw new Error('No autenticado');

        const authorizedUser = await checkAuthorization(user);
        if (isMounted) {
          setAuthState({
            user: authorizedUser,
            loading: false,
            error: null,
            role: authorizedUser.role
          });
        }
      } catch (error) {
        if (isMounted) {
          setAuthState({
            user: null,
            loading: false,
            error: error.message,
            role: null
          });
        }
      }
    };

    initializeAuth();
    return () => {
      isMounted = false;
      clearTimeout(timeout);
      subscription?.unsubscribe();
    };
  }, []);

  const handleRetry = async () => {
    setAuthState(prev => ({ ...prev, loading: true, error: null }));
    try {
      const { data: { user }, error } = await supabase.auth.getUser();
      if (error) throw error;
      if (!user) throw new Error('No autenticado');

      const authorizedUser = await checkAuthorization(user);
      setAuthState({
        user: authorizedUser,
        loading: false,
        error: null,
        role: authorizedUser.role
      });
    } catch (error) {
      setAuthState({
        user: null,
        loading: false,
        error: error.message,
        role: null
      });
    }
  };

  if (authState.loading) {
    return <Loader fullScreen text="Verificando credenciales..." />;
  }

  if (authState.error) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center p-4">
        <ErrorMessage 
          title="Error de acceso"
          message={authState.error}
          retryable
          onRetry={handleRetry}
        >
          <button
            onClick={() => supabase.auth.signOut()}
            className="mt-4 px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors"
          >
            Cerrar Sesión
          </button>
        </ErrorMessage>
      </div>
    );
  }

  if (!authState.user) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  if (requiredRole && authState.role !== requiredRole) {
    return <Navigate to="/" replace />;
  }

  return <Outlet />;
}


----- C:\ThomasParking\ThomasParking\src\components\CapturaCamara.jsx -----

// src/components/CapturaCamara.jsx
import React, { useState, useEffect, useRef } from 'react'
import Emoji from './Emoji'

export default function CapturaCamara({ onCaptura }) {
  const videoRef = useRef(null)
  const canvasRef = useRef(null)
  const [error, setError] = useState(null)
  const [foto, setFoto] = useState(null)
  const [modoCamara, setModoCamara] = useState('environment')
  const [stream, setStream] = useState(null)

  // Evita scroll en body mientras la cámara está activa
  useEffect(() => {
    const originalOverflow = document.body.style.overflow
    document.body.style.overflow = 'hidden'
    return () => {
      document.body.style.overflow = originalOverflow
    }
  }, [])

  // Iniciar cámara
  useEffect(() => {
    let activo = true
    const iniciarCamara = async () => {
      try {
        const constraints = {
          video: {
            facingMode: modoCamara,
            width: { ideal: 220 },
            height: { ideal: 165 }
          },
          audio: false
        }
        const mediaStream = await navigator.mediaDevices.getUserMedia(constraints)
        if (activo) {
          setStream(mediaStream)
          if (videoRef.current) {
            videoRef.current.srcObject = mediaStream
          }
        }
      } catch (err) {
        setError(`Error de cámara: ${err.message}`)
      }
    }
    iniciarCamara()
    return () => {
      activo = false
      if (stream) {
        stream.getTracks().forEach(track => track.stop())
      }
    }
    // eslint-disable-next-line
  }, [modoCamara])

  // Capturar foto
  const capturarFoto = () => {
    const video = videoRef.current
    const canvas = canvasRef.current
    const ctx = canvas.getContext('2d')
    canvas.width = video.videoWidth
    canvas.height = video.videoHeight
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height)
    canvas.toBlob(blob => {
      const file = new File([blob], 'foto-capturada.jpg', { type: 'image/jpeg' })
      setFoto(URL.createObjectURL(file))
      onCaptura(file)
    }, 'image/jpeg', 0.9)
  }

  // Cambiar cámara frontal/trasera
  const cambiarCamara = () => {
    setModoCamara(prev => prev === 'user' ? 'environment' : 'user')
  }

  if (error) return (
    <div className="error-camara">
      <Emoji symbol="📷" /> {error}
      <div style={{ fontSize: 14, marginTop: 8 }}>
        Asegúrate de permitir el acceso a la cámara
      </div>
    </div>
  )

  return (
    <div
      className="contenedor-camara"
      style={{
        position: 'fixed',
        top: 0,
        left: 0,
        width: '100vw',
        height: '100vh',
        background: '#18181b',
        zIndex: 9999,
        overflow: 'hidden',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center'
      }}
    >
      {!foto ? (
        <>
          <video
            ref={videoRef}
            autoPlay
            playsInline
            style={{
              width: '100%',
              maxWidth: '220px',
              aspectRatio: '4/3',
              borderRadius: '12px',
              background: '#222',
              transform: modoCamara === 'user' ? 'scaleX(-1)' : 'none',
              boxShadow: '0 2px 16px #0006'
            }}
          />
          <div style={{ display: 'flex', gap: 10, marginTop: 16 }}>
            <button
              type="button"
              onClick={capturarFoto}
              className="btn-capturar"
              style={{ minWidth: 90, fontSize: 18 }}
            >
              <Emoji symbol="📸" /> Capturar
            </button>
            <button
              type="button"
              onClick={cambiarCamara}
              className="btn-cambiar-camara"
              style={{ minWidth: 90, fontSize: 18 }}
            >
              <Emoji symbol="🔄" /> Cambiar
            </button>
          </div>
        </>
      ) : (
        <>
          <img
            src={foto}
            alt="Previsualización"
            style={{
              width: '100%',
              maxWidth: '220px',
              aspectRatio: '4/3',
              borderRadius: '12px',
              border: '2px solid #e0e0e0',
              boxShadow: '0 2px 16px #0006'
            }}
          />
          <div style={{ marginTop: 16 }}>
            <button
              type="button"
              onClick={() => setFoto(null)}
              className="btn-reintentar"
              style={{ minWidth: 120, fontSize: 18 }}
            >
              <Emoji symbol="🔄" /> Volver a tomar
            </button>
          </div>
        </>
      )}
      <canvas ref={canvasRef} style={{ display: 'none' }} />
    </div>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\DetalleConsulta.jsx -----

import React from 'react';
import PropTypes from 'prop-types';

const DetalleConsulta = ({ detalle }) => (
  <div className="detalle-container">
    {detalle ? (
      <>
        <h3>Detalles del Parqueo</h3>
        <p><strong>ID:</strong> {detalle.id}</p>
        <p><strong>Nombre:</strong> {detalle.nombre}</p>
        <p><strong>Estado:</strong> {detalle.estado}</p>
        {/* Puedes agregar más campos si lo necesitas */}
      </>
    ) : (
      <p>Seleccione un parqueo para ver detalles</p>
    )}
  </div>
);

DetalleConsulta.propTypes = {
  detalle: PropTypes.object,
};

export default DetalleConsulta;


----- C:\ThomasParking\ThomasParking\src\components\Emoji.jsx -----

// src/components/Emoji.jsx
import React from 'react';
export default function Emoji({ symbol, label }) {
  return (
    <span role="img" aria-label={label} aria-hidden={label ? "false" : "true"}>
      {symbol}
    </span>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\ErrorBoundary.jsx -----

// src/components/ErrorBoundary.jsx
import React from 'react';
import PropTypes from 'prop-types';

export default class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { 
      hasError: false,
      error: null,
      errorInfo: null
    };
  }

  static getDerivedStateFromError(error) {
    return { 
      hasError: true,
      error: error 
    };
  }

  componentDidCatch(error, errorInfo) {
    console.error("Error capturado:", error, errorInfo);
    this.setState({ errorInfo });
    
    // Ejemplo de envío a servicio de monitoreo
    if (process.env.NODE_ENV === 'production') {
      // logErrorToService(error, errorInfo);
    }
  }

  handleRetry = () => {
    this.setState({
      hasError: false,
      error: null,
      errorInfo: null
    });
    
    // Opcional: Recargar la aplicación completa
    // window.location.reload();
  };

  render() {
    if (this.state.hasError) {
      return (
        <div className="max-w-lg mx-auto my-16 p-8 bg-red-50 dark:bg-red-900 rounded-lg shadow border border-red-200 dark:border-red-800 text-center">
          <h2 className="text-2xl font-bold text-red-700 dark:text-red-100 mb-2">
            ¡Algo salió mal!
          </h2>
          
          {this.state.error && (
            <p className="text-red-600 dark:text-red-300 mb-4">
              {this.state.error.message}
            </p>
          )}

          <button
            onClick={this.handleRetry}
            className="mt-4 px-5 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
            aria-label="Reintentar operación"
          >
            Reintentar
          </button>

          {process.env.NODE_ENV !== 'production' && this.state.errorInfo && (
            <details className="mt-4 text-xs text-left text-red-500 whitespace-pre-wrap">
              <summary>Detalles técnicos</summary>
              <p className="mt-2">{this.state.errorInfo.componentStack}</p>
            </details>
          )}
        </div>
      );
    }

    return this.props.children;
  }
}

ErrorBoundary.propTypes = {
  children: PropTypes.node.isRequired
};


----- C:\ThomasParking\ThomasParking\src\components\ErrorMessage.jsx -----

// src/components/ErrorMessage.jsx
import React from 'react'

/**
 * ErrorMessage
 * @param {string} title - Título del error (opcional)
 * @param {string|React.ReactNode} message - Mensaje de error a mostrar
 * @param {boolean} retryable - Si es true, muestra botón de reintentar
 * @param {function} onRetry - Función a ejecutar al reintentar
 * @param {React.ReactNode} [children] - Elementos adicionales opcionales
 */
export default function ErrorMessage({
  title = 'Ha ocurrido un error',
  message = 'Intenta nuevamente o contacta al administrador.',
  retryable = false,
  onRetry,
  children,
}) {
  return (
    <div
      className="max-w-lg mx-auto my-8 p-6 bg-red-50 dark:bg-red-900 rounded-lg border border-red-200 dark:border-red-800 shadow"
      role="alert"
      aria-live="assertive"
      aria-atomic="true"
    >
      <div className="flex items-center mb-2">
        <svg
          className="h-6 w-6 text-red-600 dark:text-red-400 mr-2 flex-shrink-0"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          aria-hidden="true"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M12 8v4m0 4h.01M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9 9 4.03 9 9z"
          />
        </svg>
        <h3 className="text-lg font-semibold text-red-800 dark:text-red-100">{title}</h3>
      </div>
      <div className="text-red-700 dark:text-red-200 mb-4 break-words">
        {typeof message === 'string' ? <p>{message}</p> : message}
      </div>
      {children}
      {retryable && typeof onRetry === 'function' && (
        <button
          onClick={onRetry}
          className="mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
        >
          Reintentar
        </button>
      )}
    </div>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\Filtros.jsx -----

import React from 'react';
import PropTypes from 'prop-types';

const Filtros = ({ filtros, onChange }) => (
  <div className="filtros-section">
    <input
      type="text"
      value={filtros.texto}
      onChange={e => onChange({ ...filtros, texto: e.target.value })}
      placeholder="Buscar parqueo..."
    />
    {/* Aquí puedes añadir más filtros si lo necesitas */}
  </div>
);

Filtros.propTypes = {
  filtros: PropTypes.object.isRequired,
  onChange: PropTypes.func.isRequired,
};

export default Filtros;


----- C:\ThomasParking\ThomasParking\src\components\Footer.jsx -----

// src/components/Footer.jsx
import React from 'react'

export default function Footer() {
  const year = new Date().getFullYear()

  return (
    <footer className="w-full py-6 mt-10 bg-gray-100 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700">
      <div className="container mx-auto flex flex-col md:flex-row items-center justify-between px-4">
        <div className="text-sm text-gray-500 dark:text-gray-400 text-center md:text-left">
          © {year} Conjunto Habitacional Thomas II. Todos los derechos reservados.
        </div>
        <div className="flex space-x-4 mt-2 md:mt-0">
          {/* Puedes agregar enlaces a políticas, contacto, etc. */}
          <a
            href="mailto:admin@thomas2.com"
            className="text-gray-500 hover:text-blue-600 dark:hover:text-blue-400 transition-colors text-sm"
            aria-label="Contacto por correo"
          >
            Contacto
          </a>
          <a
            href="https://github.com/tu-usuario/tu-repo"
            target="_blank"
            rel="noopener noreferrer"
            className="text-gray-500 hover:text-blue-600 dark:hover:text-blue-400 transition-colors text-sm"
            aria-label="Repositorio en GitHub"
          >
            GitHub
          </a>
        </div>
      </div>
    </footer>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\ListaRegistros.jsx -----

// src/components/ListaRegistros.jsx
import React, { useEffect, useState } from 'react'
import { useLocation } from 'react-router-dom'
import { supabase } from '../supabaseClient'
import Loader from './Loader'
import Emoji from './Emoji'
import dayjs from 'dayjs'
import useOnlineStatus from '../hooks/useOnlineStatus'

export default function ListaRegistros({ refreshKey, onRegistrosFiltradosChange }) {
  const location = useLocation()
  const [registros, setRegistros] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [copropietarios, setCopropietarios] = useState([])
  const [filtros, setFiltros] = useState({ propiedad: '', unidadAsignada: '' })
  const [editModal, setEditModal] = useState({ open: false, registro: null })
  const [editData, setEditData] = useState({})
  const [eliminandoAudio, setEliminandoAudio] = useState(false)
  const [savingEdit, setSavingEdit] = useState(false)
  const [deleting, setDeleting] = useState(false)
  const isOnline = useOnlineStatus()

  // Cargar copropietarios
  useEffect(() => {
    let isMounted = true
    const fetchCopropietarios = async () => {
      const { data, error } = await supabase
        .from('copropietarios')
        .select('id, nombre, propiedad, unidad_asignada')
      if (!error && isMounted) setCopropietarios(data)
    }
    fetchCopropietarios()
    return () => { isMounted = false }
  }, [])

  // Cargar registros (se recarga con refreshKey, estado online, y cambio de ruta)
  useEffect(() => {
    let isMounted = true
    setLoading(true)
    setError(null)
    const fetchRegistros = async () => {
      try {
        if (isOnline) {
          const { data, error } = await supabase
            .from('registros_parqueadero')
            .select(`
              id,
              placa_vehiculo,
              tipo_vehiculo,
              fecha_hora_ingreso,
              observaciones,
              foto_url,
              monto,
              gratis,
              recaudado,
              fecha_recaudo,
              dependencia_id,
              observacion_audio_url,
              copropietarios:dependencia_id(nombre, propiedad, unidad_asignada),
              usuario:usuario_id!inner(id, nombre)
            `)
            .order('fecha_hora_ingreso', { ascending: false })
          if (error) throw error
          if (isMounted) {
            setRegistros(data)
            localStorage.setItem('registros_offline', JSON.stringify(data || []))
          }
        } else {
          const localData = JSON.parse(localStorage.getItem('registros_offline') || '[]')
          if (isMounted) setRegistros(localData)
        }
      } catch (error) {
        if (isMounted) setError(error.message)
      } finally {
        if (isMounted) setLoading(false)
      }
    }
    fetchRegistros()
    return () => { isMounted = false; setLoading(true) }
  }, [refreshKey, isOnline, location.pathname])

  // Opciones para selects
  const propiedades = [...new Set(copropietarios.map(c => c.propiedad))].sort()
  const unidadesFiltradas = filtros.propiedad
    ? [...new Set(copropietarios.filter(c => c.propiedad === filtros.propiedad).map(c => c.unidad_asignada))]
    : []

  // Filtros
  const handleFiltroChange = (e) => {
    const { name, value } = e.target
    setFiltros(prev => ({
      ...prev,
      [name]: value,
      ...(name === 'propiedad' && { unidadAsignada: '' })
    }))
  }

  const registrosFiltrados = registros.filter(reg => {
    const coincideProp = !filtros.propiedad || (reg.copropietarios?.propiedad || '') === filtros.propiedad
    const coincideUnidad = !filtros.unidadAsignada || (reg.copropietarios?.unidad_asignada || '') === filtros.unidadAsignada
    return coincideProp && coincideUnidad
  })

  useEffect(() => {
    if (onRegistrosFiltradosChange) {
      onRegistrosFiltradosChange(registrosFiltrados)
    }
  }, [registrosFiltrados, onRegistrosFiltradosChange])

  const totalMonto = registrosFiltrados.reduce(
    (acc, reg) => acc + Number(reg.monto || 0),
    0
  )

  // Edición
  const handleEdit = (registro) => {
    setEditModal({ open: true, registro })
    setEditData({
      placa_vehiculo: registro.placa_vehiculo,
      tipo_vehiculo: registro.tipo_vehiculo,
      fecha_hora_ingreso: registro.fecha_hora_ingreso ? registro.fecha_hora_ingreso.slice(0, 10) : '',
      gratis: !!registro.gratis,
      observaciones: registro.observaciones || '',
      dependencia_id: registro.dependencia_id,
      recaudado: !!registro.recaudado,
      fecha_recaudo: registro.fecha_recaudo || '',
      observacion_audio_url: registro.observacion_audio_url || '',
      nuevoAudio: null
    })
  }

  const handleEditChange = (e) => {
    const { name, value, type, checked } = e.target
    setEditData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
      ...(name === 'recaudado' && !checked ? { fecha_recaudo: '' } : {})
    }))
  }

  const handleEditSave = async (e) => {
    e.preventDefault()
    setSavingEdit(true)
    const id = editModal.registro.id
    const monto = editData.gratis ? 0 : (editData.tipo_vehiculo === 'carro' ? 1.00 : 0.50)
    let audioUrlFinal = editData.observacion_audio_url

    // Subida de nuevo audio
    if (editData.nuevoAudio) {
      const fileName = `audio_obs_edit_${editData.placa_vehiculo}_${Date.now()}.webm`
      const { error: uploadError } = await supabase
        .storage
        .from('evidencias-parqueadero')
        .upload(fileName, editData.nuevoAudio, { contentType: 'audio/webm' })
      if (uploadError) {
        setError('Error al subir el audio: ' + uploadError.message)
        setSavingEdit(false)
        return
      }
      const { data: publicUrlData } = supabase
        .storage
        .from('evidencias-parqueadero')
        .getPublicUrl(fileName)
      audioUrlFinal = publicUrlData.publicUrl
    }

    try {
      const { error } = await supabase
        .from('registros_parqueadero')
        .update({
          ...editData,
          monto,
          fecha_recaudo: editData.recaudado ? editData.fecha_recaudo : null,
          observacion_audio_url: audioUrlFinal
        })
        .eq('id', id)

      if (error) throw error

      setRegistros(registros.map(r =>
        r.id === id ? { ...r, ...editData, monto, observacion_audio_url: audioUrlFinal } : r
      ))

      if (!isOnline) {
        const localData = JSON.parse(localStorage.getItem('registros_offline') || '[]')
        const updatedData = localData.map(item =>
          item.id === id ? { ...item, ...editData, monto, observacion_audio_url: audioUrlFinal } : item
        )
        localStorage.setItem('registros_offline', JSON.stringify(updatedData))
      }

      setEditModal({ open: false, registro: null })
      setEditData({})
    } catch (error) {
      setError(error.message)
    } finally {
      setSavingEdit(false)
    }
  }

  // Eliminar audio
  const handleEliminarAudio = async () => {
    if (!editData.observacion_audio_url) return
    if (!window.confirm('¿Eliminar esta evidencia auditiva?')) return
    setEliminandoAudio(true)
    try {
      if (editData.observacion_audio_url && editData.observacion_audio_url !== 'pendiente-sync') {
        const urlParts = editData.observacion_audio_url.split('/')
        const fileName = urlParts[urlParts.length - 1]
        const { error: deleteError } = await supabase
          .storage
          .from('evidencias-parqueadero')
          .remove([fileName])
        if (deleteError) throw deleteError
      }
      setEditData(prev => ({ ...prev, observacion_audio_url: '', nuevoAudio: null }))
      const id = editModal.registro.id
      await supabase
        .from('registros_parqueadero')
        .update({ observacion_audio_url: null })
        .eq('id', id)
      setRegistros(registros.map(r =>
        r.id === id ? { ...r, observacion_audio_url: null } : r
      ))
    } catch (error) {
      setError('Error eliminando audio: ' + error.message)
    }
    setEliminandoAudio(false)
  }

  const handleDelete = async (registro) => {
    if (!window.confirm('¿Seguro que deseas eliminar este registro?')) return
    setDeleting(true)
    try {
      if (isOnline) {
        const { error } = await supabase
          .from('registros_parqueadero')
          .delete()
          .eq('id', registro.id)
        if (error) throw error
      }

      const updatedRegistros = registros.filter(r => r.id !== registro.id)
      setRegistros(updatedRegistros)
      if (!isOnline) {
        const localData = JSON.parse(localStorage.getItem('registros_offline') || '[]')
        const filteredData = localData.filter(item => item.id !== registro.id)
        localStorage.setItem('registros_offline', JSON.stringify(filteredData))
      }
    } catch (err) {
      setError('Error eliminando registro: ' + err.message)
    } finally {
      setDeleting(false)
    }
  }

  if (loading) return <Loader text="Cargando registros..." />
  if (error) return <div className="error-message">{error}</div>

  return (
    <div className="lista-registros-container">
      <div className="offline-banner" style={{
        display: !isOnline ? 'flex' : 'none',
        background: '#fff3cd',
        color: '#856404',
        padding: '8px 16px',
        borderRadius: '8px',
        marginBottom: '16px',
        alignItems: 'center',
        gap: '8px'
      }}>
        <Emoji symbol="⚡" /> Modo offline - Mostrando datos almacenados localmente
      </div>

      <h2>
        <Emoji symbol="📝" label="Últimos Registros" /> Últimos Registros
      </h2>

      <div style={{ display: 'flex', gap: 16, marginBottom: 16 }}>
        <div>
          <label>Propiedad:</label>
          <select
            name="propiedad"
            value={filtros.propiedad}
            onChange={handleFiltroChange}
          >
            <option value="">Todas</option>
            {propiedades.map(prop => (
              <option key={prop} value={prop}>{prop}</option>
            ))}
          </select>
        </div>
        <div>
          <label>Unidad asignada:</label>
          <select
            name="unidadAsignada"
            value={filtros.unidadAsignada}
            onChange={handleFiltroChange}
            disabled={!filtros.propiedad}
          >
            <option value="">Todas</option>
            {unidadesFiltradas.map(unidad => (
              <option key={unidad} value={unidad}>{unidad}</option>
            ))}
          </select>
        </div>
      </div>

      <div className="registros-table-wrapper">
        <table className="registros-table">
          <thead>
            <tr>
              <th style={{ textAlign: 'center' }}><Emoji symbol="📅" /> Fecha/Hora</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="🚗" /> Placa</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="🏍️" /> Tipo</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="📝" /> Observaciones</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="💵" /> Monto</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="🆓" /> Gratis</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="🔗" /> Recaudado</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="📅" /> Fecha Recaudo</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="🏠" /> Copropietario</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="👤" /> Registrado por</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="📷" /> Foto</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="🔊" /> Audio</th>
              <th style={{ textAlign: 'center' }}><Emoji symbol="⚙️" /> Acciones</th>
            </tr>
          </thead>
          <tbody>
            {registrosFiltrados.length > 0 ? (
              <>
                {registrosFiltrados.map(reg => (
                  <tr key={reg.id}>
                    <td style={{ textAlign: 'center' }}>
                      {reg.fecha_hora_ingreso
                        ? dayjs(reg.fecha_hora_ingreso).format('DD/MM/YYYY HH:mm')
                        : ''}
                    </td>
                    <td style={{ textAlign: 'center' }}>{reg.placa_vehiculo}</td>
                    <td style={{ textAlign: 'center' }}>
                      {reg.tipo_vehiculo?.toLowerCase() === 'carro' && (
                        <Emoji symbol="🚗" label="Carro" />
                      )}
                      {reg.tipo_vehiculo?.toLowerCase() === 'moto' && (
                        <Emoji symbol="🏍️" label="Moto" />
                      )}
                      <span style={{ marginLeft: 6, textTransform: 'capitalize' }}>
                        {reg.tipo_vehiculo}
                      </span>
                    </td>
                    <td>{reg.observaciones || '-'}</td>
                    <td style={{ textAlign: 'center' }}>${Number(reg.monto).toFixed(2)}</td>
                    <td style={{ textAlign: 'center' }}>
                      {reg.gratis
                        ? <Emoji symbol="🆓" label="Gratis" />
                        : <Emoji symbol="❌" label="No Gratis" />}
                    </td>
                    <td style={{ textAlign: 'center' }}>
                      {reg.recaudado
                        ? <Emoji symbol="🔗" label="Recaudado" />
                        : <Emoji symbol="⏳" label="Pendiente" />}
                    </td>
                    <td style={{ textAlign: 'center' }}>
                      {reg.fecha_recaudo || '-'}
                    </td>
                    <td>
                      <Emoji symbol="🏠" label="Casa" />{' '}
                      {reg.copropietarios?.nombre || '-'}
                      <br />
                      <small>
                        {reg.copropietarios?.propiedad || ''} - {reg.copropietarios?.unidad_asignada || ''}
                      </small>
                    </td>
                    <td style={{ textAlign: 'center' }}>
                      {reg.usuario?.nombre || '-'}
                    </td>
                    <td style={{ textAlign: 'center' }}>
                      {reg.foto_url && (
                        <a href={reg.foto_url} target="_blank" rel="noopener noreferrer">
                          <img src={reg.foto_url} alt="Evidencia" className="thumbnail" />
                        </a>
                      )}
                    </td>
                    <td style={{ textAlign: 'center' }}>
                      {reg.observacion_audio_url && reg.observacion_audio_url !== 'pendiente-sync' ? (
                        <audio controls style={{ width: 90 }}>
                          <source src={reg.observacion_audio_url} type="audio/webm" />
                          Tu navegador no soporta audio.
                        </audio>
                      ) : (
                        <span style={{ color: '#aaa', fontSize: 14 }}>-</span>
                      )}
                    </td>
                    <td style={{ textAlign: 'center' }}>
                      <button
                        className="edit-btn"
                        title="Editar"
                        onClick={() => handleEdit(reg)}
                        style={{ marginRight: 6 }}
                        disabled={!isOnline || savingEdit}
                      >
                        <Emoji symbol="✏️" label="Editar" />
                      </button>
                      <button
                        className="delete-btn"
                        title="Eliminar"
                        onClick={() => handleDelete(reg)}
                        disabled={!isOnline || deleting}
                      >
                        <Emoji symbol="🗑️" label="Eliminar" />
                      </button>
                    </td>
                  </tr>
                ))}
                <tr style={{ fontWeight: 'bold', background: '#f6f8fc' }}>
                  <td colSpan={4} style={{ textAlign: 'right' }}>
                    Total
                  </td>
                  <td style={{ textAlign: 'center' }}>
                    ${totalMonto.toFixed(2)}
                  </td>
                  <td colSpan={9}></td>
                </tr>
              </>
            ) : (
              <tr>
                <td colSpan="13" className="sin-resultados">
                  No se encontraron registros con los filtros seleccionados
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* Modal de edición */}
      {editModal.open && (
        <div className="modal-backdrop">
          <div className="modal-content">
            <h3>Editar Registro</h3>
            <form className="modal-form" onSubmit={handleEditSave}>
              <label>
                Placa:
                <input
                  name="placa_vehiculo"
                  value={editData.placa_vehiculo}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                />
              </label>
              <label>
                Tipo:
                <select
                  name="tipo_vehiculo"
                  value={editData.tipo_vehiculo}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                >
                  <option value="carro">Carro</option>
                  <option value="moto">Moto</option>
                </select>
              </label>
              <label>
                Fecha ingreso:
                <input
                  type="date"
                  name="fecha_hora_ingreso"
                  value={editData.fecha_hora_ingreso}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                />
              </label>
              <label>
                Observaciones:
                <input
                  name="observaciones"
                  value={editData.observaciones}
                  onChange={handleEditChange}
                  disabled={!isOnline}
                />
              </label>
              <label>
                Copropietario:
                <select
                  name="dependencia_id"
                  value={editData.dependencia_id || ''}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                >
                  <option value="">Seleccione...</option>
                  {copropietarios.map(dep => (
                    <option key={dep.id} value={dep.id}>
                      {dep.nombre} ({dep.propiedad} - {dep.unidad_asignada})
                    </option>
                  ))}
                </select>
              </label>
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  name="gratis"
                  checked={!!editData.gratis}
                  onChange={handleEditChange}
                  disabled={!isOnline}
                />
                <Emoji symbol="🆓" label="Gratis" /> Gratis
              </label>
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  name="recaudado"
                  checked={!!editData.recaudado}
                  onChange={handleEditChange}
                  disabled={!isOnline}
                />
                <Emoji symbol="🔗" label="Recaudado" /> Recaudado
              </label>
              {editData.recaudado && (
                <label>
                  Fecha Recaudo:
                  <input
                    type="date"
                    name="fecha_recaudo"
                    value={editData.fecha_recaudo || ''}
                    onChange={handleEditChange}
                    required={!!editData.recaudado}
                    disabled={!isOnline || !editData.recaudado}
                  />
                </label>
              )}
              <label>
                Evidencia auditiva:
                {editData.observacion_audio_url && editData.observacion_audio_url !== 'pendiente-sync' ? (
                  <>
                    <audio controls style={{ width: '100%', margin: '8px 0' }}>
                      <source src={editData.observacion_audio_url} type="audio/webm" />
                      Tu navegador no soporta audio.
                    </audio>
                    <button
                      type="button"
                      onClick={handleEliminarAudio}
                      className="delete-btn"
                      style={{ marginTop: 8 }}
                      disabled={eliminandoAudio || !isOnline}
                    >
                      {eliminandoAudio ? 'Eliminando...' : <><Emoji symbol="🗑️" /> Eliminar audio</>}
                    </button>
                  </>
                ) : (
                  <span style={{ color: '#aaa', fontSize: 14 }}>No hay audio guardado.</span>
                )}
                <input
                  type="file"
                  accept="audio/*"
                  onChange={e => setEditData(prev => ({
                    ...prev,
                    nuevoAudio: e.target.files && e.target.files[0] ? e.target.files[0] : null
                  }))}
                  disabled={!isOnline}
                  style={{ marginTop: 8 }}
                />
                <span style={{ fontSize: 12, color: '#888' }}>
                  Puedes subir un nuevo archivo de audio para reemplazar el actual.
                </span>
              </label>
              <div style={{ marginTop: 18 }}>
                <button
                  type="submit"
                  className="save-btn"
                  disabled={!isOnline || savingEdit}
                >
                  Guardar
                </button>
                <button
                  type="button"
                  className="cancel-btn"
                  onClick={() => setEditModal({ open: false, registro: null })}
                  disabled={savingEdit}
                >
                  Cancelar
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\Loader.jsx -----

// src/components/Loader.jsx
import React from 'react'

export default function Loader({ fullScreen = false, text = "⏳ Cargando..." }) {
  const loaderStyle = {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    minHeight: fullScreen ? '100vh' : '120px',
    width: '100%',
    background: fullScreen ? '#f5f6fa' : 'transparent',
    position: fullScreen ? 'fixed' : 'static',
    top: 0,
    left: 0,
    zIndex: 9999,
  }

  const spinnerStyle = {
    width: '48px',
    height: '48px',
    border: '6px solid #e0e0e0',
    borderTop: '6px solid #3498db',
    borderRadius: '50%',
    animation: 'spin 1s linear infinite',
    marginBottom: '1rem',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: '2rem'
  }

  return (
    <div style={loaderStyle}>
      <div style={spinnerStyle}>
        <span role="img" aria-label="reloj de arena" style={{ position: 'absolute', fontSize: '2.2rem', marginTop: 2 }}>
          ⏳
        </span>
      </div>
      <span style={{ color: '#2c3e50', fontWeight: 'bold', fontSize: '1.1rem' }}>{text}</span>
      <style>
        {`
          @keyframes spin {
            0% { transform: rotate(0deg);}
            100% { transform: rotate(360deg);}
          }
        `}
      </style>
    </div>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\LoadingOverlay.jsx -----

// src/components/LoadingOverlay.jsx
import React from 'react'

/**
 * LoadingOverlay
 * @param {string} message - Mensaje opcional para mostrar debajo del spinner
 * @param {boolean} fullScreen - Si es true, ocupa toda la pantalla
 */
export default function LoadingOverlay({ message = 'Cargando...', fullScreen = true }) {
  return (
    <div
      className={`flex flex-col items-center justify-center ${
        fullScreen
          ? 'fixed inset-0 z-50 bg-white/80 dark:bg-gray-900/80'
          : 'w-full h-full'
      }`}
      style={fullScreen ? { minHeight: '100vh' } : {}}
      aria-busy="true"
      aria-live="polite"
      role="status"
    >
      <div className="mb-4">
        {/* Spinner SVG accesible */}
        <svg
          className="animate-spin h-12 w-12 text-blue-600 dark:text-blue-400"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <circle
            className="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            strokeWidth="4"
          />
          <path
            className="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
          />
        </svg>
      </div>
      <span className="text-gray-700 dark:text-gray-200 text-lg font-medium">{message}</span>
    </div>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\LoadingScreen.jsx -----

// src/components/LoadingScreen.jsx

import React from 'react';

export default function LoadingScreen({ message = 'Cargando...', fullScreen = false }) {
  return (
    <div
      className={`flex flex-col items-center justify-center ${
        fullScreen
          ? 'fixed inset-0 z-50 bg-white dark:bg-gray-900 bg-opacity-80'
          : 'w-full h-full'
      }`}
      aria-busy="true"
      aria-live="polite"
      role="status"
    >
      <div className="mb-4">
        {/* Spinner SVG accesible */}
        <svg
          className="animate-spin h-10 w-10 text-blue-600 dark:text-blue-400"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <circle
            className="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            strokeWidth="4"
          />
          <path
            className="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
          />
        </svg>
      </div>
      <span className="text-gray-600 dark:text-gray-200 text-lg font-medium">{message}</span>
    </div>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\Modal.jsx -----

// src/components/Modal.jsx
import React, { useEffect } from "react";

/**
 * Modal reutilizable para toda la app.
 * Props:
 * - isOpen: boolean, controla si el modal está abierto
 * - onClose: función, llamada al cerrar (clic fondo o botón cerrar)
 * - children: contenido del modal
 */
const Modal = ({ isOpen, onClose, children }) => {
  if (!isOpen) return null;

  // Evita el scroll del fondo cuando el modal está abierto
  useEffect(() => {
    const originalOverflow = document.body.style.overflow;
    document.body.style.overflow = "hidden";
    return () => { document.body.style.overflow = originalOverflow; };
  }, []);

  return (
    <div
      className="modal-backdrop"
      style={{
        position: "fixed",
        top: 0, left: 0,
        width: "100vw",
        height: "100vh",
        background: "rgba(24,24,27,0.7)",
        zIndex: 9999,
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
      }}
      onClick={onClose}
      aria-modal="true"
      role="dialog"
    >
      <div
        className="modal-content"
        style={{
          background: "var(--surface, #fff)",
          borderRadius: 20,
          boxShadow: "0 8px 32px #6366f133",
          padding: "2rem",
          maxWidth: 480,
          width: "90vw",
          maxHeight: "90vh",
          overflowY: "auto",
          textAlign: "left",
          position: "relative"
        }}
        onClick={e => e.stopPropagation()}
      >
        {/* Botón de cerrar en la esquina superior derecha */}
        <button
          onClick={onClose}
          className="absolute top-2 right-2 text-gray-400 hover:text-red-500 text-2xl font-bold focus:outline-none"
          aria-label="Cerrar modal"
          type="button"
          style={{
            position: "absolute",
            top: 12,
            right: 12,
            background: "transparent",
            border: "none",
            fontSize: 28,
            color: "#888",
            cursor: "pointer"
          }}
        >
          ×
        </button>
        {children}
      </div>
    </div>
  );
};

export default Modal;


----- C:\ThomasParking\ThomasParking\src\components\Navbar.jsx -----

// src/components/Navbar.jsx
import React from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import { supabase } from '../supabaseClient';
import Emoji from './Emoji';

function NavMenuMobile({ navItems, user, handleNavClick, handleLogout }) {
  return (
    <nav
      className="fixed inset-0 z-50 bg-gradient-to-br from-blue-700 to-purple-700 flex flex-col items-center justify-center space-y-4"
      role="navigation"
      aria-label="Menú principal móvil"
    >
      {navItems.map(item => (
        <NavLink
          key={item.to}
          to={item.to}
          onClick={handleNavClick}
          className={({ isActive }) =>
            `flex items-center gap-2 px-6 py-4 rounded-lg font-medium text-2xl transition-colors focus:outline-none ${
              isActive ? 'bg-white text-blue-700' : 'text-white hover:bg-white/20'
            }`
          }
          aria-current={({ isActive }) => (isActive ? 'page' : undefined)}
        >
          <Emoji symbol={item.emoji} /> {item.label}
        </NavLink>
      ))}
      {user && (
        <div className="flex flex-col items-center mt-6">
          <span className="text-white font-semibold text-base">{user.email}</span>
        </div>
      )}
      <button
        onClick={handleLogout}
        className="flex items-center mt-4 px-5 py-3 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium text-lg transition-colors"
        aria-label="Cerrar sesión"
      >
        <Emoji symbol="🚪" /> <span className="ml-2">Cerrar Sesión</span>
      </button>
    </nav>
  );
}

export default function Navbar({ user, menuOpen, setMenuOpen }) {
  const navigate = useNavigate();

  const handleLogout = async () => {
    await supabase.auth.signOut();
    setMenuOpen(false);
    navigate('/login');
  };

  const navItems = [
    { to: '/registros', label: 'Registro Parqueo', emoji: '📝' },
    { to: '/consultas', label: 'Reportes', emoji: '📊' },
    { to: '/recaudo', label: 'Recaudación', emoji: '💰' },
    { to: '/descargos', label: 'Descargos', emoji: '📤' },
    { to: '/copropietarios', label: 'Copropietarios', emoji: '🏘️' },
    { to: '/usuarios', label: 'Usuarios', emoji: '👥' },
    { to: '/acercade', label: 'Acerca de', emoji: 'ℹ️' },
  ];

  // Cierra el menú móvil al navegar
  const handleNavClick = () => setMenuOpen(false);

  return (
    <header className="w-full bg-gradient-to-r from-blue-700 to-purple-700 shadow-md fixed top-0 left-0 z-50">
      <div className="max-w-7xl mx-auto flex items-center px-4 h-16">
        {/* IZQUIERDA: Logo y título */}
        <div className="flex-shrink-0 flex items-center">
          <NavLink
            to="/"
            className="flex items-center space-x-2 text-white font-bold text-lg"
            onClick={handleNavClick}
            aria-label="Inicio"
          >
            <Emoji symbol="🅿️" /> <span>ParkingApp</span>
          </NavLink>
        </div>

        {/* Usuario logueado: email y rol (solo escritorio) */}
        {user && (
          <div className="hidden md:flex flex-col items-end ml-auto mr-4 text-white">
            <span className="font-semibold">{user.email}</span>
          </div>
        )}

        {/* Botón hamburguesa SIEMPRE visible */}
        <button
          className="flex items-center justify-center text-white focus:outline-none ml-2 p-1"
          aria-label={menuOpen ? "Cerrar menú" : "Abrir menú"}
          aria-expanded={menuOpen}
          onClick={() => setMenuOpen(!menuOpen)}
          type="button"
          style={{ minWidth: 0, minHeight: 0, width: '32px', height: '32px', padding: '4px' }}
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" strokeWidth={2} viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round"
              d={menuOpen ? "M6 18L18 6M6 6l12 12" : "M4 6h16M4 12h16M4 18h16"} />
          </svg>
        </button>
      </div>
      {/* Menú móvil overlay */}
      {menuOpen && (
        <NavMenuMobile
          navItems={navItems}
          user={user}
          handleNavClick={handleNavClick}
          handleLogout={handleLogout}
        />
      )}
    </header>
  );
}


----- C:\ThomasParking\ThomasParking\src\components\ResumenRegistros.jsx -----

// src/components/ResumenRegistros.jsx
import React from 'react'
import Emoji from './Emoji'

export default function ResumenRegistros({ registros = [] }) {
  const resumen = registros.reduce((acc, reg) => {
    if (reg.gratis) acc.gratis++
    else if (reg.recaudado) acc.recaudado += Number(reg.monto)
    else acc.pendiente += Number(reg.monto)
    acc.total += Number(reg.monto)
    acc.cantidad++
    return acc
  }, { recaudado: 0, pendiente: 0, gratis: 0, total: 0, cantidad: 0 })

  return (
    <div style={{
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(160px, 1fr))',
      gap: '1rem',
      padding: '1rem',
      background: 'rgba(255, 255, 255, 0.1)',
      borderRadius: '12px',
      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
    }}>
      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem' }}>
          <Emoji symbol="💰" /> ${resumen.recaudado.toFixed(2)}
        </div>
        <small style={{ color: '#666' }}>Recaudado</small>
      </div>

      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem' }}>
          <Emoji symbol="⏳" /> ${resumen.pendiente.toFixed(2)}
        </div>
        <small style={{ color: '#666' }}>Pendiente</small>
      </div>

      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem' }}>
          <Emoji symbol="🆓" /> {resumen.gratis}
        </div>
        <small style={{ color: '#666' }}>Gratis</small>
      </div>

      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem' }}>
          <Emoji symbol="📋" /> {resumen.cantidad}
        </div>
        <small style={{ color: '#666' }}>Registros</small>
      </div>

      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '1.5rem' }}>
          <Emoji symbol="🧾" /> ${resumen.total.toFixed(2)}
        </div>
        <small style={{ color: '#666' }}>Total</small>
      </div>
    </div>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\SelectorDeFoto.jsx -----

import React, { useState, useEffect } from 'react'
import CapturaCamara from './CapturaCamara'

export default function SelectorDeFoto({ onFileSelected }) {
  // El modo por defecto es 'camara'
  const [modo, setModo] = useState('camara')

  // Opcional: si usas modal, abre el modal automáticamente aquí

  const handleFile = file => {
    onFileSelected(file)
  }

  return (
    <div className="selector-foto">
      <div className="modos-seleccion" style={{ display: 'none' }}>
        {/* Si no quieres mostrar botones, ocultar con display: 'none' */}
        <button
          type="button"
          onClick={() => setModo('camara')}
          className={modo === 'camara' ? 'active' : ''}
        >
          📸 Usar Cámara
        </button>
        <button
          type="button"
          onClick={() => setModo('galeria')}
          className={modo === 'galeria' ? 'active' : ''}
        >
          🖼️ Subir Archivo
        </button>
      </div>
      {/* Renderiza la cámara automáticamente */}
      {modo === 'camara' ? (
        <CapturaCamara onCaptura={handleFile} />
      ) : (
        <input
          type="file"
          accept="image/*"
          onChange={e => {
            if (e.target.files && e.target.files[0]) {
              handleFile(e.target.files[0])
            }
          }}
        />
      )}
    </div>
  )
}


----- C:\ThomasParking\ThomasParking\src\components\SignUp.jsx -----

import React from 'react';
import { useState } from 'react';
import { supabase } from '../supabaseClient';
import { Link } from 'react-router-dom';
import Loader from './Loader';
import Emoji from './Emoji';

export default function SignUp() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nombre, setNombre] = useState('');
  const [rol, setRol] = useState('registrador');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSignUp = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      // Validaciones del cliente
      if (!nombre.trim()) throw new Error('El nombre es obligatorio');
      if (!/\S+@\S+\.\S+/.test(email)) throw new Error('Formato de correo inválido');
      if (password.length < 6) throw new Error('La contraseña debe tener al menos 6 caracteres');

      const { data, error: authError } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            nombre: nombre.trim(),
            rol: rol === 'copropietario' ? 'copropietario' : rol
          },
          emailRedirectTo: `${window.location.origin}/login`
        },
      });

      if (authError) {
        if (authError.message.includes('already registered')) {
          throw new Error('Este correo ya está registrado');
        }
        throw authError;
      }

      alert('Registro exitoso! Verifica tu correo electrónico para activar la cuenta.');
      setTimeout(() => window.location.href = '/login', 2000);

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-md mx-auto p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-6 text-center dark:text-white">
        <Emoji symbol="📝" /> Registro de Usuario
      </h2>

      {error && (
        <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md">
          ⚠️ {error}
        </div>
      )}

      <form onSubmit={handleSignUp} className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-1 dark:text-gray-200">
            Nombre Completo
          </label>
          <input
            type="text"
            value={nombre}
            onChange={(e) => setNombre(e.target.value)}
            className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            placeholder="Ej: Juan Pérez"
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-1 dark:text-gray-200">
            Correo Electrónico
          </label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            placeholder="tucorreo@ejemplo.com"
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-1 dark:text-gray-200">
            Contraseña
          </label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            placeholder="Mínimo 6 caracteres"
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-1 dark:text-gray-200">
            Rol del Usuario
          </label>
          <select
            value={rol}
            onChange={(e) => setRol(e.target.value)}
            className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          >
            <option value="registrador">Registrador</option>
            <option value="admin">Administrador</option>
            <option value="copropietario">Copropietario</option>
          </select>
        </div>

        <button
          type="submit"
          disabled={loading}
          className="w-full bg-blue-600 text-white p-2 rounded-md hover:bg-blue-700 transition-colors flex items-center justify-center"
        >
          {loading ? (
            <Loader text="Registrando..." small />
          ) : (
            <>
              <Emoji symbol="📝" /> Registrarse
            </>
          )}
        </button>
      </form>

      <p className="mt-4 text-center text-sm dark:text-gray-300">
        ¿Ya tienes cuenta?{' '}
        <Link
          to="/login"
          className="text-blue-600 hover:underline dark:text-blue-400"
        >
          Inicia sesión aquí
        </Link>
      </p>
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\components\SyncIndicator.jsx -----

import React from 'react';

export default function SyncIndicator({ syncStatus }) {
  // syncStatus puede ser: 'idle', 'syncing', 'success', 'error'
  let message = null;
  let style = {
    padding: '6px 12px',
    borderRadius: 8,
    fontWeight: '600',
    fontSize: '0.9rem',
    display: 'inline-flex',
    alignItems: 'center',
    gap: 6,
  };

  switch (syncStatus) {
    case 'syncing':
      message = <>🔄 Sincronizando datos...</>;
      style = { ...style, backgroundColor: '#e0f2fe', color: '#0284c7' };
      break;
    case 'success':
      message = <>✅ Sincronización exitosa</>;
      style = { ...style, backgroundColor: '#dcfce7', color: '#15803d' };
      break;
    case 'error':
      message = <>❌ Error en la sincronización</>;
      style = { ...style, backgroundColor: '#fee2e2', color: '#b91c1c' };
      break;
    default:
      return null; // no mostrar nada si idle
  }

  return <div style={style} aria-live="polite">{message}</div>;
}


----- C:\ThomasParking\ThomasParking\src\components\TablaResultados.jsx -----

import React from 'react';
import PropTypes from 'prop-types';

const TablaResultados = ({ resultados, onSeleccion }) => (
  <table className="tabla-resultados">
    <thead>
      <tr>
        <th>ID</th>
        <th>Nombre</th>
        <th>Estado</th>
      </tr>
    </thead>
    <tbody>
      {resultados.length === 0 ? (
        <tr>
          <td colSpan={3} style={{ textAlign: 'center' }}>No hay resultados</td>
        </tr>
      ) : (
        resultados.map(item => (
          <tr
            key={item.id}
            onClick={() => onSeleccion(item)}
            className="fila-seleccionable"
            style={{ cursor: 'pointer' }}
          >
            <td>{item.id}</td>
            <td>{item.nombre}</td>
            <td>{item.estado}</td>
          </tr>
        ))
      )}
    </tbody>
  </table>
);

TablaResultados.propTypes = {
  resultados: PropTypes.array.isRequired,
  onSeleccion: PropTypes.func.isRequired,
};

export default TablaResultados;


----- C:\ThomasParking\ThomasParking\src\components\ThemeToggle.jsx -----

// src/components/ThemeToggle.jsx
import React from 'react';
import { useTheme } from '../context/ThemeContext';

export default function ThemeToggle() {
  const { appearance, setAppearance } = useTheme();

  return (
    <select
      value={appearance}
      onChange={e => setAppearance(e.target.value)}
      style={{ borderRadius: 8, padding: 6, marginLeft: 10, fontWeight: 600 }}
      aria-label="Selector de tema"
    >
      <option value="light">🌞 Claro</option>
      <option value="dark">🌙 Oscuro</option>
      <option value="system">🖥️ Sistema</option>
    </select>
  );
}


----- C:\ThomasParking\ThomasParking\src\context\ThemeContext.jsx -----

// src/context/ThemeContext.jsx
import React, { createContext, useContext, useEffect, useState, useCallback } from 'react'

const ThemeContext = createContext()

const THEMES = ['light', 'dark', 'system']

function getPreferredTheme() {
  if (typeof window === 'undefined') return 'light'
  return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
}

function applyTheme(appearance) {
  const isDark =
    appearance === 'dark' ||
    (appearance === 'system' && getPreferredTheme() === 'dark')
  document.documentElement.classList.toggle('dark', isDark)
}

export function ThemeProvider({ children }) {
  const [appearance, setAppearance] = useState(() => {
    if (typeof window === 'undefined') return 'system'
    return localStorage.getItem('appearance') || 'system'
  })

  // Actualiza el tema cuando cambia la preferencia
  const updateAppearance = useCallback(
    (mode) => {
      if (!THEMES.includes(mode)) mode = 'system'
      setAppearance(mode)
      localStorage.setItem('appearance', mode)
      applyTheme(mode)
    },
    []
  )

  // Inicializa y escucha cambios del sistema
  useEffect(() => {
    applyTheme(appearance)
    const mq = window.matchMedia('(prefers-color-scheme: dark)')
    const handleChange = () => {
      if (appearance === 'system') applyTheme('system')
    }
    mq.addEventListener('change', handleChange)
    return () => mq.removeEventListener('change', handleChange)
  }, [appearance])

  return (
    <ThemeContext.Provider value={{ appearance, setAppearance: updateAppearance }}>
      {children}
    </ThemeContext.Provider>
  )
}

export function useTheme() {
  const context = useContext(ThemeContext)
  if (!context) throw new Error('useTheme debe usarse dentro de ThemeProvider')
  return context
}


----- C:\ThomasParking\ThomasParking\src\context\ViewContext.jsx -----

// src/context/ViewContext.jsx
import React, { createContext, useContext, useState } from 'react'

const ViewContext = createContext()

export function ViewProvider({ children }) {
  const [currentView, setCurrentView] = useState('registro') // Estado inicial
  
  return (
    <ViewContext.Provider value={{ currentView, setCurrentView }}>
      {children}
    </ViewContext.Provider>
  )
}

export const useView = () => {
  const context = useContext(ViewContext)
  if (!context) {
    throw new Error('useView debe usarse dentro de un ViewProvider')
  }
  return context
}


----- C:\ThomasParking\ThomasParking\src\hooks\useHover.jsx -----

import { useRef, useState, useEffect } from 'react';
import React from 'react'

export default function useHover() {
  const ref = useRef(null);
  const [isHovered, setIsHovered] = useState(false);

  useEffect(() => {
    const node = ref.current;
    if (!node) return;

    const handleMouseEnter = () => setIsHovered(true);
    const handleMouseLeave = () => setIsHovered(false);

    node.addEventListener('mouseenter', handleMouseEnter);
    node.addEventListener('mouseleave', handleMouseLeave);

    return () => {
      node.removeEventListener('mouseenter', handleMouseEnter);
      node.removeEventListener('mouseleave', handleMouseLeave);
    };
  }, [ref]);

  return [ref, isHovered];
}


----- C:\ThomasParking\ThomasParking\src\hooks\useOnlineStatus.jsx -----

// src/hooks/useOnlineStatus.jsx
import { useState, useEffect } from 'react'

export default function useOnlineStatus() {
  const [isOnline, setIsOnline] = useState(navigator.onLine)
  useEffect(() => {
    const update = () => setIsOnline(navigator.onLine)
    window.addEventListener('online', update)
    window.addEventListener('offline', update)
    return () => {
      window.removeEventListener('online', update)
      window.removeEventListener('offline', update)
    }
  }, [])
  return isOnline
}


----- C:\ThomasParking\ThomasParking\src\pages\AcercaDe.jsx -----

// src/components/AcercaDe.jsx
import Emoji from '../components/Emoji'
import React from 'react'


export default function AcercaDe() {
  return (
    <section
      className="acerca-de-container"
      style={{
        background: '#f8fafc',
        borderRadius: 16,
        boxShadow: '0 4px 6px rgba(0,0,0,0.05)',
        padding: '2rem',
        maxWidth: 700,
        margin: '2rem auto',
        textAlign: 'left'
      }}
    >
      <h2 style={{ fontWeight: 700, fontSize: '1.5rem', marginBottom: 12 }}>
        <Emoji symbol="ℹ️" label="Acerca de" /> Acerca de la aplicación
      </h2>
      <p style={{ fontSize: '1.08rem', marginBottom: 14 }}>
        <Emoji symbol="🚗" label="Parqueadero" /> <b>Aplicación para Gestión de Parqueaderos de Visita</b> diseñada para el <b>Conjunto Habitacional Thomas II</b>. Permite registrar, consultar y gestionar el uso de parqueaderos de visita de manera eficiente, transparente y segura.
      </p>
      <p style={{ fontSize: '1.08rem', marginBottom: 14 }}>
        <Emoji symbol="👨‍💻" label="Desarrollador" /> <b>Desarrollado por:</b> Gabriel Ortega - Presidente CEO Thomas II
      </p>
      <p style={{ fontSize: '1.08rem', marginBottom: 14 }}>
        <Emoji symbol="✉️" label="Email" /> <b>Contacto:</b> <a href="mailto:gabrielortega@outlook.com">gabrielortega@outlook.com</a>
        <br />
        <Emoji symbol="📱" label="Celular" /> <b>Celular:</b> <a href="tel:0999268450">0999268450</a>
      </p>
    </section>
  )
}


----- C:\ThomasParking\ThomasParking\src\pages\CapturaFoto.jsx -----

import React, { useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import CapturaCamara from '../components/CapturaCamara';

export default function CapturaFoto() {
  const [foto, setFoto] = useState(null);
  const navigate = useNavigate();
  const location = useLocation();

  // Recibe la función para manejar el archivo desde la página anterior, si se usa navigate con state
  const onEnviar = () => {
    if (location.state && location.state.onFileSelected && foto) {
      location.state.onFileSelected(foto);
    }
    navigate(-1); // Regresa a la página anterior
  };

  return (
    <div style={{
      minHeight: '100vh',
      background: '#000',
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center'
    }}>
      <div style={{ width: '100%', maxWidth: 320 }}>
        <CapturaCamara onCaptura={setFoto} />
      </div>
      {foto && (
        <button
          style={{
            marginTop: 20,
            padding: '12px 28px',
            fontSize: '1.1rem',
            background: '#38bdf8',
            color: '#fff',
            border: 'none',
            borderRadius: 8
          }}
          onClick={onEnviar}
        >
          Enviar foto
        </button>
      )}
      <button
        style={{
          marginTop: 16,
          background: 'transparent',
          color: '#fff',
          border: 'none',
          fontSize: 18
        }}
        onClick={() => navigate(-1)}
      >
        Cancelar
      </button>
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\pages\Consultas.jsx -----

// src/pages/Consultas.jsx
import React, { useState, useEffect } from 'react';
import { supabase } from '../supabaseClient';
import Loader from "../components/Loader";
import Emoji from '../components/Emoji';
import ResumenRegistros from '../components/ResumenRegistros';
import useOnlineStatus from '../hooks/useOnlineStatus';
import dayjs from 'dayjs';
import { v4 as uuidv4 } from 'uuid';

export default function Consultas() {
  const [filtros, setFiltros] = useState({
    fechaInicio: '',
    fechaFin: '',
    placa: '',
    propiedad: '',
    unidadAsignada: '',
    tipoVehiculo: ''
  });
  const [todos, setTodos] = useState([]);
  const [resultados, setResultados] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [copropietarios, setCopropietarios] = useState([]);
  const [editModal, setEditModal] = useState({ open: false, registro: null });
  const [editData, setEditData] = useState({});
  const [searching, setSearching] = useState(false);
  const [savingEdit, setSavingEdit] = useState(false);
  const [deleting, setDeleting] = useState(false);
  const isOnline = useOnlineStatus();

  useEffect(() => {
    const fetchCopropietarios = async () => {
      const { data, error } = await supabase
        .from('copropietarios')
        .select('id, nombre, propiedad, unidad_asignada');
      if (!error) setCopropietarios(data);
    };
    fetchCopropietarios();
  }, []);

  useEffect(() => {
    const fetchTodos = async () => {
      setLoading(true);
      setError(null);
      try {
        const { data, error } = await supabase
          .from('registros_parqueadero')
          .select(`
            id,
            placa_vehiculo,
            tipo_vehiculo,
            fecha_hora_ingreso,
            observaciones,
            foto_url,
            gratis,
            monto,
            recaudado,
            fecha_recaudo,
            dependencia_id,
            observacion_audio_url,
            copropietarios:dependencia_id(nombre, propiedad, unidad_asignada),
            usuario:usuario_id!inner(id, nombre)
          `)
          .order('fecha_hora_ingreso', { ascending: false });
        if (error) throw error;
        setTodos(data || []);
        setResultados(data || []);
      } catch (error) {
        setError(error.message);
        setTodos([]);
        setResultados([]);
      } finally {
        setLoading(false);
      }
    };
    fetchTodos();
  }, []);

  const propiedades = [...new Set(copropietarios.map(c => c.propiedad))].sort();
  const unidadesFiltradas = filtros.propiedad
    ? [...new Set(copropietarios.filter(c => c.propiedad === filtros.propiedad).map(c => c.unidad_asignada))]
    : [];
  const copropietarioSeleccionado = copropietarios.find(
    c => c.propiedad === filtros.propiedad && c.unidad_asignada === filtros.unidadAsignada
  );

  const handleSubmit = (e) => {
    e.preventDefault();
    setSearching(true);
    let filtrados = [...todos];
    if (filtros.fechaInicio)
      filtrados = filtrados.filter(r => r.fecha_hora_ingreso >= `${filtros.fechaInicio}T00:00:00`);
    if (filtros.fechaFin)
      filtrados = filtrados.filter(r => r.fecha_hora_ingreso <= `${filtros.fechaFin}T23:59:59`);
    if (filtros.placa)
      filtrados = filtrados.filter(r => r.placa_vehiculo?.toLowerCase().includes(filtros.placa.toLowerCase()));
    if (filtros.tipoVehiculo)
      filtrados = filtrados.filter(r => r.tipo_vehiculo === filtros.tipoVehiculo);
    if (filtros.propiedad && !filtros.unidadAsignada) {
      filtrados = filtrados.filter(r => r.copropietarios?.propiedad === filtros.propiedad);
    }
    if (filtros.propiedad && filtros.unidadAsignada && copropietarioSeleccionado) {
      filtrados = filtrados.filter(r => r.dependencia_id === copropietarioSeleccionado.id);
    }
    setResultados(filtrados);
    setTimeout(() => setSearching(false), 500);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFiltros(prev => ({
      ...prev,
      [name]: value,
      ...(name === 'propiedad' && { unidadAsignada: '' })
    }));
  };

  const limpiarFiltros = () => {
    setFiltros({
      fechaInicio: '',
      fechaFin: '',
      placa: '',
      propiedad: '',
      unidadAsignada: '',
      tipoVehiculo: ''
    });
    setResultados(todos);
  };

  const handleEdit = (registro) => {
    setEditModal({ open: true, registro });
    setEditData({
      placa_vehiculo: registro.placa_vehiculo,
      tipo_vehiculo: registro.tipo_vehiculo,
      fecha_hora_ingreso: registro.fecha_hora_ingreso?.slice(0, 10) || '',
      gratis: !!registro.gratis,
      observaciones: registro.observaciones || '',
      dependencia_id: registro.dependencia_id,
      recaudado: !!registro.recaudado,
      fecha_recaudo: registro.fecha_recaudo || ''
    });
  };

  const handleEditChange = (e) => {
    const { name, value, type, checked } = e.target;
    setEditData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
      ...(name === 'recaudado' && !checked ? { fecha_recaudo: '' } : {})
    }));
  };

  const handleEditSave = async (e) => {
    e.preventDefault();
    setSavingEdit(true);
    const id = editModal.registro.id;
    const monto = editData.gratis ? 0 : (editData.tipo_vehiculo === 'carro' ? 1.00 : 0.50);
    try {
      const { error } = await supabase
        .from('registros_parqueadero')
        .update({ ...editData, monto })
        .eq('id', id);
      if (error) throw error;
      const updated = todos.map(r => r.id === id ? { ...r, ...editData, monto } : r);
      setTodos(updated);
      setResultados(updated);
      setEditModal({ open: false, registro: null });
    } catch (error) {
      setError(error.message);
    } finally {
      setSavingEdit(false);
    }
  };

  const handleDelete = async (registro) => {
    if (!window.confirm('¿Seguro que deseas eliminar este registro?')) return;
    setDeleting(true);
    try {
      const { error } = await supabase
        .from('registros_parqueadero')
        .delete()
        .eq('id', registro.id);
      if (error) throw error;
      const updated = todos.filter(r => r.id !== registro.id);
      setTodos(updated);
      setResultados(updated);
    } catch (err) {
      setError(err.message);
    } finally {
      setDeleting(false);
    }
  };

  return (
    <div className="consultas-container">
      <h2><Emoji symbol="🔎" label="Consultas" /> Consultas y Reportes</h2>
      <form
        onSubmit={handleSubmit}
        className="form-inline"
        style={{
          display: 'flex',
          flexWrap: 'wrap',
          alignItems: 'center',
          gap: 16,
          marginBottom: 18,
          justifyContent: 'center'
        }}
      >
        <label style={{ marginRight: 8, whiteSpace: 'nowrap' }}>
          <Emoji symbol="📅" /> Inicio:
          <input
            type="date"
            name="fechaInicio"
            value={filtros.fechaInicio}
            onChange={handleChange}
            style={{ marginLeft: 6, width: 120 }}
          />
        </label>
        <label style={{ marginRight: 8, whiteSpace: 'nowrap' }}>
          <Emoji symbol="📅" /> Fin:
          <input
            type="date"
            name="fechaFin"
            value={filtros.fechaFin}
            onChange={handleChange}
            style={{ marginLeft: 6, width: 120 }}
          />
        </label>
        <label style={{ marginRight: 8, whiteSpace: 'nowrap' }}>
          <Emoji symbol="🔍" /> Placa:
          <input
            type="text"
            name="placa"
            placeholder="Buscar por placa"
            value={filtros.placa}
            onChange={handleChange}
            style={{ marginLeft: 6, width: 120 }}
          />
        </label>
        <label style={{ marginRight: 8, whiteSpace: 'nowrap' }}>
          <Emoji symbol="🏠" /> Propiedad:
          <select
            name="propiedad"
            value={filtros.propiedad}
            onChange={handleChange}
            style={{ marginLeft: 6, width: 90 }}
          >
            <option value="">Todas</option>
            {propiedades.map(prop => (
              <option key={prop} value={prop}>{prop}</option>
            ))}
          </select>
        </label>
        <label style={{ marginRight: 8, whiteSpace: 'nowrap' }}>
          <Emoji symbol="🔢" /> Unidad:
          <select
            name="unidadAsignada"
            value={filtros.unidadAsignada}
            onChange={handleChange}
            disabled={!filtros.propiedad}
            style={{ marginLeft: 6, width: 70 }}
          >
            <option value="">Todas</option>
            {unidadesFiltradas.map(unidad => (
              <option key={unidad} value={unidad}>{unidad}</option>
            ))}
          </select>
        </label>
        <label style={{ marginRight: 8, whiteSpace: 'nowrap' }}>
          <Emoji symbol="🚗" /> Tipo:
          <select
            name="tipoVehiculo"
            value={filtros.tipoVehiculo}
            onChange={handleChange}
            style={{ marginLeft: 6, width: 90 }}
          >
            <option value="">Todos</option>
            <option value="carro">Carro 🚗</option>
            <option value="moto">Moto 🏍️</option>
          </select>
        </label>
        <button
          type="submit"
          disabled={loading || searching}
          className="btn-buscar"
          style={{ padding: '8px 20px', marginLeft: 8, minWidth: 110, display: 'flex', alignItems: 'center', gap: 7 }}
        >
          {searching ? <Loader text="" /> : <Emoji symbol="🔎" />}
          {searching ? 'Buscando...' : 'Buscar'}
        </button>
        <button
          type="button"
          onClick={limpiarFiltros}
          className="btn-limpiar"
          style={{ padding: '8px 16px', marginLeft: 6 }}
        >
          <Emoji symbol="🧹" /> Limpiar
        </button>
      </form>
      {error && <div className="error-message">{error}</div>}
      {loading && <Loader text="Buscando registros..." />}

      {resultados.length > 0 && (
        <ResumenRegistros registros={resultados} titulo="Resumen de Consultas" />
      )}

      {resultados.length > 0 ? (
        <div
          className="resultados-table-container"
          style={{
            maxHeight: '500px',
            overflowY: 'auto',
            overflowX: 'auto',
            border: '1px solid #ccc',
            borderRadius: 8,
          }}
        >
          <table
            className="resultados-table"
            style={{ width: 'max-content', minWidth: '100%' }}
          >
            <thead>
              <tr>
                <th><Emoji symbol="📅" label="Fecha" /> Fecha</th>
                <th><Emoji symbol="🚗" label="Placa" /> Placa</th>
                <th><Emoji symbol="🏍️" label="Tipo" /> Tipo</th>
                <th><Emoji symbol="👥" label="Copropietario" /> Copropietario</th>
                <th><Emoji symbol="💵" label="Monto" /> Monto</th>
                <th><Emoji symbol="🟢" label="Estado" /> Estado</th>
                <th><Emoji symbol="📷" label="Foto" /> Foto</th>
                <th><Emoji symbol="👤" label="Registrado por" /> Registrado por</th>
                <th><Emoji symbol="⚙️" label="Acciones" /> Acciones</th>
              </tr>
            </thead>
            <tbody>
              {resultados.map(reg => (
                <tr key={reg.id} className={reg.gratis ? 'registro-gratis' : ''}>
                  <td>
                    {reg.fecha_hora_ingreso
                      ? dayjs(reg.fecha_hora_ingreso).format('DD/MM/YYYY')
                      : ''}
                  </td>
                  <td>{reg.placa_vehiculo}</td>
                  <td>
                    {reg.tipo_vehiculo?.toLowerCase() === 'carro' && <Emoji symbol="🚗" />}
                    {reg.tipo_vehiculo?.toLowerCase() === 'moto' && <Emoji symbol="🏍️" />}
                    <span style={{ marginLeft: 6 }}>{reg.tipo_vehiculo?.toUpperCase()}</span>
                  </td>
                  <td>
                    {reg.copropietarios?.nombre || '-'}
                    <br />
                    <small>
                      {reg.copropietarios?.propiedad || 'Sin propiedad'} - {reg.copropietarios?.unidad_asignada || 'Sin unidad'}
                    </small>
                  </td>
                  <td>${Number(reg.monto).toFixed(2)}</td>
                  <td>
                    {reg.gratis ? <Emoji symbol="🆓" label="Gratis" />
                      : reg.recaudado ? <Emoji symbol="🔗" label="Recaudado" />
                      : <Emoji symbol="⏳" label="Pendiente" />}
                  </td>
                  <td>
                    {reg.foto_url && (
                      <a href={reg.foto_url} target="_blank" rel="noopener noreferrer">
                        <img src={reg.foto_url} alt="Evidencia" className="thumbnail" />
                      </a>
                    )}
                  </td>
                  <td>{reg.usuario?.nombre || '-'}</td>
                  <td>
                    <button
                      className="edit-btn"
                      onClick={() => handleEdit(reg)}
                      title="Editar"
                      disabled={!isOnline || savingEdit}
                      style={{ marginRight: 4 }}
                    >
                      <Emoji symbol="✏️" label="Editar" />
                    </button>
                    <button
                      className="delete-btn"
                      onClick={() => handleDelete(reg)}
                      title="Eliminar"
                      disabled={!isOnline || deleting}
                    >
                      {deleting ? <Loader text="" /> : <Emoji symbol="🗑️" label="Eliminar" />}
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ) : (
        !loading && <div className="sin-resultados">No se encontraron resultados</div>
      )}

      {/* MODAL DE EDICIÓN */}
      {editModal.open && (
        <div className="modal-backdrop">
          <div className="modal-content">
            <h3><Emoji symbol="✏️" /> Editar Registro</h3>
            <form onSubmit={handleEditSave}>
              <label>
                Placa:
                <input
                  name="placa_vehiculo"
                  value={editData.placa_vehiculo}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                />
              </label>
              <label>
                Tipo:
                <select
                  name="tipo_vehiculo"
                  value={editData.tipo_vehiculo}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                >
                  <option value="carro">Carro 🚗</option>
                  <option value="moto">Moto 🏍️</option>
                </select>
              </label>
              <label>
                Fecha ingreso:
                <input
                  type="date"
                  name="fecha_hora_ingreso"
                  value={editData.fecha_hora_ingreso}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                />
              </label>
              <label>
                Observaciones:
                <input
                  name="observaciones"
                  value={editData.observaciones}
                  onChange={handleEditChange}
                  disabled={!isOnline}
                />
              </label>
              <label>
                Copropietario:
                <select
                  name="dependencia_id"
                  value={editData.dependencia_id || ''}
                  onChange={handleEditChange}
                  required
                  disabled={!isOnline}
                >
                  <option value="">Seleccione...</option>
                  {copropietarios.map(dep => (
                    <option key={dep.id} value={dep.id}>
                      {dep.nombre} ({dep.propiedad} - {dep.unidad_asignada})
                    </option>
                  ))}
                </select>
              </label>
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  name="gratis"
                  checked={!!editData.gratis}
                  onChange={handleEditChange}
                  disabled={!isOnline}
                />
                <Emoji symbol="🆓" label="Gratis" /> Gratis
              </label>
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  name="recaudado"
                  checked={!!editData.recaudado}
                  onChange={handleEditChange}
                  disabled={!isOnline}
                />
                <Emoji symbol="🔗" label="Recaudado" /> Recaudado
              </label>
              {editData.recaudado && (
                <label>
                  Fecha Recaudo:
                  <input
                    type="date"
                    name="fecha_recaudo"
                    value={editData.fecha_recaudo || ''}
                    onChange={handleEditChange}
                    required={!!editData.recaudado}
                    disabled={!isOnline || !editData.recaudado}
                  />
                </label>
              )}
              <div className="acciones-modal">
                <button type="submit" className="save-btn" disabled={!isOnline || savingEdit}>
                  {savingEdit ? <Loader text="" /> : 'Guardar'}
                </button>
                <button
                  type="button"
                  className="cancel-btn"
                  onClick={() => setEditModal({ open: false, registro: null })}
                  disabled={savingEdit}
                >
                  Cancelar
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\pages\DescargoGestion.jsx -----

import React, { useState, useEffect } from "react";
import { useForm, Controller } from "react-hook-form";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { supabase } from "../supabaseClient";
import dayjs from "dayjs";

// Error Boundary para capturar errores en el componente
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true };
  }
  componentDidCatch(error, errorInfo) {
    console.error("Error en DescargoGestion:", error, errorInfo);
  }
  render() {
    if (this.state.hasError) {
      return (
        <div style={{ color: "#b91c1c", padding: 20 }}>
          ⚠️ Ha ocurrido un error al cargar el componente. Por favor recargue la página.
        </div>
      );
    }
    return this.props.children;
  }
}

// Polyfill para crypto.randomUUID si no existe
if (typeof window !== "undefined" && (!window.crypto || !window.crypto.randomUUID)) {
  if (!window.crypto) window.crypto = {};
  window.crypto.randomUUID = function () {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
      const r = (Math.random() * 16) | 0,
        v = c === "x" ? r : (r & 0x3) | 0x8;
      return v.toString(16);
    });
  };
}

const Emoji = ({ symbol, label }) => (
  <span role="img" aria-label={label || ""} style={{ marginRight: 6 }}>
    {symbol}
  </span>
);

const AdjuntosPreview = ({ archivos, onRemove }) => (
  <div style={{ display: "flex", gap: 8, flexWrap: "wrap" }}>
    {archivos &&
      archivos.map((archivo, idx) => {
        // Adaptar: si archivo es string, se convierte a objeto {url}
        const url = typeof archivo === "string" ? archivo : archivo.url;
        const name = archivo.name || `Archivo ${idx + 1}`;
        const type = archivo.type || "";
        const isImage =
          type.startsWith("image/") ||
          /\.(jpe?g|png|gif|bmp|webp)$/i.test(url);

        return (
          <div key={idx} style={{ position: "relative", width: 70, textAlign: "center" }}>
            {onRemove && (
              <button
                onClick={() => onRemove(idx)}
                style={{
                  position: "absolute",
                  top: -8,
                  right: -8,
                  background: "#dc2626",
                  color: "white",
                  border: "none",
                  borderRadius: "50%",
                  width: 20,
                  height: 20,
                  cursor: "pointer",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  fontSize: 12,
                }}
                title="Eliminar archivo"
              >
                ×
              </button>
            )}
            {isImage ? (
              <img
                src={url}
                alt={name}
                style={{
                  width: 70,
                  height: 70,
                  objectFit: "cover",
                  borderRadius: 6,
                  border: "1px solid #ccc",
                }}
              />
            ) : (
              <div
                style={{
                  width: 70,
                  height: 70,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  backgroundColor: "#f0f0f0",
                  borderRadius: 6,
                  border: "1px solid #ccc",
                  fontSize: 28,
                  color: "#666",
                }}
              >
                📄
              </div>
            )}
            <a
              href={url}
              download={name}
              target="_blank"
              rel="noopener noreferrer"
              style={{
                display: "block",
                fontSize: 11,
                marginTop: 4,
                color: "#0366d6",
                textDecoration: "none",
                wordBreak: "break-word",
              }}
            >
              {name.length > 15 ? name.slice(0, 12) + "..." : name}
            </a>
          </div>
        );
      })}
  </div>
);

function DescargoGestionComponent() {
  const {
    register,
    handleSubmit,
    control,
    reset,
    watch,
    setValue,
    formState: { errors, isSubmitting },
  } = useForm({
    defaultValues: {
      descripcion: "",
      fecha: new Date(),
      esfuerzo: [],
      monto: "",
      horas: "",
      materiales: "",
      observaciones: "",
      archivos: [],
    },
  });

  const [mensaje, setMensaje] = useState("");
  const [subiendo, setSubiendo] = useState(false);
  const [archivosPreview, setArchivosPreview] = useState([]);
  const [registros, setRegistros] = useState([]);
  const [loadingRegistros, setLoadingRegistros] = useState(false);
  const [errorRegistros, setErrorRegistros] = useState(null);
  const [editId, setEditId] = useState(null);
  const [editRow, setEditRow] = useState({});

  const esfuerzosDisponibles = [
    { valor: "económico", etiqueta: "💲 Económico" },
    { valor: "participativo", etiqueta: "🤝 Participativo" },
    { valor: "utilitarios", etiqueta: "🛠️ Utilitarios" },
  ];

  const archivos = watch("archivos");

  useEffect(() => {
    if (!archivos || archivos.length === 0) {
      setArchivosPreview([]);
      return;
    }
    const previews = Array.from(archivos).map((file) => ({
      url: URL.createObjectURL(file),
      name: file.name,
      type: file.type,
    }));
    setArchivosPreview(previews);
    return () => {
      previews.forEach((p) => URL.revokeObjectURL(p.url));
    };
    // eslint-disable-next-line
  }, [archivos]);

  const fetchRegistros = async () => {
    setLoadingRegistros(true);
    setErrorRegistros(null);
    try {
      const { data, error } = await supabase
        .from("descargos_gestion")
        .select("*")
        .order("fecha", { ascending: false });
      if (error) throw error;
      setRegistros(data || []);
    } catch (error) {
      setErrorRegistros(error.message);
    } finally {
      setLoadingRegistros(false);
    }
  };

  useEffect(() => {
    fetchRegistros();
  }, []);

  const handleArchivos = (e) => {
    const files = Array.from(e.target.files);
    setValue("archivos", files, { shouldValidate: true });
  };

  // --- CREAR NUEVO REGISTRO ---
  const onSubmit = async (data) => {
    setMensaje("");
    setSubiendo(true);

    try {
      let archivosUrls = [];
      if (data.archivos && data.archivos.length > 0) {
        for (const file of data.archivos) {
          const ext = file.name.split(".").pop();
          const nombre = `descargo_${Date.now()}_${window.crypto.randomUUID()}.${ext}`;
          const { error: uploadError } = await supabase.storage
            .from("descargos-evidencias")
            .upload(nombre, file, { upsert: false });
          if (uploadError) throw uploadError;

          const { data: urlData } = supabase.storage
            .from("descargos-evidencias")
            .getPublicUrl(nombre);
          archivosUrls.push(urlData.publicUrl); // SOLO URL
        }
      }

      const nuevoRegistro = {
        descripcion: data.descripcion,
        fecha: data.fecha.toISOString(),
        esfuerzo: data.esfuerzo,
        monto: data.monto ? Number(data.monto) : null,
        horas: data.horas ? Number(data.horas) : null,
        materiales: data.materiales || null,
        observaciones: data.observaciones || null,
        archivos: archivosUrls, // SOLO ARRAY DE URLS
      };

      const { error: insertError } = await supabase
        .from("descargos_gestion")
        .insert([nuevoRegistro]);
      if (insertError) throw insertError;

      setMensaje("✅ Descargo registrado exitosamente.");
      reset();
      setArchivosPreview([]);
      fetchRegistros();
    } catch (error) {
      setMensaje(`⚠️ Error: ${error.message}`);
    } finally {
      setSubiendo(false);
    }
  };

  // --- AGREGAR ARCHIVOS AL EDITAR ---
  const handleEditFiles = async (e) => {
    const files = Array.from(e.target.files);
    const nuevosArchivos = [];
    for (const file of files) {
      const ext = file.name.split(".").pop();
      const nombre = `descargo_${Date.now()}_${window.crypto.randomUUID()}.${ext}`;
      const { error } = await supabase.storage
        .from("descargos-evidencias")
        .upload(nombre, file, { upsert: false });
      if (error) throw error;
      const { data: urlData } = supabase.storage
        .from("descargos-evidencias")
        .getPublicUrl(nombre);
      nuevosArchivos.push(urlData.publicUrl); // SOLO URL
    }
    setEditRow((prev) => ({
      ...prev,
      archivos: [...(prev.archivos || []), ...nuevosArchivos], // SOLO URLS
    }));
  };

  // --- ELIMINAR ARCHIVO EN EDICIÓN ---
  const handleRemoveFile = (index) => {
    setEditRow((prev) => ({
      ...prev,
      archivos: prev.archivos.filter((_, i) => i !== index),
    }));
  };

  // --- GUARDAR EDICIÓN ---
  const guardarEdicion = async () => {
    try {
      await supabase
        .from("descargos_gestion")
        .update({
          ...editRow,
          fecha: editRow.fecha.toISOString(),
          archivos: editRow.archivos, // SOLO URLS
        })
        .eq("id", editId);
      fetchRegistros();
      setEditId(null);
    } catch (error) {
      setMensaje(`❌ Error al actualizar: ${error.message}`);
    }
  };

  // --- ADAPTADOR PARA PREVIEW ---
  const archivosPreviewAdapt = (arr) =>
    arr?.map((a) => (typeof a === "string" ? { url: a } : a)) || [];

  // --- MANEJO DE ESFUERZO EN EDICIÓN ---
  const handleEditEsfuerzo = (e) => {
    const { options } = e.target;
    const selected = [];
    for (let i = 0; i < options.length; i++) {
      if (options[i].selected) selected.push(options[i].value);
    }
    setEditRow((prev) => ({
      ...prev,
      esfuerzo: selected,
    }));
  };

  return (
    <div
      style={{
        background: "linear-gradient(135deg, #e0e7ff 0%, #f8fafc 100%)",
        borderRadius: 24,
        boxShadow: "0 6px 32px #6366f133",
        padding: "2.5rem 1.5rem",
        maxWidth: 1200,
        margin: "2.5rem auto",
      }}
    >
      <h2
        style={{
          display: "flex",
          alignItems: "center",
          gap: 10,
          fontWeight: 700,
          fontSize: "1.6rem",
          marginBottom: 16,
        }}
      >
        <Emoji symbol="📝" /> Descargo de Gestión
      </h2>

      <form
        onSubmit={handleSubmit(onSubmit)}
        autoComplete="off"
        style={{ display: "flex", flexDirection: "column", gap: 20 }}
        noValidate
      >
        <div>
          <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
            <Emoji symbol="📄" /> Descripción del descargo *
          </label>
          <textarea
            {...register("descripcion", { required: "Campo obligatorio" })}
            style={{
              width: "100%",
              padding: "8px 12px",
              borderRadius: 8,
              border: errors.descripcion ? "2px solid #dc2626" : "1px solid #94a3b8",
              minHeight: 100,
            }}
            placeholder="Detalle las actividades realizadas..."
          />
          {errors.descripcion && (
            <span style={{ color: "#dc2626", fontSize: 14 }}>
              {errors.descripcion.message}
            </span>
          )}
        </div>

        <div>
          <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
            <Emoji symbol="📅" /> Fecha del descargo *
          </label>
          <Controller
            control={control}
            name="fecha"
            rules={{ required: true }}
            render={({ field }) => (
              <DatePicker
                selected={field.value}
                onChange={(date) => field.onChange(date)}
                dateFormat="dd/MM/yyyy"
                className="custom-datepicker"
                showTimeSelect
              />
            )}
          />
        </div>

        <div>
          <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
            <Emoji symbol="💪" /> Tipo de esfuerzo *
          </label>
          <div style={{ display: "flex", gap: 16, flexWrap: "wrap" }}>
            {esfuerzosDisponibles.map((esfuerzo) => (
              <label key={esfuerzo.valor} style={{ display: "flex", alignItems: "center" }}>
                <input
                  type="checkbox"
                  value={esfuerzo.valor}
                  {...register("esfuerzo", {
                    validate: (value) =>
                      value.length > 0 || "Seleccione al menos un tipo de esfuerzo",
                  })}
                  style={{ marginRight: 6 }}
                />
                {esfuerzo.etiqueta}
              </label>
            ))}
          </div>
          {errors.esfuerzo && (
            <span style={{ color: "#dc2626", fontSize: 14 }}>
              {errors.esfuerzo.message}
            </span>
          )}
        </div>

        <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 20 }}>
          <div>
            <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
              <Emoji symbol="💲" /> Monto económico (opcional)
            </label>
            <input
              type="number"
              {...register("monto")}
              style={{
                width: "100%",
                padding: "8px 12px",
                borderRadius: 8,
                border: "1px solid #94a3b8",
              }}
              placeholder="Ingrese el monto en USD"
            />
          </div>

          <div>
            <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
              <Emoji symbol="⏳" /> Horas invertidas (opcional)
            </label>
            <input
              type="number"
              {...register("horas")}
              style={{
                width: "100%",
                padding: "8px 12px",
                borderRadius: 8,
                border: "1px solid #94a3b8",
              }}
              placeholder="Horas totales"
            />
          </div>
        </div>

        <div>
          <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
            <Emoji symbol="🛠️" /> Materiales utilizados (opcional)
          </label>
          <input
            type="text"
            {...register("materiales")}
            style={{
              width: "100%",
              padding: "8px 12px",
              borderRadius: 8,
              border: "1px solid #94a3b8",
            }}
            placeholder="Liste los materiales separados por comas"
          />
        </div>

        <div>
          <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
            <Emoji symbol="📋" /> Observaciones adicionales (opcional)
          </label>
          <textarea
            {...register("observaciones")}
            style={{
              width: "100%",
              padding: "8px 12px",
              borderRadius: 8,
              border: "1px solid #94a3b8",
              minHeight: 80,
            }}
            placeholder="Agregue cualquier comentario adicional..."
          />
        </div>

        <div>
          <label style={{ display: "block", marginBottom: 6, fontWeight: 500 }}>
            <Emoji symbol="📎" /> Adjuntar evidencias (opcional)
          </label>
          <input
            type="file"
            multiple
            onChange={handleArchivos}
            accept="image/*,audio/*"
            style={{ marginBottom: 12 }}
          />
          <AdjuntosPreview archivos={archivosPreview} />
        </div>

        <button
          type="submit"
          className="btn-modern"
          disabled={isSubmitting || subiendo}
          style={{
            backgroundColor: "#4338ca",
            color: "white",
            padding: "10px 16px",
            borderRadius: 8,
            border: "none",
            fontSize: 16,
            cursor: isSubmitting || subiendo ? "not-allowed" : "pointer",
            opacity: isSubmitting || subiendo ? 0.6 : 1,
            transition: "background-color 0.3s",
          }}
        >
          {subiendo ? "Enviando..." : "Registrar Descargo"}
        </button>
        {mensaje && (
          <div
            style={{
              marginTop: 8,
              color: mensaje.startsWith("✅") ? "#16a34a" : "#b91c1c",
              fontWeight: 500,
            }}
          >
            {mensaje}
          </div>
        )}
      </form>

      <div style={{ marginTop: 48, overflowX: "auto" }}>
        <h3 style={{ fontSize: "1.3rem", marginBottom: 16 }}>
          <Emoji symbol="📋" /> Registros existentes
        </h3>

        {loadingRegistros ? (
          <div>Cargando registros...</div>
        ) : errorRegistros ? (
          <div style={{ color: "#dc2626" }}>Error: {errorRegistros}</div>
        ) : (
          <table style={{ width: "100%", borderCollapse: "collapse", fontSize: 14 }}>
            <thead>
              <tr style={{ backgroundColor: "#e0e7ff" }}>
                <th style={{ padding: 12 }}>Fecha</th>
                <th style={{ padding: 12 }}>Descripción</th>
                <th style={{ padding: 12 }}>Esfuerzo</th>
                <th style={{ padding: 12 }}>Archivos</th>
                <th style={{ padding: 12 }}>Acciones</th>
              </tr>
            </thead>
            <tbody>
              {registros.map((reg) =>
                editId === reg.id ? (
                  <tr key={reg.id} style={{ borderBottom: "1px solid #e2e8f0", background: "#f8fafc" }}>
                    <td style={{ padding: 12 }}>
                      <DatePicker
                        selected={editRow.fecha}
                        onChange={(date) => setEditRow((prev) => ({ ...prev, fecha: date }))}
                        dateFormat="dd/MM/yyyy"
                        showTimeSelect
                      />
                    </td>
                    <td style={{ padding: 12 }}>
                      <input
                        name="descripcion"
                        value={editRow.descripcion}
                        onChange={e => setEditRow(prev => ({ ...prev, descripcion: e.target.value }))}
                        style={{ width: "100%" }}
                      />
                    </td>
                    <td style={{ padding: 12 }}>
                      <select
                        name="esfuerzo"
                        value={editRow.esfuerzo}
                        onChange={handleEditEsfuerzo}
                        multiple
                        style={{ width: "100%" }}
                      >
                        {esfuerzosDisponibles.map((esf) => (
                          <option key={esf.valor} value={esf.valor}>
                            {esf.etiqueta}
                          </option>
                        ))}
                      </select>
                    </td>
                    <td style={{ padding: 12 }}>
                      <input
                        type="file"
                        multiple
                        onChange={handleEditFiles}
                        style={{ marginBottom: 8 }}
                      />
                      <AdjuntosPreview archivos={archivosPreviewAdapt(editRow.archivos)} onRemove={handleRemoveFile} />
                    </td>
                    <td style={{ padding: 12 }}>
                      <button
                        onClick={guardarEdicion}
                        style={{ marginRight: 8, background: "none", border: "none", cursor: "pointer" }}
                        title="Guardar"
                      >
                        💾
                      </button>
                      <button
                        onClick={() => setEditId(null)}
                        style={{ background: "none", border: "none", cursor: "pointer" }}
                        title="Cancelar"
                      >
                        ❌
                      </button>
                    </td>
                  </tr>
                ) : (
                  <tr key={reg.id} style={{ borderBottom: "1px solid #e2e8f0" }}>
                    <td style={{ padding: 12 }}>{dayjs(reg.fecha).format("DD/MM/YYYY HH:mm")}</td>
                    <td style={{ padding: 12 }}>{reg.descripcion}</td>
                    <td style={{ padding: 12 }}>
                      {reg.esfuerzo?.map(
                        (e) => esfuerzosDisponibles.find((esf) => esf.valor === e)?.etiqueta
                      ).join(", ")}
                    </td>
                    <td style={{ padding: 12 }}>
                      <AdjuntosPreview archivos={archivosPreviewAdapt(reg.archivos)} />
                    </td>
                    <td style={{ padding: 12 }}>
                      <button
                        onClick={() => setEditId(reg.id) || setEditRow({ ...reg, fecha: new Date(reg.fecha) })}
                        style={{ marginRight: 8, background: "none", border: "none", cursor: "pointer" }}
                        title="Editar"
                      >
                        ✏️
                      </button>
                      <button
                        onClick={() => handleEliminar(reg.id)}
                        style={{ background: "none", border: "none", cursor: "pointer" }}
                        title="Eliminar"
                      >
                        🗑️
                      </button>
                    </td>
                  </tr>
                )
              )}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
}

// Exportar el componente envuelto en ErrorBoundary
export default function DescargoGestion() {
  return (
    <ErrorBoundary>
      <DescargoGestionComponent />
    </ErrorBoundary>
  );
}


----- C:\ThomasParking\ThomasParking\src\pages\GestionCopropietarios.jsx -----

import React, { useState, useEffect } from 'react'
import Loader from '../components/Loader'
import Emoji from '../components/Emoji'

// Utilidad para fetch seguro de copropietarios usando el proxy
async function fetchCopropietariosSeguro() {
  try {
    const response = await fetch('/api/cors-proxy/copropietarios');
    if (!response.ok) {
      const text = await response.text();
      throw new Error(`Error HTTP ${response.status}: ${text}`);
    }
    const contentType = response.headers.get("content-type");
    if (!contentType || !contentType.includes("application/json")) {
      const text = await response.text();
      throw new Error("Respuesta no es JSON: " + text);
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Error cargando copropietarios:", error.message);
    throw error;
  }
}

export default function GestionCopropietarios() {
  const [copropietarios, setCopropietarios] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [modal, setModal] = useState({ open: false, copropietario: null })
  const [form, setForm] = useState({ nombre: '', propiedad: '', unidad_asignada: '' })

  // Leer copropietarios con manejo robusto de errores
  const fetchCopropietarios = async () => {
    setLoading(true)
    setError(null)
    try {
      const data = await fetchCopropietariosSeguro()
      setCopropietarios(data)
    } catch (err) {
      setError(err.message)
    }
    setLoading(false)
  }

  useEffect(() => { fetchCopropietarios() }, [])

  // Crear o actualizar copropietario
  const handleSave = async (e) => {
    e.preventDefault()
    setError(null)
    if (!form.nombre || !form.propiedad || !form.unidad_asignada) {
      setError('Todos los campos son obligatorios')
      return
    }
    try {
      let response;
      if (modal.copropietario) {
        // Update
        response = await fetch(`/api/cors-proxy/copropietarios?id=eq.${modal.copropietario.id}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(form)
        });
      } else {
        // Create
        response = await fetch('/api/cors-proxy/copropietarios', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify([form])
        });
      }
      if (!response.ok) {
        const text = await response.text();
        throw new Error(`Error: ${text}`);
      }
      setModal({ open: false, copropietario: null })
      setForm({ nombre: '', propiedad: '', unidad_asignada: '' })
      fetchCopropietarios()
    } catch (err) {
      setError(err.message)
    }
  }

  // Eliminar copropietario
  const handleDelete = async (id) => {
    if (!window.confirm('¿Eliminar copropietario?')) return
    setError(null)
    try {
      const response = await fetch(`/api/cors-proxy/copropietarios?id=eq.${id}`, {
        method: 'DELETE'
      });
      if (!response.ok) {
        const text = await response.text();
        throw new Error(`Error: ${text}`);
      }
      fetchCopropietarios()
    } catch (err) {
      setError(err.message)
    }
  }

  // Abrir modal para editar
  const handleEdit = (copropietario) => {
    setForm({
      nombre: copropietario.nombre,
      propiedad: copropietario.propiedad,
      unidad_asignada: copropietario.unidad_asignada
    })
    setModal({ open: true, copropietario })
  }

  // Abrir modal para crear
  const handleNew = () => {
    setForm({ nombre: '', propiedad: '', unidad_asignada: '' })
    setModal({ open: true, copropietario: null })
  }

  return (
    <div className="gestion-copropietarios-container">
      <h2>
        <Emoji symbol="👥" label="Copropietarios" /> Gestión de Copropietarios
      </h2>
      <button className="edit-btn" onClick={handleNew}>
        <Emoji symbol="➕" label="Agregar" /> Nuevo copropietario
      </button>
      {loading ? <Loader /> : (
        <table className="resultados-table">
          <thead>
            <tr>
              <th><Emoji symbol="🧑" label="Nombre" /> Nombre</th>
              <th><Emoji symbol="🏢" label="Propiedad" /> Propiedad</th>
              <th><Emoji symbol="🔢" label="Unidad" /> Unidad</th>
              <th><Emoji symbol="⚙️" label="Acciones" /> Acciones</th>
            </tr>
          </thead>
          <tbody>
            {copropietarios.map(c => (
              <tr key={c.id}>
                <td>{c.nombre}</td>
                <td>{c.propiedad}</td>
                <td>{c.unidad_asignada}</td>
                <td>
                  <button className="edit-btn" onClick={() => handleEdit(c)} title="Editar">
                    <Emoji symbol="✏️" label="Editar" />
                  </button>
                  <button className="delete-btn" onClick={() => handleDelete(c.id)} title="Eliminar">
                    <Emoji symbol="🗑️" label="Eliminar" />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
      {error && <div className="error-message">{error}</div>}

      {/* Modal para crear/editar */}
      {modal.open && (
        <div className="modal-backdrop">
          <div className="modal-content">
            <h3>
              <Emoji symbol={modal.copropietario ? "✏️" : "➕"} label={modal.copropietario ? "Editar" : "Nuevo"} />{' '}
              {modal.copropietario ? 'Editar' : 'Nuevo'} Copropietario
            </h3>
            <form className="modal-form" onSubmit={handleSave}>
              <label>
                <Emoji symbol="🧑" label="Nombre" /> Nombre:
                <input
                  value={form.nombre}
                  onChange={e => setForm({ ...form, nombre: e.target.value })}
                  required
                />
              </label>
              <label>
                <Emoji symbol="🏢" label="Propiedad" /> Propiedad:
                <input
                  value={form.propiedad}
                  onChange={e => setForm({ ...form, propiedad: e.target.value })}
                  required
                />
              </label>
              <label>
                <Emoji symbol="🔢" label="Unidad" /> Unidad asignada:
                <input
                  value={form.unidad_asignada}
                  onChange={e => setForm({ ...form, unidad_asignada: e.target.value })}
                  required
                />
              </label>
              <div>
                <button type="submit" className="save-btn">
                  <Emoji symbol="💾" label="Guardar" /> Guardar
                </button>
                <button type="button" className="cancel-btn" onClick={() => setModal({ open: false, copropietario: null })}>
                  <Emoji symbol="❌" label="Cancelar" /> Cancelar
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}


----- C:\ThomasParking\ThomasParking\src\pages\GestionUsuarios.jsx -----

import React, { useState, useEffect } from 'react';
import { supabase } from '../supabaseClient';
import Loader from '../components/Loader';
import Emoji from '../components/Emoji';

export default function GestionUsuarios() {
  const [usuarios, setUsuarios] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [modal, setModal] = useState({ open: false, usuario: null });
  const [form, setForm] = useState({ 
    nombre: '', 
    email: '',
    rol: 'registrador', 
    activo: true 
  });
  const [saving, setSaving] = useState(false);
  const [deleting, setDeleting] = useState(false);

  // Leer usuarios con validación
  const fetchUsuarios = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const { data, error } = await supabase
        .from('usuarios_app')
        .select('id, nombre, email, rol, activo')
        .order('nombre', { ascending: true });

      if (error) throw error;
      setUsuarios(Array.isArray(data) ? data : []);
    } catch (err) {
      setError(err.message || 'Error cargando usuarios');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => { 
    fetchUsuarios();
  }, []);

  // Validar formulario
  const validateForm = () => {
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(form.email)) {
      setError('Email inválido');
      return false;
    }
    if (form.nombre.trim().length < 3) {
      setError('Nombre debe tener al menos 3 caracteres');
      return false;
    }
    return true;
  };

  // Abrir modal para editar/crear
  const handleEdit = (usuario) => {
    setForm({
      nombre: usuario.nombre,
      email: usuario.email,
      rol: usuario.rol,
      activo: usuario.activo
    });
    setModal({ open: true, usuario });
  };

  const handleNew = () => {
    setForm({ nombre: '', email: '', rol: 'registrador', activo: true });
    setModal({ open: true, usuario: null });
  };

  // Guardar usuario
  const handleSave = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;
    
    setSaving(true);
    setError(null);

    try {
      const usuarioData = {
        nombre: form.nombre.trim(),
        email: form.email.trim().toLowerCase(),
        rol: form.rol,
        activo: form.activo
      };

      if (modal.usuario) {
        // Edición
        const { error } = await supabase
          .from('usuarios_app')
          .update(usuarioData)
          .eq('id', modal.usuario.id);
          
        if (error) throw error;
      } else {
        // Creación
        const { error } = await supabase
          .from('usuarios_app')
          .insert([usuarioData]);

        if (error) throw error;
      }

      setModal({ open: false, usuario: null });
      await fetchUsuarios();
    } catch (err) {
      setError(err.message || 'Error guardando usuario');
    } finally {
      setSaving(false);
    }
  };

  // Eliminar usuario
  const handleDelete = async (usuario) => {
    if (!window.confirm(`¿Eliminar usuario ${usuario.email}?`)) return;
    
    setDeleting(true);
    setError(null);

    try {
      const { error } = await supabase
        .from('usuarios_app')
        .delete()
        .eq('id', usuario.id);

      if (error) throw error;
      
      await fetchUsuarios();
    } catch (err) {
      setError(err.message || 'Error eliminando usuario');
    } finally {
      setDeleting(false);
    }
  };

  if (loading) return <Loader text="Cargando usuarios..." />;

  return (
    <div className="container mx-auto p-4">
      <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
        <Emoji symbol="👥" /> Gestión de Usuarios
      </h2>

      <div className="mb-4">
        <button 
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2"
          onClick={handleNew}
        >
          <Emoji symbol="➕" /> Nuevo usuario
        </button>
      </div>

      <div className="overflow-x-auto">
        <table className="w-full border-collapse">
          <thead className="bg-gray-100">
            <tr>
              <th className="p-3 text-left"><Emoji symbol="🧑" /> Nombre</th>
              <th className="p-3 text-left"><Emoji symbol="✉️" /> Email</th>
              <th className="p-3 text-left"><Emoji symbol="🎖️" /> Rol</th>
              <th className="p-3 text-left"><Emoji symbol="✔️" /> Estado</th>
              <th className="p-3 text-left"><Emoji symbol="⚙️" /> Acciones</th>
            </tr>
          </thead>
          <tbody>
            {usuarios.map(u => (
              <tr key={u.id} className="border-b hover:bg-gray-50">
                <td className="p-3">{u.nombre}</td>
                <td className="p-3">{u.email}</td>
                <td className="p-3">
                  <span className={`inline-block px-2 py-1 rounded ${u.rol === 'admin' ? 'bg-purple-100 text-purple-800' : 'bg-blue-100 text-blue-800'}`}>
                    {u.rol === 'admin' 
                      ? <><Emoji symbol="👑" /> Admin</>
                      : u.rol === 'copropietario'
                        ? <><Emoji symbol="🏠" /> Copropietario</>
                        : <><Emoji symbol="📋" /> Registrador</>}
                  </span>
                </td>
                <td className="p-3">
                  <span className={`inline-block px-2 py-1 rounded ${u.activo ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                    {u.activo ? <Emoji symbol="✅" /> : <Emoji symbol="❌" />}
                  </span>
                </td>
                <td className="p-3 flex gap-2">
                  <button 
                    className="text-blue-600 hover:text-blue-800"
                    onClick={() => handleEdit(u)}
                    disabled={deleting}
                  >
                    <Emoji symbol="✏️" />
                  </button>
                  <button 
                    className="text-red-600 hover:text-red-800"
                    onClick={() => handleDelete(u)}
                    disabled={deleting}
                  >
                    <Emoji symbol="🗑️" />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {error && (
        <div className="mt-4 p-3 bg-red-100 text-red-700 rounded-lg">
          <Emoji symbol="❌" /> {error}
        </div>
      )}

      {/* Modal de edición */}
      {modal.open && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
              <Emoji symbol={modal.usuario ? "✏️" : "➕"} />
              {modal.usuario ? 'Editar Usuario' : 'Nuevo Usuario'}
            </h3>

            <form onSubmit={handleSave} className="space-y-4">
              <div>
                <label className="block mb-2 font-medium"><Emoji symbol="🧑" /> Nombre:</label>
                <input
                  type="text"
                  value={form.nombre}
                  onChange={e => setForm({...form, nombre: e.target.value})}
                  className="w-full p-2 border rounded"
                  required
                  minLength="3"
                />
              </div>

              <div>
                <label className="block mb-2 font-medium"><Emoji symbol="✉️" /> Email:</label>
                <input
                  type="email"
                  value={form.email}
                  onChange={e => setForm({...form, email: e.target.value})}
                  className="w-full p-2 border rounded"
                  required
                  disabled={!!modal.usuario}
                />
              </div>

              <div>
                <label className="block mb-2 font-medium"><Emoji symbol="🎖️" /> Rol:</label>
                <select
                  value={form.rol}
                  onChange={e => setForm({...form, rol: e.target.value})}
                  className="w-full p-2 border rounded"
                  required
                >
                  <option value="admin">Administrador</option>
                  <option value="registrador">Registrador</option>
                  <option value="copropietario">Copropietario</option>
                </select>
              </div>

              <div className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={form.activo}
                  onChange={e => setForm({...form, activo: e.target.checked})}
                  className="w-4 h-4"
                />
                <label className="font-medium"><Emoji symbol="✔️" /> Usuario activo</label>
              </div>

              <div className="flex justify-end gap-2 mt-4">
                <button
                  type="button"
                  className="px-4 py-2 border rounded hover:bg-gray-100"
                  onClick={() => setModal({ open: false, usuario: null })}
                >
                  <Emoji symbol="❌" /> Cancelar
                </button>
                <button 
                  type="submit" 
                  className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                  disabled={saving}
                >
                  {saving ? <Loader size="small" /> : <><Emoji symbol="💾" /> Guardar</>}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\pages\Login.jsx -----

// src/pages/Login.jsx
import React, { useState } from "react";
import { supabase } from "../supabaseClient";
import { useNavigate } from "react-router-dom";

export default function Login() {
  const [email, setEmail] = useState("");
  const [step, setStep] = useState("email"); // "email" o "otp"
  const [otp, setOtp] = useState("");
  const [loading, setLoading] = useState(false);
  const [info, setInfo] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();

  // Enviar código OTP al correo
  const handleSendCode = async (e) => {
    e.preventDefault();
    setError("");
    setInfo("");
    setLoading(true);

    const { error } = await supabase.auth.signInWithOtp({
      email,
      options: {
        shouldCreateUser: true, // o false si solo quieres permitir acceso a usuarios existentes
        // emailRedirectTo: 'https://TU_DOMINIO.com/' // opcional, si quieres redirigir tras login
      },
    });

    setLoading(false);

    if (error) {
      setError(error.message);
    } else {
      setStep("otp");
      setInfo("Se ha enviado un código a tu correo electrónico.");
    }
  };

  // Verificar el código OTP
  const handleVerifyCode = async (e) => {
    e.preventDefault();
    setError("");
    setInfo("");
    setLoading(true);

    const { error } = await supabase.auth.verifyOtp({
      email,
      token: otp,
      type: "email",
    });

    setLoading(false);

    if (error) {
      setError(error.message);
    } else {
      setInfo("¡Autenticación exitosa! Redirigiendo...");
      // Espera un momento y redirige
      setTimeout(() => navigate("/"), 1500);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900">
      <div className="w-full max-w-md bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8">
        <h2 className="text-2xl font-bold mb-6 text-center text-gray-800 dark:text-gray-100">
          Iniciar sesión sin contraseña
        </h2>
        {step === "email" ? (
          <form onSubmit={handleSendCode} className="space-y-4">
            <div>
              <label className="block mb-1 text-gray-700 dark:text-gray-300">
                Correo electrónico
              </label>
              <input
                type="email"
                className="w-full px-4 py-2 border rounded focus:outline-none focus:ring"
                value={email}
                onChange={e => setEmail(e.target.value)}
                required
                autoComplete="email"
                disabled={loading}
              />
            </div>
            {error && (
              <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-2 rounded">
                {error}
              </div>
            )}
            {info && (
              <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-2 rounded">
                {info}
              </div>
            )}
            <button
              type="submit"
              className="w-full py-2 px-4 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
              disabled={loading}
            >
              {loading ? "Enviando..." : "Enviar código"}
            </button>
          </form>
        ) : (
          <form onSubmit={handleVerifyCode} className="space-y-4">
            <div>
              <label className="block mb-1 text-gray-700 dark:text-gray-300">
                Ingresa el código recibido por email
              </label>
              <input
                type="text"
                className="w-full px-4 py-2 border rounded focus:outline-none focus:ring"
                value={otp}
                onChange={e => setOtp(e.target.value)}
                required
                disabled={loading}
                maxLength={6}
                inputMode="numeric"
              />
            </div>
            {error && (
              <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-2 rounded">
                {error}
              </div>
            )}
            {info && (
              <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-2 rounded">
                {info}
              </div>
            )}
            <button
              type="submit"
              className="w-full py-2 px-4 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
              disabled={loading}
            >
              {loading ? "Verificando..." : "Verificar código"}
            </button>
          </form>
        )}
      </div>
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\pages\RegistroParqueo.jsx -----

// src/pages/RegistroParqueo.jsx
import React, { useState, useEffect } from 'react';
import { supabase } from '../supabaseClient';
import Loader from '../components/Loader';
import Emoji from '../components/Emoji';

export default function RegistroParqueo() {
  const [copropietarios, setCopropietarios] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [form, setForm] = useState({
    placa_vehiculo: '',
    tipo_vehiculo: 'carro',
    fecha_hora_ingreso: '',
    observaciones: '',
    dependencia_id: '',
    gratis: false,
  });
  const [success, setSuccess] = useState(null);

  // Cargar copropietarios
  useEffect(() => {
    let isMounted = true;
    const fetchCopropietarios = async () => {
      const { data, error } = await supabase
        .from('copropietarios')
        .select('id, nombre, propiedad, unidad_asignada');
      if (!error && isMounted) setCopropietarios(data);
      setLoading(false);
    };
    fetchCopropietarios();
    return () => { isMounted = false };
  }, []);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setForm(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    setSuccess(null);
    setLoading(true);
    try {
      if (!form.placa_vehiculo || !form.fecha_hora_ingreso || !form.dependencia_id) {
        setError('Todos los campos obligatorios deben estar completos.');
        setLoading(false);
        return;
      }
      const monto = form.gratis ? 0 : (form.tipo_vehiculo === 'carro' ? 1.00 : 0.50);
      const { error } = await supabase
        .from('registros_parqueadero')
        .insert([{
          ...form,
          monto,
        }]);
      if (error) throw error;
      setSuccess('Registro guardado exitosamente.');
      setForm({
        placa_vehiculo: '',
        tipo_vehiculo: 'carro',
        fecha_hora_ingreso: '',
        observaciones: '',
        dependencia_id: '',
        gratis: false,
      });
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  if (loading) return <Loader text="Cargando copropietarios..." />;

  return (
    <div className="registro-parqueo-container">
      <h2>
        <Emoji symbol="📝" label="Registro" /> Registro de Parqueo de Visita
      </h2>
      <form className="registro-form" onSubmit={handleSubmit}>
        <label>
          Placa del vehículo:
          <input
            name="placa_vehiculo"
            value={form.placa_vehiculo}
            onChange={handleChange}
            required
            autoFocus
          />
        </label>
        <label>
          Tipo de vehículo:
          <select
            name="tipo_vehiculo"
            value={form.tipo_vehiculo}
            onChange={handleChange}
            required
          >
            <option value="carro">Carro 🚗</option>
            <option value="moto">Moto 🏍️</option>
          </select>
        </label>
        <label>
          Fecha y hora de ingreso:
          <input
            type="datetime-local"
            name="fecha_hora_ingreso"
            value={form.fecha_hora_ingreso}
            onChange={handleChange}
            required
          />
        </label>
        <label>
          Observaciones:
          <input
            name="observaciones"
            value={form.observaciones}
            onChange={handleChange}
            placeholder="Opcional"
          />
        </label>
        <label>
          Copropietario:
          <select
            name="dependencia_id"
            value={form.dependencia_id}
            onChange={handleChange}
            required
          >
            <option value="">Seleccione...</option>
            {copropietarios.map(dep => (
              <option key={dep.id} value={dep.id}>
                {dep.nombre} ({dep.propiedad} - {dep.unidad_asignada})
              </option>
            ))}
          </select>
        </label>
        <label className="checkbox-label">
          <input
            type="checkbox"
            name="gratis"
            checked={form.gratis}
            onChange={handleChange}
          />
          <Emoji symbol="🆓" label="Gratis " /> Gratis
        </label>
        <button type="submit" className="save-btn" disabled={loading}>
          Guardar
        </button>
      </form>
      {error && <div className="error-message">{error}</div>}
      {success && <div className="info-message">{success}</div>}
    </div>
  );
}


----- C:\ThomasParking\ThomasParking\src\pages\ResumenRecaudo.jsx -----

// src/components/ResumenRecaudo.jsx
import React, { useState, useEffect } from 'react'
import { supabase } from '../supabaseClient'
import Loader from '../components/Loader'
import Emoji from '../components/Emoji'

export default function ResumenRecaudo({ refreshKey }) {
  const [registros, setRegistros] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [montoRecaudar, setMontoRecaudar] = useState('')
  const [procesando, setProcesando] = useState(false)
  const [filtroPropiedad, setFiltroPropiedad] = useState('')
  const [filtroUnidad, setFiltroUnidad] = useState('')
  const [filtroCopropietario, setFiltroCopropietario] = useState('')
  const [editModal, setEditModal] = useState({ open: false, registro: null })
  const [editData, setEditData] = useState({})
  const [propiedades, setPropiedades] = useState([])
  const [unidades, setUnidades] = useState([])

  useEffect(() => {
    const fetchCopropietarios = async () => {
      const { data, error } = await supabase
        .from('copropietarios')
        .select('propiedad, unidad_asignada')
      if (!error) {
        const props = [...new Set(data.map(d => d.propiedad))].sort()
        setPropiedades(props)
        setUnidades(data)
      }
    }
    fetchCopropietarios()
  }, [])

  const unidadesFiltradas = filtroPropiedad
    ? [...new Set(unidades.filter(u => u.propiedad === filtroPropiedad).map(u => u.unidad_asignada))]
    : []

  const fetchData = async () => {
    setLoading(true)
    try {
      const { data, error } = await supabase
        .from('registros_parqueadero')
        .select(`
          *,
          copropietarios:dependencia_id(nombre, propiedad, unidad_asignada)
        `)
        .order('fecha_hora_ingreso', { ascending: false })

      if (error) throw error
      setRegistros(data)
    } catch (error) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => { fetchData() }, [refreshKey])

  const handleRecaudoAutomatico = async () => {
    if (!filtroPropiedad || !filtroUnidad) {
      alert('Debe seleccionar propiedad y unidad asignada')
      return
    }

    const montoObjetivo = parseFloat(montoRecaudar)
    if (isNaN(montoObjetivo) || montoObjetivo <= 0) {
      alert('Ingrese un monto válido')
      return
    }

    setProcesando(true)
    try {
      const { data: registrosParaRecaudar, error } = await supabase
        .from('registros_parqueadero')
        .select(`
          *,
          copropietarios:dependencia_id(propiedad, unidad_asignada)
        `)
        .eq('copropietarios.propiedad', filtroPropiedad)
        .eq('copropietarios.unidad_asignada', filtroUnidad)
        .eq('recaudado', false)
        .eq('gratis', false)
        .order('fecha_hora_ingreso', { ascending: true })

      if (error) throw error
      if (!registrosParaRecaudar?.length) {
        alert('No hay registros pendientes para esta propiedad/unidad')
        return
      }

      let montoAcumulado = 0
      const registrosAMarcar = registrosParaRecaudar
        .filter(reg => {
          if (montoAcumulado >= montoObjetivo) return false
          montoAcumulado += Number(reg.monto)
          return true
        })
        .map(reg => reg.id)

      const { error: updateError } = await supabase
        .from('registros_parqueadero')
        .update({
          recaudado: true,
          fecha_recaudo: new Date().toISOString().slice(0, 10)
        })
        .in('id', registrosAMarcar)

      if (updateError) throw updateError

      alert(`Recaudado $${montoAcumulado.toFixed(2)} en ${registrosAMarcar.length} registros`)
      fetchData()
      setMontoRecaudar('')
    } catch (error) {
      alert('Error: ' + error.message)
    } finally {
      setProcesando(false)
    }
  }

  const registrosFiltrados = registros.filter(reg => {
    const coincidePropiedad = !filtroPropiedad || (reg.copropietarios?.propiedad || '') === filtroPropiedad
    const coincideUnidad = !filtroUnidad || (reg.copropietarios?.unidad_asignada || '') === filtroUnidad
    const coincideCopropietario = !filtroCopropietario || (reg.copropietarios?.nombre || '').toLowerCase().includes(filtroCopropietario.toLowerCase())
    return coincidePropiedad && coincideUnidad && coincideCopropietario
  })

  const resumen = registrosFiltrados.reduce((acc, reg) => {
    if (reg.gratis) acc.gratis++
    else if (reg.recaudado) acc.recaudado += Number(reg.monto)
    else acc.pendiente += Number(reg.monto)
    return acc
  }, { recaudado: 0, pendiente: 0, gratis: 0 })

  const handleEditSave = async () => {
    const id = editModal.registro.id
    const monto = editData.gratis ? 0 : (editData.tipo_vehiculo === 'carro' ? 1.00 : 0.50)

    try {
      const { error } = await supabase
        .from('registros_parqueadero')
        .update({ ...editData, monto })
        .eq('id', id)

      if (error) throw error
      fetchData()
      setEditModal({ open: false, registro: null })
    } catch (error) {
      alert(error.message)
    }
  }

  const handleDelete = async (id) => {
    if (!window.confirm('¿Seguro que desea eliminar este registro?')) return
    try {
      const { error } = await supabase
        .from('registros_parqueadero')
        .delete()
        .eq('id', id)
      if (error) throw error
      fetchData()
    } catch (error) {
      alert(error.message)
    }
  }

  return (
    <div className="resumen-container">
      <h2><Emoji symbol="📊" label="Resumen" /> Resumen de Recaudación</h2>

      <div className="resumen-visual">
        <div className="resumen-item recaudado">
          <Emoji symbol="💰" /> ${resumen.recaudado.toFixed(2)}
          <span>Recaudado</span>
        </div>
        <div className="resumen-item pendiente">
          <Emoji symbol="⏳" /> ${resumen.pendiente.toFixed(2)}
          <span>Pendiente</span>
        </div>
        <div className="resumen-item gratis">
          <Emoji symbol="🆓" /> {resumen.gratis}
          <span>Gratis</span>
        </div>
      </div>

      <section className="recaudo-automatico">
        <h3><Emoji symbol="⚡" /> Recaudo Automático</h3>
        <div className="filtros-recaudo">
          <div className="filtro-group">
            <label><Emoji symbol="🏠" /> Propiedad:</label>
            <select
              value={filtroPropiedad}
              onChange={e => {
                setFiltroPropiedad(e.target.value)
                setFiltroUnidad('')
              }}
            >
              <option value="">Seleccione propiedad</option>
              {propiedades.map(prop => (
                <option key={prop} value={prop}>{prop}</option>
              ))}
            </select>
          </div>

          <div className="filtro-group">
            <label><Emoji symbol="🔢" /> Unidad:</label>
            <select
              value={filtroUnidad}
              onChange={e => setFiltroUnidad(e.target.value)}
              disabled={!filtroPropiedad}
            >
              <option value="">Seleccione unidad</option>
              {unidadesFiltradas.map(unidad => (
                <option key={unidad} value={unidad}>{unidad}</option>
              ))}
            </select>
          </div>

          <div className="filtro-group">
            <label><Emoji symbol="💵" /> Monto objetivo:</label>
            <input
              type="number"
              step="0.01"
              value={montoRecaudar}
              onChange={e => setMontoRecaudar(e.target.value)}
              placeholder="Ej: 50.00"
            />
          </div>

          <button
            className="btn-recaudo"
            onClick={handleRecaudoAutomatico}
            disabled={procesando || !filtroPropiedad || !filtroUnidad}
          >
            {procesando ? 'Procesando...' : 'Ejecutar Recaudo'}
          </button>
        </div>
      </section>

      <div className="filtros-avanzados">
        <div className="filtro-group">
          <label><Emoji symbol="👥" /> Copropietario:</label>
          <input
            type="text"
            value={filtroCopropietario}
            onChange={e => setFiltroCopropietario(e.target.value)}
            placeholder="Filtrar por nombre"
          />
        </div>
      </div>

      <div className="detalle-recaudo">
        <h3><Emoji symbol="📋" /> Detalle de Registros</h3>
        <div className="tabla-detalle">
          <table>
            <thead>
              <tr>
                <th><Emoji symbol="🚗" /> Placa</th>
                <th><Emoji symbol="🛵" /> Tipo</th>
                <th><Emoji symbol="💵" /> Monto</th>
                <th><Emoji symbol="👥" /> Copropietario</th>
                <th><Emoji symbol="📅" /> Fecha Recaudo</th>
                <th><Emoji symbol="⚙️" /> Acciones</th>
              </tr>
            </thead>
            <tbody>
              {registrosFiltrados.map(reg => (
                <tr key={reg.id} className={reg.recaudado ? 'recaudado' : 'pendiente'}>
                  <td>{reg.placa_vehiculo}</td>
                  <td>{reg.tipo_vehiculo}</td>
                  <td>${reg.monto.toFixed(2)}</td>
                  <td>{reg.copropietarios?.nombre || '-'}</td>
                  <td>{reg.fecha_recaudo || '-'}</td>
                  <td>
                    <button onClick={() => {
                      setEditModal({ open: true, registro: reg })
                      setEditData({
                        placa_vehiculo: reg.placa_vehiculo,
                        tipo_vehiculo: reg.tipo_vehiculo,
                        fecha_hora_ingreso: reg.fecha_hora_ingreso?.slice(0, 10) || '',
                        gratis: reg.gratis
                      })
                    }}>
                      <Emoji symbol="✏️" />
                    </button>
                    <button onClick={() => handleDelete(reg.id)}>
                      <Emoji symbol="🗑️" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {editModal.open && (
        <div className="modal-edicion">
          <h3>Editar Registro</h3>
          <form onSubmit={e => { e.preventDefault(); handleEditSave() }}>
            <label>
              Placa:
              <input
                value={editData.placa_vehiculo}
                onChange={e => setEditData({ ...editData, placa_vehiculo: e.target.value })}
                required
              />
            </label>

            <label>
              Tipo:
              <select
                value={editData.tipo_vehiculo}
                onChange={e => setEditData({ ...editData, tipo_vehiculo: e.target.value })}
              >
                <option value="carro">Carro</option>
                <option value="moto">Moto</option>
              </select>
            </label>

            <label>
              Fecha ingreso:
              <input
                type="date"
                value={editData.fecha_hora_ingreso}
                onChange={e => setEditData({ ...editData, fecha_hora_ingreso: e.target.value })}
              />
            </label>

            <label className="checkbox">
              <input
                type="checkbox"
                checked={editData.gratis}
                onChange={e => setEditData({ ...editData, gratis: e.target.checked })}
              />
              <Emoji symbol="🆓" /> Gratis
            </label>

            <div className="acciones-modal">
              <button type="submit">Guardar</button>
              <button type="button" onClick={() => setEditModal({ open: false, registro: null })}>
                Cancelar
              </button>
            </div>
          </form>
        </div>
      )}

      {loading && <Loader text="Cargando datos..." />}
      {error && <div className="error-message">{error}</div>}
    </div>
  )
}


----- C:\ThomasParking\ThomasParking\src\providers\QueryClientProvider.jsx -----

// src/providers/QueryClientProvider.jsx
import React from 'react'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'

// Configura el QueryClient con opciones recomendadas para producción
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000,     // 5 minutos: los datos se consideran frescos
      cacheTime: 30 * 60 * 1000,    // 30 minutos: tiempo de vida en caché
      retry: 2,                     // Reintenta 2 veces en caso de error
      refetchOnWindowFocus: false,  // No recargar al cambiar de pestaña
      useErrorBoundary: true        // Usa ErrorBoundary para errores
    },
    mutations: {
      useErrorBoundary: true
    }
  }
})

/**
 * Envuelve tu aplicación con este provider para habilitar React Query globalmente.
 * Uso:
 * <MyQueryClientProvider>
 *   <App />
 * </MyQueryClientProvider>
 */
export default function MyQueryClientProvider({ children }) {
  return (
    <QueryClientProvider client={queryClient}>
      {children}
      {import.meta.env.DEV && <ReactQueryDevtools initialIsOpen={false} />}
    </QueryClientProvider>
  )
}


----- C:\ThomasParking\ThomasParking\src\styles\global.css -----

:root {
  --background: #f8fafc;
  --surface: #fff;
  --text: #18181b;
  --text-muted: #6b7280;
  --primary: #6366f1;
  --primary-light: #e0e7ff;
  --secondary: #38bdf8;
  --accent: #ff6f91;
  --success: #10b981;
  --warning: #f59e42;
  --danger: #ef4444;
  --radius-lg: 20px;
  --radius-md: 12px;
  --radius-sm: 6px;
  --shadow-lg: 0 8px 32px #6366f133;
  --shadow-md: 0 2px 12px #6366f144;
  --transition: .22s cubic-bezier(.4,0,.2,1);
  --font-main: "Inter", "Segoe UI", Arial, sans-serif;
  --focus: #ff6f91;
}

[data-theme=dark] {
  --background: #18181b;
  --surface: #23272f;
  --text: #f3f4f6;
  --text-muted: #a1a1aa;
  --primary: #818cf8;
  --primary-light: #23272f;
  --secondary: #38bdf8;
  --accent: #f472b6;
  --shadow-lg: 0 8px 32px #818cf833;
  --shadow-md: 0 2px 12px #818cf844;
}

html, body {
  margin: 0;
  padding: 0;
  font-family: var(--font-main);
  background: var(--background);
  color: var(--text);
  min-height: 100vh;
  scroll-behavior: smooth;
  text-align: center;
  transition: background var(--transition), color var(--transition);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#root, .app-root {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  background: var(--background);
}

/* Enlaces */
a {
  color: var(--primary);
  text-decoration: none;
  transition: color var(--transition);
}
a:hover, a:focus {
  color: var(--accent);
  text-decoration: underline;
  outline-offset: 2px;
  outline: 2px solid var(--accent);
}

/* Títulos */
h1, h2, h3, h4 {
  font-weight: 800;
  letter-spacing: -1px;
  margin-top: 0;
  text-align: center;
  line-height: 1.2;
}

/* Formularios y botones */
button, input, select, textarea {
  font-family: inherit;
  font-size: 1rem;
  border-radius: var(--radius-md);
  border: 1.5px solid #e5e7eb;
  padding: 10px 14px;
  outline-offset: 2px;
  transition: border-color var(--transition), background var(--transition), box-shadow var(--transition);
  margin: .25rem 0;
  box-sizing: border-box;
}
button {
  cursor: pointer;
  background: var(--primary);
  color: #fff;
  border: none;
  font-weight: 600;
  box-shadow: var(--shadow-md);
  min-width: 120px;
  min-height: 44px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  -webkit-user-select: none;
  user-select: none;
}
button:hover, button:focus {
  background: linear-gradient(90deg, var(--secondary) 60%, var(--accent) 100%);
  outline: none;
  box-shadow: 0 0 0 3px var(--focus);
}
button:focus-visible {
  outline: 3px solid var(--focus);
  outline-offset: 3px;
}
/* Botón hamburguesa pequeño */
button[aria-label="Abrir menú"], button[aria-label="Cerrar menú"], .btn-hamburguesa {
  min-width: 0 !important;
  min-height: 0 !important;
  width: 32px !important;
  height: 32px !important;
  padding: 4px !important;
  box-shadow: none !important;
}

/* Inputs */
input:focus, select:focus, textarea:focus {
  border-color: var(--primary);
  background: #f0f9ff;
  box-shadow: 0 0 0 3px var(--focus);
}
input[type=checkbox], input[type=radio] {
  width: 1.1em;
  height: 1.1em;
  accent-color: var(--primary);
  margin-right: 7px;
  cursor: pointer;
}

/* Scrollbar */
::-webkit-scrollbar {
  width: 10px;
  background: #e0e7ef;
}
::-webkit-scrollbar-thumb {
  background: var(--primary);
  border-radius: 8px;
}

/* Thumbnails */
.thumbnail {
  width: 38px;
  height: 38px;
  object-fit: cover;
  border-radius: var(--radius-sm);
  box-shadow: 0 2px 6px #6366f133;
}

/* Modal */
.modal-backdrop {
  position: fixed;
  top: 0; left: 0;
  width: 100vw; height: 100vh;
  background: #18181bbf;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}
.modal-content {
  background: var(--surface);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-lg);
  padding: 2rem;
  max-width: 480px;
  width: 90vw;
  max-height: 90vh;
  overflow-y: auto;
  text-align: left;
}

/* Loader */
.loader-spinner {
  width: 48px;
  height: 48px;
  border: 6px solid #e0e0e0;
  border-top: 6px solid var(--primary);
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
}
@keyframes spin {
  0% { transform: rotate(0deg);}
  100% { transform: rotate(360deg);}
}

/* Responsive helpers */
@media (max-width: 768px) {
  .filtros-grid { flex-direction: column; align-items: center; }
  .filtro-item { min-width: 100%; }
  .resultados-table-container { max-height: 300px; }
}

/* Otros estilos útiles */
.sin-resultados {
  color: var(--text-muted);
  font-size: 1.1em;
  text-align: center;
  padding: 1.2em 0;
}
.error-message {
  background: #fffbe6;
  color: var(--danger);
  border: 1.5px solid #ffe58f;
  margin-top: 1rem;
  padding: 12px 18px;
  border-radius: var(--radius-md);
  font-size: 1.06em;
  font-weight: 600;
  text-align: center;
  max-width: 700px;
  word-wrap: break-word;
}

/* Opcional: para que el navbar no tape el contenido al hacer scroll */
.pt-16 { padding-top: 4rem !important; }
